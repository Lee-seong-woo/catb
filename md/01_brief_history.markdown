# 1장 해커 문화의 짧은 역사


최준호 역[^1-1]
[^1-1]: 역자주 이 글은 2000년 6월에 출판된 『[오픈 소스, 에릭 레이먼드 외, 송창훈 외 옮김, 한빛미디어, 2000년, ISBN: 897914069x][link-opensource-vol1])』에 포함된 최준호 씨의 번역을 송창훈이 보충한 것이다(링크된 무료 전자책은 2013년에 재출판된 것이다). 이 글은 최준호 씨의 번역에, (1) 1999년 이후의 개정 내용을 모두 반영하고 (2) 참고할 만한 자료를 역자주로 추가하고, (3) 책의 전체적인 일관성을 맞추기 위해 용어와 외래어 표기, 표현 등을 통일하는 작업 외에는 가능한 원래의 번역을 수정하지 않으려고 노력했다. 따라서 원문이나 원번역과의 차이로 인한 오류가 있다면, 이는 전적으로 나중 역자의 책임이다. 이 글의 원문은 <http://www.catb.org/~esr/writings/cathedral-bazaar/hacker-history/>에서 볼 수 있으며, 번역에 사용한 판본은 2000년 8월 25일에 개정된 1.24판이다. 한국어 번역문의 최종 개정일은 2013년 12월 18일이다.
[link-opensource-vol1]: http://www.hanb.co.kr/ebook/look.html?isbn=9788968486449

## 요약

이 글은 진정한 프로그래머들이 존재하던 역사 이전의 시대와 MIT 인공지능연구소의 영예롭던 시기, 그리고 어떻게 아르파넷이 최초의 네트워크 국가를 만들어 내었는가를 포함한 해커 문화의 기원에 대해 설명한다. 또한, 유닉스의 초기 성장과 이어진 후반의 침체 그리고 핀란드로부터의 새로운 희망과 ‘진정한 마지막 해커’가 어떻게 다음 세대의 시조가 됐는가에 대해 설명한다. 그리고 리눅스와 인터넷의 주류가 대중의 관심 밖에 있던 해커 문화를 현재와 같이 눈에 띄는 형태로 만든 방법을 설명하고자 한다.

## 프롤로그: 진정한 프로그래머

태초에 진정한 프로그래머들이 있었다.


그들은 자신을 스스로 그렇게 부르지 않았다. 또한 ‘해커’라고 부르지도 않았고 특별히 어떤 명칭이 있는 것도 아니었다. ‘진정한 프로그래머’라는 별명은 1980년 이후까지 만들어지지도 않았다. 그러나 1945년 이후부터 컴퓨팅 기술은 전 세계의 총명하고 창조적인 수많은 사람을 유혹했다. 에커트`J. Presper Eckert, 1919∼1995`와 모클리`John Mauchly, 1907∼1980`의 에니악`ENIAC: Electronic Numerical Integrator And Computer`에서부터 소수의 열정적인 프로그래머에 의해 자의식 강한 기술 문화가 계속됐으며, 사람들은 소프트웨어를 재미로 만들고 즐기기 시작했다.

진정한 프로그래머는 전형적으로 공학이나 물리학을 배운 사람이었다. 이들은 흰 양말과 폴리에스터 셔츠, 넥타이 차림에 두꺼운 안경을 낀 채 기계어, 어셈블리어, 포트란, 그리고 이제는 잊혀진 몇몇 고대 언어로 프로그래밍했다. 이들이 해커 문화의 선각자들이며, 대부분 본격적인 컴퓨터의 역사가 시작되기 이전이었기 때문에 찬양을 받지 못한 주인공들이었다.

제2차 세계대전이 끝난 후, 1970년대 초반까지 배치`batch` 컴퓨팅과 ‘거대한 고철 덩어리’인 메인프레임이 주름잡던 때에 진정한 프로그래머들은 컴퓨팅에서 기술 문화를 주도했다. 잘 알려진 ‘멜 이야기’[^1-2]와 여러 가지 머피의 법칙, 그리고 여전히 많은 컴퓨터실을 기품 있게 해주는 가짜 독일식 ‘[블린켄라이트](http://www.catb.org/jargon/html/B/blinkenlights.html)`Blinkenlight`’ 포스터까지 경배하던 해커 전통의 일부는 이 시대까지 거슬러 올라간다.

[^1-2]: 역자주 <http://www.catb.org/jargon/html/story-of-mel.html>에 자세한 설명이 있다.

‘진정한 프로그래머’ 문화에서 자란 사람들은 1990년대까지도 활발하게 활동했다.  크레이`Cray` 슈퍼컴퓨터 제품군의 설계자 시모어 크레이`Seymour Cray, 1925∼1996`는 직접 설계한 운영체제 전체를 자신이 설계한 컴퓨터에 탑재했다고 말했다. 이것은 8진수를 사용한 것으로 오류 없이 동작했다. 진정한 프로그래머의 위대함은 이런 것이 아닐까? 더 가벼운 내용으로 ‘악마의 DP 사전’[^1-3]의 저자 스탠 켈리 부틀`Stan Kelly-Bootle`과 다른 뛰어난 전승자들은 1948년에 최초의 프로그램 내장형 디지털 컴퓨터 맨체스터 마크 I`Manchester Mark I`에서 프로그래밍했다. 최근 그는 컴퓨터 잡지에 오늘날 해커 문화에 대한 활발하고 박식한 대화 형태를 띠는 기술적인 유머 칼럼을 종종 기고 하고 있다.

[^1-3]: 원주 『The Devil’s DP Dictionary, Stan Kelly-Bootle, McGraw-Hill, 1981, ISBN: 0070340226』

다른 사람들, 가령 데이비드 룬드스톰`David E. Lundstorm`은 이런 초기 시대의 일화들을 책으로 썼다.[^1-4]

[^1-4]: 원주 『A Few Good Men From UNIVAC, David E. Lundstrom, MIT Press, 1987, ISBN: 0262121204』

‘진정한 프로그래머’ 문화가 해낸 것은 대화형 컴퓨팅과 대학, 네트워크의 발달이었다. 결국 그들은 오늘날 오픈소스 해커 문화로 진화할, 계속되는 공학 전통을 탄생시켰다.

## 초기 해커들

오늘날 우리가 알고 있는 해커 문화의 시초는 MIT가 최초의 PDP-1`Programmed Data Processor-1`을 구매한 1961년으로 생각할 수 있다. MIT의 테크 모델 철도 클럽`Tech Model Railroad Club`[^1-5]은 이 기계를 자신들이 좋아하는 기술 장난감으로 택하고 오늘날 우리가 인식하는 프로그래밍 도구와 그와 관련된 은어, 그리고 주변 환경 전체를 만들어 냈다. 이 시절에 대한 설명은 스티븐 레비`Steven Levy`가 쓴 『해커스』[^1-6]의 첫 장 에서 참고할 수 있다.

[^1-5]: 역자주 <http://tmrc.mit.edu/> 참고.

[^1-6]: 원주 『Hackers, Steven Levy, Anchor/Doubleday 1984, ISBN: 0385191952』 (역자주 한국어 번역판 『해커, 그 광기와 비밀의 기록, 사민서각, 김동광 옮김, 1996년, ISBN: 9788986311341』 또는 『해커스, 세상을 바꾼 천재들, 박재호, 이혜영 옮김, 한빛미디어, 2013년, ISBN: 9788968480454』의 제1장 ‘테크 모델 철도 클럽’ 부분 참고)

‘해커’라는 용어는 MIT 해커 문화가 최초로 도입한 것으로 보인다. 테크 모델 철도 클럽의 해커는 1980년 초기까지 전 세계 인공지능 연구의 중심이었던 MIT 인공 지능연구소의 핵심이 됐다. 그리고 그 영향력은 아르파넷`ARPANET: Advanced Research Projects Agency NETwork` 최초의 해인 1969년 이후 더 넓게 퍼졌다.

아르파넷은 최초의 대륙 간 고속 컴퓨터 네트워크였다. 국방성의 디지털 통신 실험으로 만들어졌지만, 수백 군데의 대학과 방위 산업체 및 연구소를 연결하게 됐다. 연구자들은 어떤 곳에서든지 전례 없던 속도와 유연성으로 정보를 교환할 수 있었다.  이는 협동 작업에 큰 후원이 됐고 기술적 진보의 속도와 강도를 크게 증가시켰다.

그러나 아르파넷은 다른 역할도 수행했다. 아르파넷의 전자 고속도로는 미국 내 모든 해커를 결집시켰다. 해커들은 자신들의 비영속적인 지역 문화를 개발하는 고립된 소규모 집단으로 남는 대신, 자신들이 네트워크 부족임을 발견 (또는 재발견) 했다.

(최초의 은어 목록과 풍자 작품, 해커 윤리에 대한 자의식적 논의 같은) 의도적 해커 문화의 유물은 모두 초기 아르파넷에서 떠돌아다니던 것이었다. 중요한 예로, 「[자곤 파일][link-jargon]」 의 최초 판은 1973년부터 1975년 사이에 네트워크를 통한 협력으로 만들어졌다.  이 은어 사전은 해커 문화를 정의하는 문서 중 하나가 됐고 마침내 『해커 사전』이란 제목으로 1983년에 출판되었다. 이 책의 초판은 절판됐지만, 새로운 확장 개정판[^1-7]이 출판되어 있다.

[^1-7]: 원주 『The New Hacker's Dictionary, Eric S. Raymond, MIT Press, 3rd edition, 1996. ISBN: 0262680920』 (역자주\_한국어 번역판 『해커 영어사전, Eric S. Raymond, 한경훈 옮김, 기전연구사, 1998년, ISBN: 9788933604427』)
[link-jargon]: http://www.catb.org/esr/jargon/

해커 문화는 네트워크에 연결된 대학에서, 특히 (모든 대학에서는 아니지만) 컴퓨터 과학 학부에서 주로 자라났다. 문화적으로 1960년 후반 MIT 인공지능연구소`Massachusetts Institute of Technology, Artificial Intelligence Laboratory`가 대학 중 최초였다. 그러나 스탠퍼드 대학교 인공지능연구소`SAIL: Stanford Artificial Intelligence Laboratory`와 카네기 멜런 대학교`CMU: Carnegie-Mellon University`도 비슷하게 중요한 비중을 차지했다. 이곳들은 컴퓨터 과학과 인공지능 연구가 번창하는 중심지였다. 이들은 기술과 전통 모든 면에서 해커 문화의 중요한 것들에 이바지할 수 있는 총명한 사람들을 끌어들였다.

인공지능연구소의 흥망은 컴퓨팅 기술의 변화 물결에 의해 주도됐기 때문에 다음에 올 것이 무엇인지 이해하려면 컴퓨터 자체를 달리 살펴봐야 할 필요가 있다.

예를 들어, PDP-1 시대부터 해커 문화의 운명은 DEC`Digital Equipment Corporation`[^1-8]의 PDP 마이크로컴퓨터 시리즈와 함께 엮여 있었다. DEC는 상용 대화형 컴퓨팅과 시분할 운영체제를 개척했다. 이 회사의 기계들은 유연하고 강력했으며, 당시에는 비교적 저렴했으므로 많은 대학이 이 기계를 구매했다.

[^1-8]: 역자주 ‘디·이·시’, ‘데크’, ‘디지털’ 등으로 발음 및 호칭한다.

저렴한 시분할 시스템은 해커 문화가 자라나는 매개체였고, 아르파넷의 시스템 대부분은 주로 DEC 기계의 네트워크 형태였다. 이들 중 가장 주목 받은 것은 1967년에 처음 발표된 PDP-10이었다. PDP-10은 거의 15년 동안 해커 문화에서 선호된 제품이었다. 또한 (DEC의 다른 기계용 운영체제인) TOPS-10과 (TOPS-10의 어셈블러인) MACRO-10은 많은 은어와 계속되는 전통 속에서 여전히 향수를 느낄 수 있는 제품들로 기억되고 있다.

MIT 해커들은 다른 이들과 마찬가지로 PDP-10을 사용했지만 조금 다른 길을 택했다. 그들은 PDP-10용 DEC 소프트웨어를 완전히 버리고 지금은 전설로 남은 자신들만의 운영체제 ITS를 만들어냈다.

ITS는 ‘비호환적 시분할 시스템`Incompatible Timesharing System`’을 말하며, 이는 자신만의 방식을 원했던 MIT의 태도를 잘 알 수 있게 한다. 다행히도 MIT 사람들은 그들의 교만에 상응하는 지성을 갖고 있었다. 항상 그랬지만 변덕스럽고 별나며 종종 버그도 있었던 ITS는 일련의 멋진 기술적 진보를 뒷받침했고, (논쟁의 여지는 있지만) 여전히 가장 오랫동안 사용한 시분할 시스템이라는 기록을 보유하고 있다.

ITS 자체는 어셈블러로 작성됐지만 많은 ITS 프로젝트는 인공지능 언어인 리스프`LISP: LISt Processing`로 작성됐다. 리스프는 당시의 어떤 언어보다 강력하고 유연하게 설계돼 25년이 지난 오늘날에도 여전히 대부분의 언어보다 뛰어날 정도다. 리스프는 ITS 해커들이 특이하고 창조적인 방식으로 자유롭게 생각하도록 해주었다. 바로 이것이 성공의 주된 요인이 됐으며, 리스프는 여전히 해커 문화가 좋아하는 언어 중 하나로 남아 있다.

ITS 문화의 많은 기술적 창조는 오늘날에도 살아있다. 이맥스`Emacs: Editor MACroS 또는 Eight Megabytes And Constantly Swapping` 프로그램 편집기가 아마도 제일 잘 알려진 것이며, 「[자곤 파일][link-jargon]」에서 볼 수 있듯이 ITS 전통 중 많은 것들이 여전히 해커들에게 ‘살아’있다.

SAIL과 CMU도 잠자코 있지만은 않았다. SAIL에서 PDP-10으로 성장한 해커들의 중심인물 중 많은 사람이 나중에 개인용 컴퓨터와 오늘날 윈도·아이콘·마우스 소프트웨어 인터페이스 개발의 핵심 인물이 됐다. 또한 CMU의 해커들은 전문가 시스템과 산업 로봇 공학에서 최초의 실용적인 대규모 애플리케이션을 이끌게 될 작업을 하고 있었다.

이 문화와 관련된 또 다른 중요 장소는 제록스`Xerox`의 유명한 팰로앨토 연구소`PARC: Palo Alto Research Center`다. PARC`파크`는 1970년대 초반부터 1980년대 중반까지 10년 이상 하드웨어와 소프트웨어의 놀라운 혁신을 이루어 냈다. 소프트웨어 인터페이스의 현대적 형태인 마우스와 윈도, 아이콘이 여기서 만들어졌다. 레이저 프린터와 근거리 통신망`LAN: Local Area Network`도 그랬다. PARC의 프린터 D 제품군은 1980년대의 강력한 개인용 컴퓨터의 등장을 10년 전에 예상한 것이었지만, 슬프게도 자기 회사에 영예를 가져다 주지는 못했다. 그 때문에 자신을 제외한 모든 사람을 위한 뛰어난 아이디어를 개발하는 곳으로 PARC를 특징짓는 것이 일반적인 농담이 됐다. 그러나 해커 문화에 대한 그들의 영향은 대단한 것이었다.

아르파넷과 PDP-10 문화는 1970년대에 걸쳐 크고 다양하게 자라났다. 대륙 간 동호인들 사이의 협동을 돕는 데 사용된 메일링리스트의 기능은 점점 더 많은 부분이 사회적이거나 오락적인 목적으로 사용됐다. 미국 국방성 방위고등연구계획국`DARPA: Defense Advanced Research Projects Agency`은 기술적으로 ‘인증받지 않은’ 모든 활동을 일부러 모른 체했으며, 그들이 부담해야 할 별도의 과부하는 뛰어난 젊은 사람을 컴퓨팅 분야로 끌어들이기 위해 들여야 할 약간의 비용이라는 점을 이해하고 있었다.

아마도 ‘사회적’인 아르파넷 메일링리스트 중 가장 잘 알려진 것은 공상과학 팬들을 위한 ‘SF-LOVERS’일 것이다.[^1-9] 이 리스트는 사실 아르파넷이 진화해 이루어진 거대한 ‘인터넷’에서 오늘날에도 여전히 건재하고 있다. 그 외에도 의사소통 수단을 개척한 다른 많은 메일링리스트가 있었는데, 이들은 후에 컴퓨서브`CompuServe`나 지니`GEnie: General Electric Network for Information Exchange`, 프로디지`Prodigy` 같은 이윤을 목적으로 운영된 시분할 서비스를 통해 상업화됐다. 더 나중에는 이 시장을 아메리카 온라인`AOL: America OnLine`이 지배하게 됐다.

[^1-9]: 역자주 이 리스트의 과거 자료는 <https://archive.org/details/SFLoversDigestArchive>에서 볼 수 있다.

나는 1977년에 초기 아르파넷과 공상과학 팬 문화를 통해 처음으로 해커 문화에 관여하게 됐으며, 그때부터 이 글에서 설명한 많은 변화에 참여한 한 사람의 증인이 됐다.

## 유닉스의 부상

아르파넷의 밝은 빛으로부터 멀리 떨어진 뉴저지의 황야에서는 마침내 PDP-10의 전통을 뒤엎을 만한 어떤 것이 1969년부터 진행되고 있었다. 아르파넷이 탄생한 해는 켄 톰프슨`Ken Thompson`이라는 AT&T 벨 연구소`American Telephone & Telegraph, Bell Labs`의 해커가 유닉스를 발명한 해이기도 했다.

톰프슨은 ITS와 근원이 같은 멀틱스`Multics: MULTiplexed Information and Computing Service`라는 시분할 운영체제의 개발 작업에 관여하고 있었다. 멀틱스는 운영체제의 복잡성이 사용자와 프로그래머 대부분에게 보이지 않도록 내부로 얼마나 감추어질 수 있는지를 시험하는 무대였다. 이 아이디어는 멀틱스를 외부에서 (그리고 프로그래밍에서!) 더 쉽게 사용할 수 있도록 해 더 많은 실질적인 작업이 이루어질 수 있도록 한 것이었다.

그러나 벨 연구소는 멀틱스가 쓸모 없는 흰 코끼리처럼 비대해져 가는 징후를 보이자 프로젝트에서 손을 떼었다. (이 시스템은 나중에 허니웰`Honeywell`에 의해 상업적으로 판매됐지만 성공하지 못했다.) 하지만 켄 톰프슨은 멀틱스 환경을 그리워했고 쓰레기가 돼버린 DEC PDP-7에 자기 생각을 구현해보기 시작했다.

데니스 리치`Dennis Ritchie, 1941~2011`라는 해커는 톰프슨의 유아기적 유닉스에서 사용하기 위해 ‘C’라고 불리는 새로운 언어를 발명했다. 유닉스처럼 C도 즐겁고, 제한이 없으며, 유연하게 설계됐다. 이 도구에 대한 관심은 벨 연구소 내에 퍼졌고, 1971년에 우리가 지금 사무자동화 시스템이라고 부르는 것을 연구소 내부에서 사용하려고 만들면서 톰프슨과 리치는 강력한 추진력을 얻을 수 있었다. 그러나 그들은 더 큰 목적에 관심이 있었다.

전통적으로 운영체제는 해당 호스트에서 최대의 효율을 얻기 위해 어셈블리어로 만들어진다. 톰프슨과 리치는 하드웨어와 컴파일러 기술이 운영체제 전체를 C 언어로 작성할 수 있을 만큼 좋아졌다는 사실을 인식한 최초의 사람 중 하나였다. 그리고 1978년까지 몇 종류의 다른 기계에 완전한 환경이 성공적으로 이식됐다.  

이런 일은 일찍이 없었으며 이 사실이 암시하는 것은 대단한 것이었다. 왜냐하면 만약 유닉스가 서로 다른 형태의 기계에서 같은 모습, 같은 기능을 제공할 수 있다면, 모두를 위한 공통 소프트웨어 환경으로 동작할 수 있을 것이고, 사용자는 더 이상 기계가 쓸모 없어질 때마다 소프트웨어를 새로 설계하기 위해 비용을 지불할 필요가 없기 때문이다. 즉, 해커들은 같은 소프트웨어를 기계마다 매번 새로 개발하지 않고 서로 다른 기계로 소프트웨어 툴킷을 옮기기만 하면 되는 것이다.

유닉스와 C는 호환성 이외에 또 다른 중요한 강점이 있었다. 둘 다 ‘간단하고 멍청하게 하자’는 철학에서 만들어졌다는 것이다. 프로그래머는 (이전이나 이후의 다른 대부분의 언어와 다르게) 매뉴얼을 항상 참조할 필요 없이 C의 전체적인 논리 구조를 머릿속에 유지할 수 있었다. 그리고 유닉스는 서로 유용한 방식으로 결합할 수 있도록 설계된 간단한 프로그램들의 유연한 툴킷으로 구성됐다.

이 조합은 설계자가 전혀 기대하지 않았던 것들을 포함해 아주 넓은 범위의 컴퓨팅 작업에 적합한 것으로 증명됐다. 유닉스는 공식적인 지원 프로그램이 없었지만, AT&T 내에서 아주 빠르게 퍼져 나갔다. 1980년대에 유닉스는 수많은 대학과 연구 컴퓨팅 사이트로 퍼져 나갔고, 수천 명의 해커가 이곳을 고향으로 생각했다.

초기 유닉스 문화를 일군 기계는 PDP-11과 그 후속작인 VAX`백스: Virtual Address eXtension`였다. 하지만 유닉스의 이식성 덕분에 아르파넷 전체에서 찾을 수 있는 다양한 기계에서 유닉스를 거의 수정 없이 실행할 수 있었다. 그리고 C 프로그램은 이런 모든 기계에서 즉시 사용할 수 있었다. 반면에 어셈블러는 아무도 사용하지 않았다.

유닉스는 유닉스 간 복사 프로토콜인 UUCP`Unix-to-Unix Copy Protocol`로 일종의 자신만의 네트워크를 만들 수 있었다. 이것은 속도가 느리고 신뢰성은 없었지만 저렴했다. 또한 어떤 유닉스 기계든 두 대 사이에 일반적인 전화선을 통해 점대점 이메일을 교환할 수 있었다. 이 기능은 외부의 별도 기능이 아니라 시스템에 내장돼 있었다. 유닉스 사이트들은 그들만의 네트워크 국가를 형성하기 시작했으며 해커 문화는 이를 따랐다. 이를 증명하듯 1980년 최초의 유즈넷은 아르파넷보다 빠르게 성장하고 있었다.

소수의 유닉스 사이트가 아르파넷 그 자체에 있었다. PDP-10과 유닉스 문화는 서로 만나 주변에서 섞이기 시작했지만 처음에는 잘되지 않았다. PDP-10 해커들은 유닉스 사람들을 리스프와 ITS의 화려하고 아름다운 복잡성에 반대되는, 터무니없이 원초적으로 보이는 도구를 사용하는 건방진 패거리로 여기는 경향이 있었다. 그들은 투덜거렸다. “돌 칼을 들고, 곰 가죽을 쓴 원시인들!”

그리고 또 다른 세 번째 조류가 흐르고 있었다. 1975년에 최초의 개인용 컴퓨터가 시장에 등장했다. 1977년 애플이 창업했고 그 이후 거의 믿을 수 없는 속도로 성장했다. 마이크로컴퓨터의 잠재력은 명백했으며 또 다른 총명하고 젊은 해커 세대를 끌어들였다. 그들의 언어는 베이직`BASIC: Beginner's All-purpose Symbolic Instruction Code`이었는데, 아주 원시적이어서 PDP-10 사용자와 유닉스 애호가 모두가 경멸할 가치조차 없는 것으로 생각했다.

## 오랜 시대의 끝

1980년의 상황은 이랬다. 다음의 세 가지 문화는 그 가장자리에서는 겹치지만 아주 다른 기술로 구성됐다. (1) 리스프, MACRO, TOPS-10 그리고 ITS와 결합한 아르파넷/PDP-10 해커 문화, (2) PDP-11과 VAX, 전화 연결과 함께 하는 유닉스와 C 언어 집단 그리고 (3) 컴퓨터의 힘을 사람들에게 가져다 주는 데 열중한 초기 마이크로컴퓨터광의 무질서한 무리.

이들 중 ITS 문화는 여전히 높은 지위를 구가하고 있었지만, 곧 먹구름이 연구소를 뒤덮기 시작했다. ITS가 의존하는 PDP-10 기술은 노쇠했고, 인공지능 기술을 상업화하려는 첫 시도 때문에 연구소 자체에 분열이 생기기 시작했다. 최고의 연구소 (그리고 SAIL과 CMU의) 직원 중 일부는 새롭게 등장한 회사의 고소득 직업에 유혹당해 그곳을 나갔다.

그러던 중, 치명타가 될 만한 사건이 1983년에 일어났다. DEC가 PDP-11과 VAX 계열에 집중하기 위해 PDP-10 후속 제품 계획을 취소했던 것이다. ITS에 더는 미래가 없었다. 이식성이 없다는 이유가 가장 크게 작용했고, ITS를 새 하드웨어로 옮기는 데 너무 많은 노력이 필요했다. 이제 VAX에서 동작하는 버클리 계열 유닉스 변종이 가장 좋은 해킹 시스템이 됐으며, 미래에 대한 식견을 가진 사람이라면 마이크로컴퓨터의 놀라운 성장력이 모든 것을 밀어낼 것으로 예측할 수 있었다.

이 무렵 레비는 『해커』라는 책을 썼다. 그의 중요한 정보 제공자 중 한 명은 MIT 인공지능연구소의 대표 인물이자 연구소 기술의 상업화에 가장 완고하게 타협을 거부한 (이맥스 개발자) 리처드 스톨먼`Richard M. Stallman`이었다.

(흔히 이름 약칭과 로그인 이름 RMS로 알려진) 스톨먼은 자유 소프트웨어 재단을 만들고 고품질의 자유 소프트웨어를 만드는 일에 몸을 바쳤다. 레비는 그를 ‘진정한 마지막 해커’로 칭송했지만, 그러한 묘사는 다행히도 틀린 것이었다.[^1-10]

[^1-10]: 역자주 리처드 스톨먼을 ‘진정한 마지막 해커’로 추앙한 스티븐 레비의 견해에 에릭 레이먼드가 반대하는 것은, 에릭 레이먼드와 리처드 스톨먼 두 사람이 가진 소프트웨어 철학의 차이와 갈등에 기인한다.

스톨먼의 위대한 계획은 1980년대 초반에 있었던 해커 문화의 변동을 깔끔하게 정리했다. 그는 1982년에 자유롭게 이용할 수 있는 유닉스의 완전한 복제판을 C 언어로 만들기 시작했다. 그의 프로젝트는 GNU 운영체제로 알려졌는데, GNU라는 이름은 ‘GNU는 유닉스가 아니다`Gnu’s Not Unix`’는 의미를 가진 일종의 재귀적 두문자어다. GNU는 빠르게 해커 활동의 주된 중심이 됐고, ITS의 정신과 전통은 더 새로운 유닉스와 VAX 중심 해커 문화의 중요한 일부로 보존됐다. 버클리 유닉스가 시작했던, 잔존하던 PDP-10 해커 문화와 유닉스 집단의 융합은 스톨먼의 계획으로 완성됐다.

실제로, 자유 소프트웨어 재단은 설립 후 10년 이상을 해커 문화의 대중적 이념을 폭넓게 정의했으며, 스톨먼 자신은 부족의 지도자로 믿을 만한 유일한 사람이 됐다.

이 무렵 마이크로칩과 근거리 통신망 기술이 해커 문화에 중대한 영향을 미치기 시작했다. 이더넷과 모토로라 68000 마이크로칩은 그 잠재성에 바탕을 둔 강력한 결합체로 등장했으며, 우리가 현재 워크스테이션이라 부르는 것의 첫 번째 세대를 만들어내려는 여러 다른 시도가 시작됐다.

비교적 저렴한 68000 기반 하드웨어에서 동작하는 유닉스가 폭넓은 애플리케이션에서 우세한 결합임을 증명할 것이라는 믿음으로, 1982년 버클리의 유닉스 해커들이 썬 마이크로시스템즈`SUN: Stanford University Network microsystems`를 창업했다. 그들은 옳았고, 그들이 꿈꾼 이상은 전체 산업의 형태를 만들어냈다. 워크스테이션이 누구나 구매할 수 있는 정도는 아직 아니었지만, 회사와 대학에서 사들이기에는 저렴했다. 이전의 VAX와 다른 시분할 시스템들은 썬 워크스테이션으로 빠르게 교체됐다.

## 상용 유닉스 시대

1984년 AT&T가 해체되고 유닉스가 처음으로 상업 제품이 됐을 때, 해커 문화에서 가장 중요한 구분선은 (대부분 유닉스가 탑재된 미니컴퓨터나 워크스테이션 급의 기계로 운영되는) 인터넷과 유즈넷 중심의 비교적 응집력 있는 ‘네트워크 국가’와 네트워크에 연결되지 않은 마이크로컴퓨터 광신도들의 거대한 오지 사이에 있었다.

썬과 다른 회사가 만들어낸 워크스테이션 급 기계들은 해커들에게 새로운 세계를 열어 줬다. 해당 기계들은 고성능 그래픽이 가능하고 네트워크를 통해 공유 데이터를 전송할 수 있도록 만들어졌다. 1980년대의 해커 문화는 이러한 기능에서 가장 많은 것을 얻어낼 수 있는 소프트웨어와 도구를 만드는 도전에 심취해 있었다. 버클리 유닉스는 아르파넷 프로토콜의 내장 지원 기능을 개발했으며, 이는 네트워킹 문제에 대한 해결책을 제공하고 이후 인터넷의 성장을 뒷받침했다.

워크스테이션 그래픽을 제어하려는 여러 가지 시도가 있었다. 널리 보급된 것 중 하나는 십여 군데 회사의 개인 기여자 수백 명을 통해 MIT가 개발한 X 윈도 시스템이었다. 성공의 중요 요소는 X 윈도 개발자들이 해커 윤리에 따라 기꺼이 소스를 자유롭게 공개해 인터넷을 통해 보급될 수 있도록 한 것이었다. (썬이 제공한 것을 포함해) 사유`proprietary` 그래픽 시스템에 대한 X 윈도의 승리는 몇 년 후 유닉스 자체에 심대한 영향을 미친 변화의 전조였다.

또한, 종종 ITS 대 유닉스의 경쟁에서 약간의 파를 가르는 성격의 잡음이 (대부분은 이전 ITS 사용자 측에서) 있었다. 그러나 마지막 ITS 기계는 1990년에 영원히 사라지게 됐고 열성자들은 더는 설 자리가 없었다. 대부분 불만은 있었지만 유닉스 문화로 동화돼 갔다.

네트워킹이 가능한 해커 문화 안에서 1980년대의 큰 경쟁은 버클리 유닉스와 AT&T 유닉스 열성자들에 의해 생겨났다. 아직도 당시의 포스터를 찾을 수 있는데, 영화 스타워즈에 나오는 X 윙 전투기가 AT&T 로고가 그려진 폭발하는 데스스타`Death Star`에서 빠져나오는 그림이다. 버클리 해커들은 자신을 비정한 회사 제국과 싸우는 반란군으로 간주하고 싶어했다. AT&T 유닉스는 시장에서 BSD/썬을 따라오지 못했지만, 표준 전쟁에서는 승리했다. 1990년이 되자 AT&T와 BSD 유닉스는 구분하기 어려워졌고 서로의 혁신을 많이 채용했다.

1987년 이후, 이전 10년의 워크스테이션 기술은 새롭고, 저가이며, 고성능인 인텔 386 칩과 그 후속 제품에 기반을 둔 개인용 컴퓨터에 의해 분명히 위협받는 것처럼 보이기 시작했다. 처음으로 해커들은 10년 전 미니컴퓨터의 성능과 저장 능력에 맞먹는 개인용 컴퓨터를 각자 가질 수 있었는데, 이것은 전체 개발 환경을 지원하고 인터넷과 통신할 수 있는 유닉스 엔진으로 사용할 수 있었다.  

MS-DOS 세계는 이러한 현상을 간과한 채, 나름의 영역에 만족했다. 초기의 마이크로컴퓨터 열성자들은 빠르게 DOS와 맥`Mac` 해커의 인기를 ‘네트워크 국가’ 문화의 그것보다 훨씬 크게 늘려 갔지만 자각하는 문화 자체는 이루지 못했다. 변화의 정도는 너무나 빨라서 50여 개의 서로 다른 기술 문화가 하루살이처럼 태어나고 사라져 갔다. 그들은 문화를 구성하는 은어, 전통, 신화적 이야기를 만드는 데 필요한 안정성을 획득하지 못했다. 즉, UUCP나 인터넷에 비교될 만한 주도적인 네트워크의 부재는 그 자체가 네트워크 국가가 되지 못하게 했다.

컴퓨서브나 지니와 같은 상용 온라인 서비스에 대한 폭넓은 접근이 뿌리내리려 했지만, 개발 도구가 포함되지 않은 비 유닉스 운영체제에서는 소스 코드가 거의 활용되지 못했다. 이 때문에 협력 해킹의 전통은 만들어지지 못했다.

폭넓게 유닉스 기술 문화로 구분 지을 수 있는 해커 문화의 주류는 상업 서비스에는 관심을 갖지 않았다. 인터넷을 중심으로 비조직적으로 활동했던 그들은 더 좋은 도구와 더 나은 인터넷을 원했는데, 저렴한 32비트 PC는 그 두 가지를 모든 사람에게 약속했다.

그러나 소프트웨어는 어디에 있는가? 상용 유닉스는 수천 달러[^1-11]의 가격을 형성했기 때문에 여전히 비쌌다. 1990년 초반에는 여러 회사가 PC 급 기계에 이식된 AT&T나 BSD 유닉스를 판매했다. 성공은 잘 모르겠지만, 가격은 크게 내려가지 않았고 (가장 나쁜 일은) 수정하고 재배포할 수 있는 운영체제의 소스를 얻을 수 없었다. 전통적인 소프트웨어 사업 모델은 해커들이 원하는 것을 주지 않았다.

[^1-11]: 역자주 1990년을 기준으로 할 때 수천 달러의 의미에 부합하는 최소 금액 2,000달러는 약 140만원이고, 이를 2013년 화폐가치로 환산하면 약 340만원이다.

자유 소프트웨어 재단도 마찬가지였다. RMS가 오래 전에 약속한 해커를 위한 유닉스 커널인 허드`HURD: Hird of Unix-Replacing Daemons`의 개발은 수년간 지체됐으며, (1990년까지 유닉스 유사 운영체제를 구성하는 다른 어려운 요소들을 거의 모두 제공하긴 했지만) 1996년까지도 사용 가능한 커널을 만드는 데 실패했다.

설상가상으로 사유 유닉스를 상업화하려는 10여 년간의 노력이 실패로 끝났다는 사실이 1990년대 초반에는 확실해지고 있었다. 유닉스 플랫폼 간의 호환성에 대한 약속은 대여섯 가지 상용 유닉스 사이의 논쟁 속에 잊혀졌다. 즉, 상용 유닉스 업체들의 답답하고, 맹목적이며, 부적절한 마케팅 때문에 놀랍도록 열등한 윈도우 운영체제 기술로도 시장의 많은 부분을 점유할 수 있게 됐다.

1993년 초, 적대적인 관측자들은 유닉스 이야기는 거의 끝났다고 생각할만한 근거를 갖게 됐고 해커 부족도 그럴 운명이었다. 컴퓨터 업계 언론에는 적대적인 관측자들이 항상 존재했는데, 이들 대부분은 1970년대 후반부터 6개월 간격으로 계속 유닉스의 죽음이 임박했음을 예측했다.

개인의 기술 영웅주의는 끝났으며, 소프트웨어 산업과 초기 인터넷은 점점 더 마이크로소프트와 같은 거인에 의해 지배된다는 것이 이 시대의 일반적인 믿음이었다. 유닉스 해커의 첫 세대는 늙고 지쳐 보였고, 버클리의 컴퓨터 시스템 연구회`CSRG: Computer Systems Research Group`은 1994년에 활력을 잃고 해체됐다.[^1-12] 침울한 시대였다.

[^1-12]: 역자주 버클리 유닉스와 CSRG에 대한 자세한 이야기는 『[오픈 소스 Vol. I, 한빛미디어, 2013년, ISBN: 9788968486456][link-opensource-vol1]』의 2장 「버클리 유닉스의 20년」에서 참고할 수 있다.

다행히 언론과 해커 대부분의 눈에도 띄지 않고 진행된 일이 있어서 1993년 후반과 1994년에 인정받을 만한 놀라운 제품을 만들어냈다. 결국, 이 일은 해커 문화를 아주 다른 방향으로 이끌고가 생각하지도 못한 성공을 거두게 된다.

## 초기의 공개 유닉스

허드의 실패가 남겨둔 틈새 사이로 리누스 토르발스`Linus Torvalds`라는 헬싱키 대학생이 들어왔다. 그는 1991년에 자유 소프트웨어 재단의 도구를 사용해 386 기계를 위한 공개 유닉스 커널을 개발하기 시작했다. 초기의 연속적인 성공은 많은 인터넷 해커를 끌어들여 리누스가 완전히 자유롭고 재배포 가능한 소스로 구성된, 제대로 된 유닉스인 리눅스를 개발하도록 도왔다.

리눅스에 경쟁자가 없었던 것은 아니다. 1991년 리누스 토르발스의 초기 실험과 동시에 윌리엄 졸리츠`William Jolitz`와 린 졸리츠`Lynne Jolitz`는 실험적으로 386에 BSD 유닉스 소스를 이식했다. BSD 기술과 리누스의 미숙한 초기 노력을 비교하던 관찰자 대부분은 BSD 포트`port`가 PC의 가장 중요한 공개 유닉스가 될 것으로 예측했다.

그러나 리눅스의 가장 중요한 특징은 기술적인 것이 아니라 사회적인 것이었다. 리눅스의 개발 이전에는 모두가 운영체제처럼 복잡한 소프트웨어는 비교적 작고 잘 구성된 모임에 의해 주의 깊게 조정되며 개발돼야 한다고 믿고 있었다. 이러한 개발 방식은 상용 소프트웨어와 1980년대에 자유 소프트웨어 재단이 만들어 낸 위대한 자유 소프트웨어 성당 모두의 전형적인 방식이었고 현재에도 여전히 일반적인 방식이다. 또한 졸리츠의 원래 386 BSD 포트에서 나온 FreeBSD/NetBSD/Open BSD 프로젝트에도 그랬다.

리눅스는 완전히 다른 방식으로 발전했다. 거의 처음부터 인터넷에 의해서만 조정되는 수많은 자원자에 의해 우연히 해킹됐다. 품질은 엄격한 표준이나 독재로 이루어지지 않았으며, 매주 릴리스되면 며칠 안에 수백 명의 사용자로부터 피드백을 받고, 개발자들이 지속해서 변화를 소개하는 다윈주의적 적자생존의 선택을 할 수 있게 하는 그런 단순한 전략에 의해 관리됐다.

1993년 후반 리눅스는 안정성과 신뢰성에서 많은 상용 유닉스와 경쟁할 수 있었으며 아주 많은 소프트웨어를 포함했다. 심지어 상용 애플리케이션 소프트웨어의 이식도 이끌어내기 시작했다. 리눅스 개발의 간접 효과는, 판매할 개발자와 해커가 없는 대부분의 조그만 상업 유닉스 업체들을 전멸시킨 것이었다. 소수의 생존자 중 하나인 버클리 시스템 디자인`BSDI: Berkeley Systems Design, Incorporated`은 자사의 BSD 기반 유닉스에 전체 소스를 함께 제공하는 방법으로 해커 사회와 가까운 관계 유지에 노력하며 성공했다.

이러한 개발 이야기는 당시의 해커 문화 안에서도 많이 회자되지 않았고, 밖에서는 전혀 이야기되지 않았다. 종말에 대한 반복적인 예측을 무시하던 해커 문화는 자신의 이미지대로 상용 소프트웨어 세계를 다시 만들어내려 했다. 그러나 이런 경향이 명백해지는 데는 5년 이상이 걸렸다.

## 웹의 폭발적인 성장

리눅스의 초기 성장은 또 다른 현상과 함께 동반 상승했다. 바로 일반인이 인터넷을 접하기 시작한 것이다. 1990년 초반, 한 달에 몇 달러로 일반인에게 인터넷 연결을 제공하는 인터넷 서비스 제공 산업이 번성하기 시작했다.[^1-13] 월드 와이드 웹`WWW: World Wide Web`의 발명 이후, 이미 발전 단계에 있던 인터넷은 위험천만할 정도로 발전에 가속이 붙었다.[^1-14]

[^1-13]: 역자주 <[역자주 11](/fn-1-11/)>과 연관해서 1994년의 1달러는 약 800원이다. 한국의 경우, 한국통신공사(현재의 KT)가 1994년 6월부터 시작한 코넷(KORNET: KORean NETwork) 상용 인터넷 서비스의 전화 모뎀 연결 월정액 이용 요금은 4만원이었다. 이는 2013년 화폐가치 약 7만 5천원에 해당한다.

[^1-14]: 역자주 한국의 인터넷 역사에 대해서는 <https://sites.google.com/site/koreainternethistory/publication/e-bridge>에서 자세한 내용을 참고할 수 있다.

CSRG가 공식적으로 해체된 해인 1994년에 (리눅스와 386 BSD의 후손인) 서로 다른 공개 유닉스들이 해킹 활동에 중추적인 역할을 했다. 리눅스는 CD-ROM에 담겨 상업적으로 배포돼 날개 돋친 듯 팔리고 있었다. 1995년 후반에 주요 컴퓨터 회사들은 자신의 소프트웨어와 하드웨어가 인터넷에 적합하다고 선전하는 그럴듯한 광고를 내기 시작했다!

1990년대 후반의 해커 문화의 주요 활동은 리눅스 개발과 인터넷의 주류화였다. WWW는 마침내 인터넷을 대중매체로 만들었다. 또한 1980년대와 1990년대 초반에 활동한 많은 해커가 대중에게 인터넷 접속 서비스를 판매하거나 제공하는 ISP`Internet Service Providers` 사업을 시작했다.

인터넷의 고속 성장은 해커 문화가 중추적 지위와 정치적 영향력을 발휘할 수 있는 계기를 마련해 주었다. 1994년과 1995년에 해커 행동주의는 정부의 통제 아래 강력한 암호화 기법을 갖게 하자는 클리퍼칩`Clipper` 발의를 좌절시켰다. 1996년에는 해커들이 엉뚱한 이름을 가진 통신품위법`CDA: Communications Decency Act`을 무효로 하기 위한 폭넓은 활동에 결집해 인터넷 검열을 저지했다.[^1-15]

[^1-15]: 역자주 <http://networker.jinbo.net/zine/view.php?board=networker_4&id=293> 참고.

이러한 활동 덕분에 우리는 역사를 지나 현재에 들어섰다. 또한 우리 모두가 관찰자가 아닌 행동가가 되는 시대가 시작되었다. 이 이야기는 이 책의 다른 글 「해커들의 반란」에서 계속될 것이다.

 모든 정부는 작든 크든 민중과 대립하는 존재의 조합이다. 덕이 없기로는 지배자나 피지배자나 다를 것이 없다. 정부의 힘은 자신과 동일한, 민중의 침착한 감정과 힘의 과시에 의한 정해진 범위 안에서만 유지될 수 있다.
 ─ 벤저민 프랭클린 바크`Benjamin Franklin Bache, 1769∼1798`, 1794년 필라델피아 오로라`Philadelphia Aurora`지의 사설에서

---

![](figures/sagrada-02.jpg "")

사그라다 파밀리아 성당, 2012년 모습[^1-16]

나는 건물에 생명력을 불어넣기를 원한다. 왜냐하면 너무 오래 견디는 건물은 살아 있다는 느낌을 주지 않기 때문이다. 그것들은 그저 튼튼하고 거대함만 추구했지, 시간적이라든지 연약함은 뒤로하고 있다. 살아있는 건축이란 감성과 경쾌함, 그리고 변화가 주어지지 않으면 안 된다. 그것은 마치 하나의 돌과 한 송이 꽃과의 차이이다.

— 시저 펠리`Cesar Pelli`, 『시간과 공간과 음악과 건축, 이대암, 대우출판사, 2001년, 81페이지』

[^1-16]: 역자주 Copyright 2012 Craig Sunter. 이 이미지는 크리에이티브 커먼스 <[저작자표시-일반 2.0 미국 이용 허락][link-sagrada-02]>에 따라 이용할 수 있다.

[link-sagrada-02]: http://commons.wikimedia.org/wiki/File:La_Sagrada_Familia_(7852724058).jpg
