# 4장 마법의 솥

송창훈 역[^4-1]

[^4-1]: 역자주 이 글의 원문은 <http://www.catb.org/~esr/writings/cathedral-bazaar/magic-cauldron/>에서 볼 수 있으며, 번역에 사용한 판본은 2002년 8월 2일에 개정된 3.0판이다. 한국어 번역문의 최종 개정일은 2013년 12월 21일이다.

## 요약

이 글은 발전하고 있는 오픈소스 현상의 경제적 토대를 분석한다. 먼저, 소프트웨어 가격 구조와 프로그램 개발 자금 조달에 대한 몇 가지 잘못된 속설을 논파한 뒤에 오픈소스 협력의 안정성에 대해 게임이론 분석을 전개해 본다. 또한 오픈소스 개발 자금을 지속적으로 마련할 수 있는 9개 사업 모델을 제시하는데, 2개는 비영리 모델이고 7개는 영리 모델이다. 이어서 언제 소스를 비공개로 폐쇄하는 것이 경제적으로 합리적인가에 대한 현실적인 이론을 살펴본 뒤에 비영리 오픈소스 개발에 자금을 지원하기 위해 자유 시장이 만들고 있는 (작업 시장과 후원 제도의 재발명을 포함한) 몇 가지 새로운 방식에 대해 알아본다. 마지막으로 미래에 대한 몇 가지 조심스러운 예측을 해본다.

## 마법과 구별할 수 없는

웨일스 신화의 여신 케리드웬`Ceridwen`은 자기만 아는 마법 주문으로 영양식을 만들수 있는 커다란 솥을 갖고 있었다. 현대 과학에서는 벅민스터 풀러`Buckminster Fuller`가 초기 디자인에 투입되던 물리 자원이 점점 더 정보 콘텐츠로 대체되면서, 기술은 보다 효율적이고 저렴해진다는 ‘단명화`ephemeralization`’의 개념을 제시했다.[^4-2] 아서 클라크`Arthur Clarke`는 “충분히 진보한 기술은 그 어떤 것도 마법과 구별되지 않는다”고 말함으로써 이 두 가지를 결부시켰다.[^4-3]

[^4-2]: 역자주 벅민스터 풀러(Buckminster Fuller, 1895∼1983). 미국의 건축가로 최소 자원으로 최대 효과를 얻으려는 혁명적 기술 디자인으로 특히 유명하다. 지오데식 돔(geodesic dome, 측지 돔, 다각형의 집합으로 구를 구현한 것)과 다이맥시온 하우스(dymaxion: dynamic maximum tension, 대량 생산 주택) 등의 상상력과 효율성이 돋보이는 설계를 남겼다. 벅민스터 풀러에 의해 조명된 단어인 단명화(ephemerlization)는 기술이 발달하면 ‘점진적으로 보다 적은 노력으로 보다 많은 결과를 얻을 수 있다’는 뜻을 함축한 용어다.

[^4-3]: 역자주 아서 클라크(Arthur C. Clarke, 1917∼2008). 항공 통신 기술자이자 SF 소설 작가다. 특히 1964년부터 그의 소설을 바탕으로 스탠리 큐브릭(Stanley Kubric, 1928∼1999) 감독과 함께 작업한 ‘2001년 스페이스 오디세이(2001: A Space Odyssey)’는 20세기 영화사의 가장 뛰어난 걸작 중 하나로 평가되고 있다. 이 작품은 ‘자라투스트라는 이렇게 말했다’와 요한 슈트라우스의 왈츠 등을 배경 음악으로 사용해 음악이 영화를 형상화하는 주된 역할을 할 수 있다는 사실을 선도하기도 했다. 스탠리 큐브릭이 사망한 1999년에는 「스탠리 큐브릭은 2001년을 기다리지 않았다」는 제목의 헌정 기사가 발표되기도 했다.

오픈소스 공동체의 성공은 많은 사람에게 믿기 힘든 마법처럼 보일 것이다. 고품질의 소프트웨어가 계속 무료로 생겨난다면 좋겠지만, 경쟁과 희소 자원의 현실 세계에서 그것이 지속 가능하리라 보기는 힘들다. 숨겨진 문제점은 무엇일까? 케리드웬의 솥은 단지 속임수에 불과한 걸까? 그렇지 않다면 단명화는 여기에 어떻게 작용하고 있을까? 여신은 어떤 주문을 외운 것일까?

## 증여하는 기크[^4-4]를 넘어

[^4-4]: 역자주 해커 공동체에서는 사회적인 접촉을 멀리하고 오직 하나의 일, 특히 컴퓨터와 기술 분야의 일에 자신의 모든 역량을 집중하는 사람을 너드(nerd)라는 말로 표현한다. 너드와 유사하지만 BBS나 인터넷 등을 통해 사회 활동을 활발히 하는 사람은 흔히 기크(geek)라고 한다. 너드와 기크는 모두 바보, 괴짜, 멍청이, 숙맥, 샌님 등의 사전적 의미가 있으며 시트콤 ‘빅 뱅 이론’과 ‘IT 크라우드’ 등에서 부정적인 특징이 단적으로 부각되기도 하지만 해커 문화에서 사용하는 의미는 조금 다르다.

오픈소스 문화의 경험은 그 바깥에서 소프트웨어 개발을 학습한 사람들의 많은 가설을 분명 당혹스럽게 만들고 있다. 「[성당과 시장](http://korea.gnu.org/people/chsong/cb/cathedral-bazaar/)」에서 나는 분산화된 협력적 소프트웨어 개발 방식이 브룩스의 법칙`Brook’s Law`[^4-5]을 효과적으로 뒤집고 개인 프로젝트의 품질과 안정성을 전례 없이 높은 수준으로 이끌고 있음을 설명했다. 또한 「[얼누리의 개간](http://korea.gnu.org/people/chsong/cb/homesteading/)」에서 ‘시장’ 형태의 개발 모델이 놓인 사회 역학을 검토하고 기존의 교환 경제 용어가 아닌 구성원들이 지위를 획득하기 위해 물건을 무료로 주는 것으로 경쟁하는, 즉 인류학자들이 말하는 증여문화에서 시장 모델을 가장 효과적으로 이해할 수 있음을 설명했다. 이제 「[마법의 솥](http://korea.gnu.org/people/chsong/cb/magic-cauldron/)」에서는 소프트웨어 생산 경제의 몇 가지 흔한 신화를 깨뜨리는 것부터 시작해서 경제학과 게임이론[^4-6] 그리고 사업 모델의 영역 안으로 이전 글들의 분석을 끌어들여 오픈소스 개발자들의 증여문화가 교환 경제 안에서 자체적으로 존속할 수 있는 방법을 이해하는 데 필요한 새로운 개념적 수단을 제시하려고 한다.

[^4-5]: 역자주 프레더릭 브룩스(Frederick P. Brooks Jr., 1931∼). IBM 360 시스템의 설계와 소프트웨어 공학 분야의 공로를 인정받아 컴퓨터 분야의 최고 영예 중 하나인 튜링상을 1999년에 수상했다. 1975년에 출판된 『Mythical Man-Month: Essays on Software Engineering, Anniversary Edition, AddisonWesley, 1995, ISBN: 9780201835953』는 소프트웨어 공학론에 대한 의미 깊은 고전으로 1995년에 20주년 기념판이 출판되었다. 한국에는 『맨먼스 미신, 프레더릭 브룩스, 김성수 옮김, 케이앤피북스, 2007년, ISBN: 9788995982204』로 번역·출판되었다. 이 책의 영문 초판은 <http://archive.org/details/mythicalmanmonth00fred>에서 전체 내용을 참고할 수 있다. 책의 제목으로 사용된 man-month(맨먼스, 인월, 人月)는 한 사람이 1개월 동안 할 수 있는 작업량을 지칭하는 말이다. 따라서 A라는 프로젝트를 완성하는데 4명의 프로그래머가 6개월 동안 작업했다면 A 프로젝트에는 24맨먼스가 투입됐다고 할 수 있다. 이 책에 제시된 브룩스의 법칙(Brook’s Law)은 ‘일정이 늦어진 소프트웨어 프로젝트에 인력을 추가하는 것은 일정을 더욱 늦추는 결과를 낳을 뿐이다(48페이지)’로 요약된다. 에릭 레이먼드는 「성당과 시장」에서 브룩스의 법칙에 반대되는 오픈소스의 개발 형태를 리누스의 법칙(Linus’s Law)이란 이름으로 분석했다.

[^4-6]: 역자주 소수의 기업이 시장을 장악한 상태에서는 마치 화투나 포커 게임처럼 자신의 판단과 행동뿐 아니라 상대방의 행동으로도 상황이 바뀔 수 있다. 따라서 자신의 의도대로 시장을 이끌며 상황을 유리하게 만들려면 정황을 정확히 예측하고 분석할 수 있는 전략이 필요하다. 이렇게 이윤을 극대화하기 위해 상대방의 행동을 예측하고 자신이 취할 방향을 수립하는 경제수학적 방법론을 게임이론(game theory)이라고 부른다.


논점을 분산시키지 않고 이러한 방향의 분석을 계속하려면 이제 ‘증여문화’ 수준의 설명을 (최소한 일시적으로 배제하거나) 포기하는데 동의할 필요가 있다. 「얼누리의 개간」은 생존에 필요한 재화가 풍족해서 교환경제가 별다른 중요성을 갖지 못한 상황에서 나타날 수 있는 증여문화를 분석한 것이었다. 이러한 분석은 행동 양식을 심리학적으로 설명하는 데는 충분한 것으로 보이지만, 오픈소스 개발자가 실제로 살고 있는 혼합 경제의 맥락에서는 충분한 설명이 되지 못한다. 또한 교환경제는 대부분 매력적이지 않을 수도 있지만 현실을 구속한다. 따라서 증여문화가 존속되려면 오픈소스 개발자의 행동이 희소 경제의 관점을 충족시켜야만 한다.

이제 우리는 (전적으로 희소 경제의 관점에서) 오픈소스 개발을 지탱할 수 있는 협력과 교환 방법들을 살펴볼 것이다. 이러한 고찰 속에서 ‘그런 방법으로 어떻게 돈을 벌 수 있는가?’와 같은 실용적인 질문을 던지게 될 것이고 그에 맞는 구체적인 예로 답하게 될 것이다. 하지만 그러기에 앞서 이러한 질문의 배경에 존재하는 미심쩍은 생각의 대부분은, 현재의 우세적인 소프트웨어 생산 경제 모델에서 연유한 잘못된 믿음이 마치 진실처럼 오인되는 것임을 살펴보기로 하자.

(본론으로 들어가기 전에 마지막으로 하나만 더 덧붙이면, 이 글이 오픈소스 개발 방식을 검토하고 이를 지지하는 입장을 취하고는 있지만, 이러한 입장이 폐쇄소스`closed source`[^4-7] 개발 방법이 본질적으로 잘못되었다든가 소프트웨어 지식재산권`intellectual property rights`을 반대함을 의미하지는 않는다. 또한 소프트웨어를 공유하자는 이타주의적 호소도 아니다. 물론 이러한 주장들은 오픈소스 공동체에서 여전히 소리를 높이고 있는 소수[^4-8]가 지지하는 것이지만, 「성당과 시장」 이후의 경험은 그렇지 않다는 것을 명확히 알려주었다. 이 글에서 다루는 오픈소스 개발에 대한 모든 논의는 더 나은 품질과 높은 안정성, 저렴한 가격, 폭넓은 선택 같은 소프트웨어 공학과 경제적 성과에 근거한다.)

[^4-7]: 역자주 이 글에서 사용한 소프트웨어 저작권 관련 용어는 다음과 같다.
오픈소스 소프트웨어(open source software)
폐쇄소스 소프트웨어(closed source software)
자유 소프트웨어(free software)
비자유 소프트웨어(nonfree software)
공중영역 소프트웨어(public domain)
사유 소프트웨어(proprietary software)
이용허락(license)
지식재산권(intellectual property right)
비밀 코드(secret code, secret bits)
‘비밀 코드’로 옮긴 ‘secret code’ 와 ‘secret bits’는 공개되지 않아 기밀이 유지되는 코드를 말한다. 프로그램이 소프트웨어보다 작은 개념인 것처럼 이 글에서 비밀 코드는 폐쇄소스 소프트웨어의 일부분으로 이해하면 된다. 또한 오픈소스 소프트웨어와 폐쇄소스 소프트웨어는 각각 오픈소스와 폐쇄소스로, 소스 코드는 소스로 줄여 사용하기도 한다.

[^4-8]: 역자주 소리를 높이고 있는 소수란 리처드 스톨먼(Richard Stallman)을 중심으로 한 자유 소프트웨어 재단(FSF: Free Software Foundation)과 그 지지자들을 말한다. 지금의 인터넷 해커 공동체는 리눅스의 대중적 성공을 기점으로 1990년대 후반부터 크게 둘로 나뉜 경향이 있다. 하나는 FSF를 중심으로 한 순수 해커 공동체고, 다른 하나는 오픈소스를 중심으로 한 실용주의 해커 공동체다. 에릭 레이먼드가 참여하는 오픈소스 진영의 실용주의적 성격은 이 글의 중반부에서 논의되는 ‘공개할 때와 폐쇄할 때’ 등에서 보이는 접근 태도를 통해 단적으로 알 수 있다. 순수 해커 공동체의 관점에서는 소스 코드를 폐쇄하는 행위 자체를 해악으로 간주한다.

## 제조업 착각

다른 모든 종류의 도구나 자본재와 마찬가지로 컴퓨터 프로그램에는 사용가치와 판매가치라는 두 가지 별개의 경제적 가치가 있음을 먼저 인식할 필요가 있다.

프로그램의 사용가치는 프로그램이 가진 도구와 생산성 승수로서의 경제적 가치이고, 판매가치란 판매할 수 있는 상품으로서의 가치다. (경제학 용어로 말하면 판매가치는 최종재로서의 가치고 사용가치는 중간재로서의 가치다.)

소프트웨어 생산 경제를 추론하려고 할 때, 대부분의 사람은 다음과 같은 기본 전제 위에 세워진 ‘공장 모델’을 추정하는 경향이 있다.

* 대부분의 개발자 시간에 대한 보수는 판매가치에 의해 지불된다.

* 소프트웨어의 판매가치는 개발 비용 (즉, 소프트웨어를 기능적으로 복제하는 데 필요한 자원의 비용) 및 그 사용가치에 비례한다.

바꿔 말하면, 사람들은 소프트웨어도 공산품이 가진 전형적인 가치 특성을 그대로 따른다고 강하게 생각하는 경향이 있다. 그러나 위 두 가지 추정은 모두 명백히 잘못된 것이다.

첫째, 판매를 위해 작성된 코드는 전체 프로그래밍 작업 중에서 극히 일부에 지나지 않는다. 마이크로 컴퓨터 이전 시대에는 전 세계 모든 코드의 90%가 은행과 보험 회사 내부에서 작성되는 것이 보통이었다. 지금은 다른 산업도 소프트웨어 집약적이 되었기 때문에 금융 산업이 차지하는 점유율이 낮아졌을 것이 틀림없다. 그러나 대략 95%에 달하는 코드가 아직 사내에서 작성된다는 경험적인 증거를 간략히 살펴보기로 하자.

사내 코드에는 모든 중·대형 기업이 요구하는 경영정보시스템`MIS: Management Information Systems`의 대부분을 차지하는 재무와 데이터베이스 소프트웨어의 맞춤변경`customization`이 포함되며 장치 드라이버와 같은 기술 전문 코드도 포함된다. 장치 드라이버를 팔아 돈을 벌기는 매우 어려운데, 이에 대해서는 나중에 살펴보기로 한다. 또한 공작기계와 제트 여객기에서 자동차와 전자레인지, 토스터에 이르기까지 갈수록 더 마이크로칩으로 제어되는 기계들이 사용하는 모든 종류의 임베디드 코드도 여기에 포함된다.

사내 코드의 대부분은 코드를 재사용하거나 복제하기 매우 힘든 방식으로 사내 환경에 통합되어 있다. (이는 해당 환경이 사무용 업무 절차이든 농산물 수확기 콤바인의 연료 분사 시스템이든 다르지 않다.) 따라서 환경이 바뀌면 소프트웨어를 그에 맞게 유지하는 작업이 지속적으로 필요하다.

이를 유지보수`maintenance`라고 부르며, 어떤 소프트웨어 공학자나 시스템 분석가도 프로그래머가 임금을 받을 수 있는 업무의 거의 대부분(75% 이상)은 이러한 종류의 작업이라고 말할 것이다. 따라서 프로그래머가 쏟는 대부분의 시간은 판매가치가 전혀 없는 사내 코드를 작성하거나 유지보수하는 데 쓰이며 급여의 대부분도 이러한 일의 대가로 지급되는 것이다. 어느 신문의 구인광고란에서도 프로그래밍 일자리를 살펴보면 이 사실을 쉽게 확인할 수 있다.

지역 신문의 구인란을 살펴보는 것은 피부에 와 닿을 실험이기 때문에 여러분이 직접 해 볼 것을 권하고 싶다. 즉, 프로그래밍과 데이터 처리 그리고 소프트웨어 공학 부문의 구인 목록에서 소프트웨어 개발과 관련된 일자리를 찾아본 뒤에 사용과 판매 중 어느 것을 위해 소프트웨어를 개발하는 일인지에 따라 분류해보는 것이다.

‘판매를 위한 것’의 범위를 폭넓게 정의하더라도 20개 중 적어도 19개는 전적으로 사용가치에 의해 보수를 받는 일일 것이다. (즉 중간재로서의 가치에 의한 것이다.) 이것이 바로 소프트웨어 산업의 단지 5%만이 판매가치에 의해 움직이는 부분이라고 믿는 이유다. 그러나 이 글은 이 수치에 비교적 민감하지 않다는 점에 주목해야 한다. 이 수치가 15%이거나 심지어 20%가 된다고 해도 경제적 결과는 본질적으로 동일하다.

나는 기술 콘퍼런스에서 청중 가운데 소프트웨어를 만드는 일로 임금을 받는 사람이 몇 명이냐는 것과 그들 중 소프트웨어의 판매가치에 의해 임금을 받는 사람은 몇 명인가라는 두 가지 질문을 던지며 보통 강연을 시작한다. 일반적으로 첫 번째 질문에 손을 드는 사람은 아주 많은 반면 두 번째 질문에 손을 드는 사람은 드물거나 아예 없다. 그리고 상당수 청중이 이러한 비율에 놀라워한다.

둘째, 소프트웨어의 판매가치가 소프트웨어 개발이나 대체 비용과 연결되어 있다는 이론은 소비자의 실제 행동을 살펴보면 쉽게 깨뜨릴 수 있다. 식료품과 자동차, 공작기계와 같이 (감가상각 전까지는) 개발 비용과 대체 비용 두 가지가 판매가치와 실제로 연관되는 상품이 많이 있다. 심지어 판매가치가 개발 및 대체 비용에 밀접하게 연관된 무형의 상품도 많다. 음악이나 지도, 데이터베이스 등의 복제권이 한 예다. 이러한 제품은 원래의 공급자가 사라진 뒤에도 판매가치가 지속되거나 오히려 더 높아질 수 있다.

이와 대조적으로 (제품이 단순히 단종되거나) 소프트웨어 공급자가 사업을 그만두었을 때 고객이 지불해야 하는 최고 가격은 해당 제품의 이론적인 사용가치나 기능적으로 동등한 제품의 개발 비용과 무관하게 급격히 떨어져 거의 0에 가깝게 된다. (가까운 소프트웨어 판매점의 재고 처분 특매 코너[^4-9]를 살펴보면 이러한 단정을 확인할 수 있다.)

[^4-9]: 역자주 재고 처분 특매 코너로 번역한 remainder bins는 상점 한편에 마련된 땡처리 코너를 말한다. (Copyright 2013 이제명 <crinje@gmail.com>. 이 이미지는 크리에이티브 커먼즈 저작자표시-동일조건변경허락 3.0 대한민국 이용허락에 따라 이용할 수 있다.)


공급자가 사업을 그만뒀을 때 소매업자들의 행동은 매우 흥미로운 사실을 보여준다. 이는 공급자가 모르는 무언가를 소매업자들이 안다는 뜻이다. 즉, 소비자가 제품에 지불하는 가격은 공급자 서비스의 미래 기대 가치에 맞춰 실질적으로 상한이 정해진다는 것이다. (여기서 말하는 서비스에는 일반적으로 제품 향상이나 판올림`upgrade`, 후속 프로젝트 등이 포함된다.)

다시 말하면, 소프트웨어 산업은 대부분 제조업이라는 끈질기고 근거 없는 착각 아래 운영되고 있는 서비스 산업인 것이다.

왜 우리가 이렇게 다르게 믿는 경향이 있는지 살펴보는 것은 가치 있는 일인데, 그것은 판매를 위해 소프트웨어를 만드는 소프트웨어 산업의 작은 일부가 상품을 광고하는 유일한 곳이기 때문일 것이다. 제조업은 무게를 측정할 수 있고 또한 갖고 일할 수 있는 물건을 만들기 때문에 일반적인 심리 성향으로는 제조업을 서비스업에 비해 ‘실재’처럼 여기게 된다.[^4-10] 또한 (일반적이 아닌 예외적인 경우지만) 가장 눈에 띄게 중점적으로 광고되는 제품은 지속적인 서비스 요구가 거의 없는 매우 짧은 수명을 갖는 게임이다.[^4-11]

[^4-10]: 원주 웨인 그램리치(Wayne Gramlich, wayne@gramlich. net)는 공장 모델이 지속되는 부분적인 이유는 사람보다 기계와 건물이 더 중요했을 시기에 만들어진 구식 기업회계규정 때문이라고 말한다. 소프트웨어 회사의 회계장부에서 컴퓨터, 사무용 가구, 건물 등은 자산으로 처리되지만 프로그래머는 비용으로 처리된다. 물론 실제로는 프로그래머가 진정한 자산이고 컴퓨터와 사무기기, 건물은 그리 중요한 것이 아니다. 이런 반대된 가치 평가는 기업의 가치를 금액으로 수치화하는 복잡성을 줄이기 위해 획일적이고 고정된 회계규정을 원하는 미국 국세청(IRS: Internal Revenue Service)과 주식시장의 압력 때문에 유지되고 있다. 그 결과로 회계규정은 현실을 반영하지 못하게 되었다. 이러한 관점에서는, 미래 서비스 가치와 무관하게 소프트웨어에 높은 가격을 매기는 것이 부분적으로 방어기재의 한 형태가 된다. 즉, 표준회계규정 때문에 그렇게 하는 것이 아닌 척 하는 모든 이해 당사자들과 같은 편에 서는 것이다. 그램리치는 또한 이러한 회계규정이 많은 소프트웨어 회사가 기업공개(IPO: Initial Public Offering) 후에 곧 없어져 버리는 이상하고 흔히 자기파괴적이 되어 버리는 기업 인수합병 한탕주의를 뒷받침한다고 지적한다. “소프트웨어 회사는 흔히 자금을 확충하려고 주식을 추가 발행하지만 이렇게 마련한 돈은 얼마가 되었든 프로그래밍 직원을 보강하는 데 사용할 수 없다. 왜냐하면 회계규정은 이를 비용 증가로 보기 때문이다. 최근의 소프트웨어 공개회사들은 다른 소프트웨어 회사를 인수함으로써 규모를 확장하는데, 이것은 회계규정이 인수를 출자로 보기 때문이다.”

소프트웨어 산업이 제조업이라는 착각 때문에 실제 개발 비용과 병적으로 괴리되는 가격 구조가 만들어지는 점도 살펴볼 가치가 있다. 만약 (일반적으로 받아들여지는 것처럼) 전형적인 소프트웨어 프로젝트 수명주기 비용 중 75% 이상이 디버깅과 유지보수, 제품 확장에 사용된다면 고가의 정찰제를 채택하고 사후 지원 서비스를 비교적 낮은 요금이나 무료로 제공하는 현재의 일반적인 가격 정책은 결국 모든 당사자에게 해가 될 수밖에 없다.

[^4-11]: 원주 오픈소스 방식의 게임 소프트웨어 개발 방법을 설명한 추천할 만한 분석서로 숀 하그리브스(Shawn Hargreaves)의 글이 있다.


소프트웨어가 서비스 산업임에도 공장 모델을 따르게 되면, 공장 모델의 유인정책들은 만족할 만한 서비스를 제공하는 것과 모두 반대로 작용하기 때문에 소비자에게 손해를 끼치게 된다. 만약 공급자의 수입이 소프트웨어 판매로 얻어진다면, 대부분의 노력은 소프트웨어를 만들어 출하하는 데 집중될 것이다. 또한 고객 센터는 수익이 발생하는 곳이 아니기 때문에 가장 무능한 직원이 배치되고 고객의 숫자가 심각한 정도로 떨어져 나가지 않을 정도로만 자원을 가지는 곳이 될 것이다.

상황은 더 나빠진다. 제품의 실제 사용은 곧 고객의 문의 전화로 이어지는데, 이는 별도의 서비스 요금을 받지 않는 한 이익률을 줄인다. 오픈소스 세계에서는 고객 의견을 최대로 수렴하고 활발한 2차 시장을 얻기 위해 가능한 한 많은 수의 사용자 기반을 추구한다. 그러나 폐쇄소스에서는 가능한 한 많은 수의 구매자는 추구하지만 가능한 한 최소의 실제 사용자를 추구한다. 따라서 공장 모델의 상황에서는 판매를 위해 충분히 잘 마케팅 된 소프트웨어, 즉 구매하거나 설치는 하지만 실제로는 사용하지 않는 셸프웨어`shelfware`를 만든 공급자에게 대부분의 성과가 확실히 돌아간다.

동전의 양면처럼 이러한 공장 모델을 도입한 공급자 대부분은 결국 실패할 것을 알 수 있다. 고정된 정찰 가격으로 무기한 계속되는 사후 지원 비용을 조달하는 것은, 어제 판매한 제품의 사후 지원과 제품 수명주기 비용을 내일의 매출로 충분히 감당할 수 있을 정도로 빠르게 성장하는 시장에서만 가능한 일이다. 일단 시장이 성장한 뒤에 판매가 감소하면 공급자 대부분은 제품을 버리는 방법으로 지원 비용을 줄일 수밖에 없다.[^4-12]

[^4-12]: 원주 (회계사들을 위한 주석) 불변 가격이 아닌 할인된 현재 가치로 생각한다고 해도, 미래 판매 매출은 미래 서비스 비용과 함께 할인되기 때문에 결국 고정된 선행 가격으로는 서비스 비용을 감당하지 못하게 된다는 주장은 여전히 유효하다. 이러한 주장에 대한 다르진 않으면서 좀 더 정교한 반박은, 구매자가 소프트웨어의 사용을 그만둘 때 제품당 서비스 비용이 0이 된다는 것이다. 만약 사용자가 너무 많은 서비스 비용을 발생시키기 전에 사용을 멈춘다면 공장 모델로 사업을 계속할 승산이 여전히 있다. 이는 기본적으로 공장 모델의 가격 정책이 셸프웨어 공급자에게 유리하다는 주장의 또 다른 형태일 것이다. 좀 더 교훈적이 될 수 있는 경우는 소프트웨어의 예상 사용 기간 중에 판매 매출로 서비스 비용을 감당할 수 없는 상황이 발생했을 때다. 공장 모델은 이런 상황에서 품질을 떨어뜨린다.


제품을 버리는 것이 (제품을 단종시켜) 명시적으로 이루어지든, (지원을 받기 힘들게 만들어) 암묵적으로 이루어지든 이는 고객을 경쟁사로 보내는 결과를 낳는다. 왜냐하면 이것은 지원 서비스에 부수된 제품의 미래 기대 가치를 파괴하는 것이기 때문이다. 우선은 오류를 수정한 제품을 마치 신제품인 것처럼 새로운 가격으로 출시해 어려움을 모면할 수도 있겠지만 소비자는 이러한 행태에 바로 염증을 느낀다. 결국 이러한 상황을 벗어날 수 있는 유일한 방법은 어떠한 경쟁자도 갖지 않는 것이다. 즉 자신의 시장을 효과적으로 독점해 종국적으로 혼자만 남는 것이다.

실제로 지원 서비스 부족으로 인한 실패 때문에 강력한 2인자들이 자신의 시장에서 사라진 선례를 우리는 반복적으로 볼 수 있다. (이러한 유형은 PC 운영체제나 워드 프로세서, 회계 프로그램, 일반적인 기업용 소프트웨어의 역사를 조사해봤던 사람이라면 특히 쉽게 알 수 있다.) 공장 모델이 만든 반대된 유인정책들은 심지어 승자의 고객도 손해를 보게 되는 승자독식 시장 역학으로 이어진다.

공장 모델이 아니라면, 어떤 모델이어야 할까? 소프트웨어 수명주기의 실제 가격 구조를 (일상적인 관점과 경제학적인 관점 모두에서) ‘효율’적으로 만들려면 서비스 계약과 정보 구독, 그리고 고객과 공급자 사이의 지속적인 가치 교환에 근거한 가격 구조를 도입해야 한다. 전사적 자원관리 시스템`ERP: Enterprise Resource Planning`과 같은 가장 큰 기업 소프트웨어 제품의 가격 구조가 이미 그러한데, 이러한 소프트웨어는 개발 비용이 너무 커서 정찰 판매 가격으로는 서비스 비용 등을 감당할 수 없다. 반`Baan`과 피플소프트`PeopleSoft`와 같은 회사는 실제로 판매 후의 자문 요금으로 돈을 번다.[^4-13] 효율을 추구하는 자유 시장 환경에서는 이것이 성숙한 소프트웨어 산업이 종국적으로 따라야 할 가격 구조라고 예측할 수 있다.

[^4-13]: 역자주 1978년 얀 반(Jan Baan)이 설립한 ERP 공급업체 반은 경영 악화 때문에 순차적으로 인벤시스(Invensys, 2000년 5월 31일), SSA 글로벌 테크놀로지스(SSA Global Technologies, 2003년 6월 3일), 인포 글로벌 솔루션즈(Infor Global Solutions, 2006년 5월 15일)에 인수·합병되었다. 1987년에 설립된 피플소프트 또한 2004년 12월 13일 오라클(Oracle)로 인수·합병되었다.


지금까지의 설명은 지배적인 기존 질서에 대한 오픈소스 소프트웨어의 도전이 왜 기술적인 측면뿐 아니라 경제적인 측면에서도 점진적으로 커지고 있는가라는 질문에 몇 가지 통찰을 주기 시작한다. 소프트웨어를 ‘무료`free`’로 만든 결과, 폐쇄소스 소프트웨어가 가진 판매가치가 처음부터 얼마나 상대적으로 미약한 근거를 갖고있는지 드러나고 있으며, 우리는 서비스 요금이 지배하는 세계로 떠밀려 가고 있다.

이러한 변화가 처음부터 크게 일어나지는 않을 것이다. 많은 소비자는 (특히 게임이나 운영체제, 인기 있는 생산성 도구와 같은) 쉽게 구할 수 있는 패키지 소프트웨어의 해적판을 찾을 것이다. 따라서 많은 사유 소프트웨어`proprietary software`의 판매 가격은 소비자의 관점에서 보면 공급자의 지원 서비스나 종이 매뉴얼 또는 돈을 주고 정품을 샀다는 도덕적 느낌 등의 다른 상품적 요구에 대해서만 값을 지불할 가치가 있다. 소위 ‘자유`free`’ 소프트웨어라 불리는 상업 배포판은 흔히 이와 같은 방식으로 고객에게 가격을 정당화한다. 차이가 있다면 이러한 제품의 공급자는 사유 소프트웨어 공급자와 달리 소프트웨어가 그 자체만으로 고객에게 가치가 있다고 스스로를 속이지 않는다는 점이다.

‘무료`free`’라는 용어는 또 다른 종류의 오해를 불러 일으키기도 한다.[^4-14] 상품 가격의 인하는 상품을 지탱하는 인력과 인프라에 대한 총투자액을 줄이기보다 오히려 증가시키는 경향이 있다. 자동차의 가격이 인하되면 소비자의 수요가 많아지므로 결국 자동차를 유지보수할 정비사의 수요가 늘어난다. 판매가치로 보수를 받는 5%의 프로그래머가 오픈소스 세계에서 거의 고통 받지 않으리라는 이유는 이 때문이다. 오픈소스로의 이행 과정에서 손실을 입게 될 대상은 프로그래머가 아니라 경제적으로 성공할 수 없는 곳에서 폐쇄소스 전략에 돈을 건 투자자들이다.

[^4-14]: 역자주 영어 단어 free에는 자유(自由)와 무료(無料)라는 두 가지 의미가 모두 있기 때문에 free beer(공짜 맥주)나 free speech(언론의 자유)와 같이 일반적으로 확실히 구분되는 문장이 아니라면 혼동이 발생하기도 한다. free software의 경우, 이 용어가 널리 알려지기 전까지 이것이 무료로 제공되는 공짜 소프트웨어인지 아닌지 혼란이 있기도 했다. 이런 이유 때문에 상업적 가능성이 강화된 개념인 오픈소스라는 용어가 별도로 만들어졌다. 한국어에는 자유와 무료를 뜻하는 단어가 따로 존재하기 때문에 이 글은 문맥에 따라 자유와 무료 또는 공짜라는 단어를 선택적으로 사용한다.


##‘정보는 무료여야 한다’는 신화

‘공장 모델’ 착각과 비슷하면서도 반대되는 또 다른 신화가 있는데, 그것은 바로 ‘정보는 무료여야 한다’는 것이다. 이는 흔히 디지털 정보를 복제하는 한계비용은 0이기 때문에 균형가격 (또는 청산가격) 역시 0이 되어야 한다는 (또는 시장에 가득 찬 복제자들이 균형가격을 0으로 만들 것이라는) 주장으로 나타난다. 이 주장은 종종 사람들이 오픈소스 소프트웨어 경제를 생각하는 데 혼란을 준다.

어떤 종류의 정보는 정말 무료여야 할 필요가 있다. 보다 많은 사람이 접근할수록 가치가 높아진다는 (희소성 가치에 반대되는) 설득력 약한 관점에서 보면 기술 표준문서가 좋은 예다. 그러나 모든 정보가 무료여야 한다는 신화는, 이를테면 보물 지도나 스위스 은행 계좌번호 또는 서비스 요구에 필요한 컴퓨터 계정 비밀번호와 같이 경합성 재화에 대한 특권적 표시가 되는 정보의 가치를 생각하면 쉽게 깨어진다. 비록 요구된 정보를 0의 비용으로 복제할 수 있다고 해도 해당 정보를 통해 접근할 수 있는 객체를 0의 비용으로 복제할 수 있는 것은 아니다. 따라서 한계비용이 0인 정보에 의해서도 한계비용이 0이 아닌 객체가 생겨날 수 있다.

정보는 무료여야 한다는 신화를 살펴본 주된 이유는, 이것이 오픈소스의 경제적 효용성 논의와 관계가 거의 없다는 것을 분명히 하기 위해서다. 뒤에서 살펴보겠지만 이는 소프트웨어가 (한계비용이 0이 아닌) 공산품의 가치 구조를 실제로 갖는다는 가정 아래에서도 일반적으로 잘 성립한다. 따라서 이 글은 ‘소프트웨어가 무료여야 하는가 아닌가’라는 질문에 대해 더 이상 논하지 않는다.

## 역공유지

주류 모델을 회의적인 시각으로 분석해보았으므로 이제 ‘무엇이 오픈소스 협력을 지속 가능하게 만드는지’에 대한 냉철한 경제학적 설명을 할 수 있을지 살펴보자.

이 질문은 연결된 두 가지 수준의 검토를 하게 만든다. 첫 번째는 오픈소스 프로젝트에 기여하는 개인의 행동이고, 다른 하나는 리눅스`Linux`나 아파치`Apache`와 같은 오픈소스 프로젝트의 협력을 지속하게 만드는 경제적 요인이다.

먼저 우리의 이해를 방해하는 널리 퍼진 대중 모델을 다시 한번 뒤집어야 하는데, 협력적인 행동을 설명하려는 모든 시도 위에 검은 그림자를 드리우는 가렛 하딘`Garrert Hardin`의 ‘공유지의 비극’이 그것이다.[^4-15]

[^4-15]: 역자주 공유지의 비극 또는 공유자원의 비극(The Tragedy of the Commons)은 캘리포니아 대학교 샌타바버라 캠퍼스(UCSB, University of California, Santa Barbara)의 생물학과 교수 가렛 하딘(Garrert Hardin, 1915∼2003)이 과학저널 「사이언스」에서 제기한 문제다. 이것은 일반적인 현실 세계에서 흔히 볼 수 있는 현상으로 1999년에 개봉된 영화 ‘쉬리’를 예로 들 수 있다. 쉬리는 한국 영화의 역대 흥행 기록을 경신하면서 할리우드 스타일의 적용 가능성을 보여준 의미 깊은 작품이다. 그러나 스크린 쿼터(1999년 기준 연간 상영일수의 2/5 이상, 2013년 기준 1/5 이상)로 한국 영화의 전체 상영일수가 사실상 제한되는 현실을 고려하면, 쉬리의 압도적인 상영일수와 스크린 점유는 오히려 다른 한국 영화들이 극장에서 개봉될 기회를 얻지 못하는 상황을 만들었다. 이와 같이 경합 관계에 있는 대상들이 하나의 자원을 공유해야 하는 상황에서 공유지의 비극 문제가 나타난다.


하딘은 마을 농부들이 소에게 풀을 먹이는 초지가 공유지 안에 있다고 상상해보라 는 유명한 질문을 던진다. 소를 방목할수록 풀이 뽑혀 흙이 드러나지만 회복 속도는 더디다. 만약 지나친 방목을 막는 합의된 (그리고 강제되는) 방목권 할당 정책이 없다면, 공유지가 모두 진흙 천지로 바뀌기 전에 최대의 이익을 내려는 모든 당사자들의 욕심이 더 빨리 더 많은 소를 방목하게 만들 것이다.

대부분의 사람이 가진 협력적 행동에 대한 직관적 모델은 대체로 이와 비슷하다.  실제로 공유지의 비극은 과소비와 공급 부족이라는 연결된 두 개의 문제로부터 시작된다. 수요의 측면에서 보면 공유지 상황은 과소비 때문에 바닥치기 경쟁을 조장하는 데 경제학자들은 이를 ‘비순수 공공재 (또는 혼합 공공재) 문제’라고 말한다. 공급의 측면에서 보면 공유지는 무임승차 행위를 부추겨서 더 많은 목초지를 개발하는 데 투자하려는 개인의 동기를 줄이거나 없앤다.

공유지의 비극에서 예측되는 결과는 다음 3가지뿐이다. 첫째, 진흙 천지가 된다. 둘째, 강제력을 가진 사람이 마을을 대표해 (공산주의 해결 방법인) 할당 정책을 실행한다. 셋째, 마을 사람 각자가 초지를 지속 가능하게 지키고 관리할 수 있을 만큼씩 구획을 나눠 (재산권 해결 방법인) 공유지를 분할한다.

오픈소스 협력에 공유지 모델을 반사적으로 적용할 때, 사람들은 오픈소스 협력이 짧은 수명을 갖는 안정적이지 못한 것이 되리라 예상한다. 이런 예상에서는 공유지 비극의 2번째 결론처럼 인터넷 위의 프로그래머 시간에 할당 정책을 강제할 수 있는 확실한 방법은 없기 때문에 결국 소프트웨어의 많은 부분이 폐쇄소스가 되어 공동 영역으로 되돌아오는 작업량은 급격히 줄어드는 3번째 결론인 공유지 분할로 바로 이어진다.

그러나 실제 상황은 이와 반대라는 것이 경험적으로 볼 때 분명하다. 오픈소스 개발의 폭과 양에 대한 추세는 (주요 리눅스 정보 사이트) [메타랩](http://web.archive.org/web/19990117032750/http:/metalab.unc.edu/)`Metalab` 과 [소스포지](http://web.archive.org/web/20000126203923/http:/sourceforge.net/)`SourceForge`의 일간 자료 제출량이나 새로운 소프트웨어 출시 광고 전용 사이트 [프레시미트닷넷](http://web.archive.org/web/20010528035118/http:/freshmeat.net/)`freshmeat.net`의 일간 공고 수를 참고해 측정할 수 있는데, 두 경우 모두 꾸준히 그리고 급속히 수치가 증가하고 있다.[^4-16] 따라서 실제로 일어나고 있는 일 중에서 공유지의 비극 모델이 놓치고 있는 결정적인 무언가가 있는 것이 분명하다.

[^4-16]: 역자주 썬 마이크로시스템즈(Stanford University Network Microsystems)의 후원으로 세계 여러 대학이 1992년부터 운영한 공공 자료 보관 사이트들을 통칭 썬사이트(SunSITE)라고 부른다. 이 중에서 미국 노스캐롤라이나 대학교 채플힐 캠퍼스(UNC: University of North Carolina, Chapel Hill)가 운영한 sunsite.unc.edu는 1998년 12월 1일 metalab.unc.edu로 이름을 바꿨다. 그 후 공공 자료 보관소(archive)의 특성을 더욱 강화하면서 2000년 9월 6일 아이비블리오로 이름을 다시 바꾸며 현재까지 운영 중이다. 1997년부터 서비스를 시작한 프레시미트닷넷은 1999년 8월 10일 앤도버닷넷(Andover.Net)에 인수된 후 2000년 2월 3일에 다시 VA 리눅스 시스템즈(VA Linux Systems)에 인수되었다. 2011년 10월 29일에 프리코드로 이름을 바꾸면서 지금은 맥 OS X 등의 정보도 함께 제공하고 있다. 소스포지는 VA 리눅스 시스템즈가 1999년에 만든 오픈소스 개발 프로젝트 포털 사이트다. 1993년 창업자들의 이름을 따 설립된 VA 리서치(james Vera, larry Augustin Research)는 사업 목적에 따라 VA 리눅스 시스템즈(1999년 4월 28일), VA 소프트웨어(2001년 12월 6일), 소스포지(2007년 5월 24일), 긱넷(Geeknet, 2009년 11월 4일)으로 이름을 바꿨다. 프리코드와 소스포지는 2012년 9월 18일 다이스 홀딩스(Dice Holdings)가 인수해 지금도 서비스를 제공하고 있다.

확실한 해답의 일부는 소프트웨어는 사용해도 가치가 줄지 않는다는 데 있다.[^4-17] 실제로 오픈소스 소프트웨어의 폭넓은 사용은 사용자가 직접 만든 오류 수정 코드와 새로운 기능의 코드 패치 유입으로 소프트웨어의 가치를 더욱 높이는 경향이 있다. 이러한 역공유지`inverse commons, 逆共有地`[^4-18]에서 풀은 뜯겨질 때 더욱 크게 자란다.

[^4-17]: 역자주 이러한 특성을 반영해서 소프트웨어를 포함한 디지털 정보 재화를 ‘정보재’라는 용어로 구분한다.

[^4-18]: 역자주 역공유지 외에 반공유지라는 용어와 개념이 있다. 『인터넷 그 길을 묻다, 한국정보법학회, 중앙북스, 2012년, ISBN: 9788927803737』의 내용을 인용하면 다음과 같다. 「최근 저작물의 자유로운 공유를 ‘공유지의 비극(tragedy of commons)’과 ‘반(反)공유지의 비극(tragedy of anti-commons)’의 이론으로 설명하고 있다. 공유지란 주민이면 누구나 출입하고 이용할 수 있었던 토지를 말한다. 공유지를 이용하는 합리적인 주민은 공유지 전체의 최선이용에는 무관심하고 개인별 이익 극대화를 추구하기 때문에 결국 공유지 전체가 못쓰게 되고 주민은 공멸한다는 것이 공유지의 비극이다. 즉 공유지가 존재할 경우 개별 경제주체들은 이를 보존할 어떠한 동기도 가지고 있지 않기 때문에 이 자원을 과도하게 사용하게 된다는 것이다. P2P를 통한 자유로운 저작물의 공유로 인한 부작용은 공유지의 비극에 해당하는 것으로 볼 수 있다. 한편 ‘반(反)공유지의 비극’이라 함은 재산권이 파편화될 때 자원이 제대로 활용되지 않는 문제를 말한다. 공유지의 비극은 너무 많은 사람이 희소한 자원의 사용권을 가지고 있을 때 발생하는 반면, 반공유지의 비극은 너무 많은 사람이 희소한 자원의 사용에서 배제되고 있을 때 발생한다. 반공유지의 비극은 친 특허정책에서 나타난 바 있다. 미국 산업의 경쟁력을 회복하기 위해 1980년대 들어 Bayh-Dole(베이돌) 법안으로 대표되는 지적재산권 제도가 강화됨에 따라 기존의 개방과학의 규범은 대학에서 점차 사라지고 과학공화국의 영역이 점차 축소되는 지식활동의 사유화가 진전되기 시작했다. 미국 정부와 의회는 정부재원으로 이루어진 연구 결과의 사업화가 미진한 이유를 ‘소유권 미설정에 따른 공유지 문제’로 인식해 ‘공유지의 비극’을 시정하기 위해 특허권 강화를 목표로 하는 Bayh-Dole 법안을 통과시켰다. 그러나 지적재산권의 강화 정책은 예상과 달리 새로운 지식을 생산하는 데 거래비용과 생산비용을 증가시키는 '반공유지의 비극’을 낳게 되었다. 과거에는 누구나 자유롭게 접근가능하고 사용 가능했던 기초연구 결과들이 Bayh-Dole 법안 통과 이후 지적재산권에 의해 보호받게 되었다. 기초연구 결과에 대한 사유화는 위험성이 높은 연구 프로젝트에 참여할 동기를 유발하기도 하지만 이러한 사유화로 인해 수많은 사람들이 자신의 발견에 대해 배타적 권한을 소유하게 된다면 미래 연구에 대한 방해물로 작용하게 될 것이다. 하나의 신제품을 개발하기 위해서는 특허에 의해 보호받는 다양한 투입물을 필요로 하는데 이에 대해 모두 일일이 사용허락을 받아야 한다면 거래비용(조정비용 및 소송비용 등)이 증가할 뿐만 아니라 기존에는 지불하지 않아도 되었던 부분(특히 연구도구)에 대한 추가 지급으로 생산 비용도 증가하게 된다. 즉 이러한 특허권의 강화, 특히 기초연구 결과에 대한 특허권 강화는 새로운 지식생산에 필요한 비용을 상승시켜 신제품 출시를 가로막거나 이들 기초연구 결과에 대한 과소 사용을 가져오는 '반공유지의 비극'을 야기한다.(‘정보의 공유 및 자유이용 운동’, 김병일, 490페이지)」

과소비가 있어도 저하되지 않는 이러한 공공재의 특성은 하딘의 비극, 즉 비순수 공공재 문제를 절반은 해결한다. 그러나 이것이 오픈소스에서 왜 공급 부족이 일어나지 않는가를 설명할 수 있는 것은 아니다. 오픈소스 공동체가 어디에나 존재한다는 것을 아는 사람들이 왜 무임승차자의 행동을 하지 않을까? 왜 자신이 필요한 일을 다른 사람이 해주기를 기다리지 않을까? 만약 자신이 필요한 일을 스스로 했다면, 결과물을 공유지로 돌려 보내는 성가신 기여를 왜 마다하지 않을까?[^4-19]

[^4-19]: 역자주 오픈소스에서 공급 부족이 일어나지 않는 본문에 언급되지 않은 이유 중 하나로 신호 이론이 있다. 『오픈소스 소프트웨어의 경제학, 김정호, 이완재 함께 씀, 자유기업원, 2004년, ISBN: 9788984291003』의 내용을 인용하면 다음과 같다. 「러너(Lerner)와 티롤(Tirole)에 의하면, 오픈소스 소프트웨어의 개발에 있어 훌륭한 업적을 올린 사람들에게 당장은 금전적 보장이 주어지지 않지만, 시간이 가면서 좋은 직장을 구할 수 있는 확률이 높아지는 등의 이익이 있다고 한다. 그러나 ‘그런 목적이라면 왜 같은 노력을 사유 소프트웨어의 개발에 쏟아 붓지 않는가?’라는 의문이 제기될 수 있다. 사유 소프트웨어 개발에 성공하면 금전적 이익도 생기고 취업 기회 역시 늘어날 수 있기 때문이다. 그럼에도 불구하고 사용자들이 오픈소스 개발에 참가하는 이유를 이해하려면 신호 이론(Signaling Theory)을 이해해야 한다. 자신에게 뛰어난 능력이 있음을 증명하기 위해서, 비록 그 자체로서는 이익이 되지 못함에도 불구하고 능력 없는 사람은 할 수 없는 일을 하게 된다는 이론이 신호 이론이다. (중략) 그렇다면 상업용 소프트웨어 기업에서도 어떤 개발자가 어떤 부분을 개발했는지를 공표함으로써 개발자들의 시그널링 인센티브를 이용하여 개발 노력을 더욱 고취시킬 수 있을 것이다. 그러나 현실적으로 대다수의 사유 소프트웨어 개발 업체들이 개발자의 이름을 공개하지 않는 것은 유능한 사람이라고 알려질 경우 경쟁업체에 의해 쉽게 스카우트 당할 가능성이 높아지기 때문이라고 한다. 따라서 프로그래머들에게 있어 오픈소스 개발에의 참여는 자신의 능력을 동종 업계에 보여줄 좋은 기회인 셈이다.(30페이지)」

해답의 일부는 사람들은 단지 해결책이 필요한 것이 아니라 필요한 바로 그 때에 해결책이 필요하다는 점이다. 필요한 일의 일부를 다른 사람이 언제 완성할지 예측하는 것은 좀처럼 가능한 일이 아니다. 만약 오류 수정이나 새로운 기능을 추가하는 것으로 받게 될 대가가 잠재적인 어떤 기여자에게도 충분한 정도라면 누구라도(오류 수정이나 새로운 기능을 추가하는) 작업에 착수해 해낼 것이다. (이 시점에서는 다른 모든 사람이 무임승차자라는 사실은 이제 의미가 없어진다.)

또 다른 해답의 일부는 공용 소스 기반에 대한 작은 패치의 시장가치를 거둬들이는 것이 매우 어렵다는 점이다. 골치 아픈 오류를 수정한 패치가 돈이 될 만한 가치가 있다고 많은 사람이 인식한다고 가정해보자. 어떤 방법으로 사람들에게 돈을 받을 수 있을까? 종래의 결제 시스템은 간접 비용이 충분히 높기 때문에 이런 경우에 알맞은 소액 결제 시스템으로 이용하는데 심각한 문제가 있다.


그러나 좀 더 본질적인 문제는 시장가치를 거둬들이는 것이 매우 어렵다는 것뿐 아니라 일반적으로 가치를 부여하는 것조차 힘들다는 점이다. 어디서나 접근할 수 있고, 안전한 보안이 제공되며, 간접 비용도 없는 그런 이론적으로 이상적인 소액 결제 시스템이 갖춰진 인터넷이 있다고 가정한 다음 사고실험을 해보자.[^4-20] ‘리눅스 커널에 대한 여러 가지 수정’이라고 이름 붙인 패치를 여러분이 작성했다면 여기에 얼마의 가격을 매길 수 있을까? 아직 패치를 보지도 않은 잠재적 구매자는 그 가격이 합당한지 어떻게 알 수 있을까?

[^4-20]: 역자주 사고실험은 ‘thought experiment’의 번역이다. 말 그대로 실험이나 관찰이 아닌 사고, 즉 생각으로 가상의 실험을 하는 것이다. 현실적인 이유 때문에 실제로 실험할 수 없는 ‘위기 상황에서 누구를 살리고 누구를 죽일 것인가’와 같은 철학적 문제나 물리, 수학 영역에서 폭넓게 이용된다.

이 상황은 하이에크의 계산 문제와 거의 유사한 유령의 집 거울 이미지 같은 것이다. 따라서 이 문제를 해결하려면 패치의 기능적 가치를 평가할 수 있고 원활한 상거래에 맞는 가격도 결정할 수 있는 믿을 수 있는 초월적 존재가 있어야 한다.[^4-21]

[^4-21]: 역자주 프리드리히 하이에크(Friedrich A. Hayek, 1899∼1992). 시장 경제 체제와 신자유주의의 이념적 토대를 세운 경제학자로 1974년도 노벨 경제학상을 수상했다. 본문에서 언급한 계산 문제(calculation problem)는 사회주의국가에서 중앙계획당국(Central Planning Authority)에 의한 가격 결정과 자원의 효율적인 분배가 가능한가를 놓고 1920년대부터 경제학계에서 벌어진 ‘사회주의 경제 계산 논쟁(The Socialist Calculation Debate)’을 말한다. 하이에크는 이것이 불가능하다는 편의 대표 학자다. 올바른 가격 결정을 위해서는 모든 관련 정보가 중앙계획당국에 집중되어야 하지만 정보는 수많은 요인으로 인해 (유령의 집 안 거울에 비친 모습이 일그러지고 굴절된 상태로 계속 변하는 것처럼) 온전히 드러나지 않기 때문에 가격 결정과 계획 경제는 불가능하다는 것이 하이에크의 주장이다. 본문에서 말한 초월적 존재(superbeing)는 가격 결정을 위한 모든 정보를 모아 판단할 수 있는 중앙계획당국과 같은 존재를 말한다.

그러나 불행히도 이러한 존재는 거의 없으므로 패치 작성자 J. 랜덤 해커[^4-22]는 패치를 그냥 갖고 있거나 무료로 공유지로 내보내는 두 가지 선택이 가능하다.

[^4-22]: 역자주 J. 랜덤 해커(J. Random Hacker)는 <역자주 4>와 관련해 해커 공동체에서 빈번히 사용하는 가상의 해커 이름이다. J. 랜덤을 접사로 삼아 J. 랜덤 기크, J. 랜덤 너드와 같이 사용하기도 한다. MIT 기숙사 중 랜덤 홀(Random Hall)에 거주하는 사람을 가리킬 때 사용한 재미있는 유래가 있기도 하다. 해커 용어 사전인 「자곤 파일」에 J. 랜덤 해커의 전형적인 모습이 구체적으로 묘사되어 있으며, 비슷한 내용인 ‘멜 이야기’도 있다. 「자곤 파일」은 한국에 『해커 영어사전, Eric S. Raymond, 한경훈 옮김, 기전연구사, 1998년, ISBN:9788933604427』로 번역·출판되었다.

패치를 그냥 갖고 있으면 얻을 수 있는 것이 아무 것도 없다. 오히려 새로운 출시마다 패치를 소스 기반에 다시 통합하는 노력이 필요하므로 미래 비용을 발생시킨다. 따라서 이 선택으로 얻을 수 있는 수익은 실제로는 마이너스다. (또한 신속한 출시 속도를 갖는 오픈소스 프로젝트의 특성으로 인해 마이너스 손실은 크게 늘어난다.)

상황을 보다 긍정적으로 바꾸려면, 기여자는 패치를 유지관리하는 부담을 소스 코드 소유자나 프로젝트의 다른 구성원에게 떠넘겨 이익을 얻을 수 있다. 패치는 미래에 다른 사람이 향상시킬 것이기 때문에 또한 이익이다. 최종적으로는 패치를 직접 유지관리하지 않아도 되므로 자신의 필요에 맞는 다른 종류의 맞춤변경에 더 많은 시간을 쏟을 수 있다. 패치에 적용한 이러한 논리를 전체 패키지의 소스를 공개하는데 적용해도 역시 타당할 것이다.

패치를 무료로 공유지로 내보내면 당장의 이익은 없을지 모르지만 미래에 발생할 J. 랜덤 해커의 문제를 해결할 때 다른 사람이 호혜적으로 도움을 줄 계기가 될 수 있을지 모른다. 따라서 이 선택은 보기에는 이타적이지만 게임이론의 관점에서 보면 실제로는 최상의 이기적 선택이다.

이러한 종류의 협력 관계를 분석할 때는 (돈이나 그에 상응하는 보상이 없기 때문에 공급이 부족하게 되는) 무임승차자 문제가 나타난다. 하지만 이 문제가 최종 사용자 수에 비례하는 것은 아니라는 사실에 유의해야 한다. 오픈소스 프로젝트의 복잡성과 통신상의 간접 비용은 거의 전적으로 참여하는 개발자 수의 함수다.[^4-23] 소스 코드를 전혀 보지 않는 최종 사용자는 수가 늘어나도 사실상 비용을 발생시키지 않는다. 프로젝트 메일링리스트에 올라오는 바보 같은 질문은 증가할 수 있지만 이는 ‘자주 묻는 질문들에 대한 답변FAQ:`Frequently Asked Questions`’을 만들어 유지하고, 이것을 읽지 않고 올린 질문은 그냥 무시하는 방법으로 비교적 쉽게 대처할 수 있다. (실제로 이 두 가지 방법은 일반적으로 사용되고 있는 것들이다.)

[^4-23]: 원주 프로젝트가 성장해도 재능 있는 프로그래머가 프로젝트 사용자 인구 안에 똑같이 분포되어 있다고 가정하면, 공급 부족 문제는 사실상 선형으로 커질 것이다. 그러나 현실은 이와 다르다. 「얼누리의 개간」에서 논의한 유인정책은 (그리고 좀 더 많은 전통적인 경제적 유인정책 역시 그 혜택으로 인해) 프로젝트가 인재를 찾는 것만큼이나, 능력 있는 사람도 흥미에 맞는 프로젝트를 스스로 찾게 만든다. 이런 이유 때문에 (경험도 이를 확증하는 경향이 있지만) 가장 가치 있는 (최고의 능력과 동기를 가진) 사람들은 프로젝트 수명주기의 비교적 초기에 그들에게 잘 맞는 프로젝트를 발견해 참여하고 차츰 이탈해가는 경향이 있다. 확실한 자료는 부족하지만 경험을 근거로 할 때, 성장하는 프로젝트의 수명주기에 있어 재능 있는 프로그래머가 프로젝트에 동화되는 숫자는 (인구 성장 모델인) 고전적인 로지스틱 곡선(logistic curve)를 따르는 경
향이 있다고 나는 강하게 추측한다.


오픈소스 소프트웨어에 존재하는 실제 무임승차자 문제는 다른 어떤 것보다 패치를 제출할 때의 마찰 비용 함수에 대한 것이다. (「얼누리의 개간」에서 설명한) 문화적 명성 게임에서 이해 관계가 거의 없는 잠재적 기여자는 금전적인 보상이 없는 상황에서 이렇게 생각할 지 모른다.

‘패치를 깨끗이 정리하고, 개정이력 항목을 채우고, FSF 저작권 양도 각서[^4-24]에 서명하고, 그리고…… 이런 것들을 모두 해야 한다면, 차라리 오류 수정을 제출하지 않는 편이 낫겠어!’

[^4-24]: 역자주 자신이 만든 프로그램을 FSF에 기증하거나 FSF가 저작권을 가진 소프트웨어에 대한 패치를 작성했을 경우에는 FSF에 ‘저작권 양도 각서’를 제출하는 절차를 밟아야 한다.


바로 이런 이유 때문에 기여자의 수는 (그리고 2차적으로 프로젝트의 성공 여부는) 프로젝트에 기여하기 위해 거쳐야 하는 절차의 수에 강하게 반비례한다. 이러한 마찰 비용은 단지 기계적인 것일 뿐만 아니라 정치적인 것이기도 하기 때문에 2가지를 함께 고려하면 느슨하고 무정형적인 리눅스 문화가 좀 더 중앙통제적이고 단단하게 조직화된 BSD`Berkeley Software Distribution` 프로젝트보다 왜 협력 에너지를 모으는데 더 엄청난 매력을 갖게 되었는지와 리눅스가 도약함에 따라 왜 자유 소프트웨어 재단의 중요성이 상대적으로 감소되었는지를 설명할 수 있다.

지금까지의 이야기는 J. 랜덤 해커가 패치를 만든 뒤에 이것을 어떻게 할 것인가에 대한 사후 설명에 해당한다. 이제 우리에게 필요한 남은 설명은 J. 랜덤 해커가 판매 수익을 거둘 수 있었을지 모를 폐쇄소스 프로그램을 만드는 대신 왜 맨 처음에 오픈소스 패치를 만들었는지에 대한 경제적 측면의 설명이다. 어떤 사업 모델이 오픈소스 개발이 번성할 수 있는 틈새를 만든 것일까?

## 소스를 폐쇄하는 이유

오픈소스 사업 모델을 분류해 보기 전에 배제 이익에 대해 개괄적으로 생각해 보아야 한다. 소스를 폐쇄할 때, 정확히 무엇을 보호하게 되는 것일까?

누군가를 고용해 사업에 특화된 회계 프로그램 패키지를 만든다고 가정해보자. 발생될 문제를 해결하는 데 소스 코드를 공개하는 것보다 폐쇄하는 것이 더 나은 해결책이 되지는 않는다. 소스 코드를 폐쇄하려고 하는 유일한 합리적 이유는 (1) 프로그램 패키지를 다른 사람에게 팔고 싶거나, (2) 경쟁 회사가 해당 프로그램을 사용하지 못하게 하기 위해서일 것이다.

(1)은 명백히 판매가치의 보호다. 그러나 사내용으로 만들어진 95%의 소프트웨어에는 이것이 적용되지 않는다. 그렇다면 소스 폐쇄의 다른 이익은 무엇일까?

(2)의 경우인 경쟁 이점을 위한 소스 폐쇄에는 약간의 검토가 필요하다. 여러분이 회계 프로그램 패키지를 오픈소스로 공개한다고 가정해보자. 프로그램이 인기를 끌고 공동체의 개선으로 더 좋은 프로그램이 되어 이제 경쟁사도 이 프로그램을 사용하기 시작한다. 경쟁사는 개발 비용 지출 없이 이익을 얻고 여러분의 사업도 잠식해 간다. 이것이 소스 공개를 반대하는 논거가 될 수 있을까?

그럴 수도 있고 아닐 수도 있다. 실제 문제는 소스를 공개해 개발 부담을 분산시킨 것에서 얻는 이익과 경쟁사의 무임승차 때문에 늘어난 손실 중 어느 쪽이 더 큰가 하는 점이다. 많은 사람이 (가) 소스 공개로 더 많은 개발 협력을 얻는 기능적인 이 점을 무시하고, 또한 (나) 개발 비용을 매몰 비용으로 취급하지 않음으로써 어느 쪽이 더 큰지 잘못 추론하는 경향이 있다. 회계 프로그램 패키지를 만든다는 가정 아래에서는 개발 비용은 어쨌든 지출해야 하는 것이기 때문에 해당 비용을 (여러분이 그렇게 선택했다 하더라도) 소스를 공개하는데 따른 비용으로 간주하는 것은 명백한 오류다.

흔히 말하는 소스 폐쇄의 또 다른 이유는 특수한 특정 회계 기능의 소스가 공개되는 것이 사업 계획의 기밀적 측면을 드러내는 것과 같다는 두려움이다. 하지만 이는 소스 폐쇄가 아닌 나쁜 설계를 설명하는 논거라 할 수 있다. 올바르게 만들어진 회계 프로그램이라면 스키마나 명세 언어가 아닌 소스 코드에는 사업 정보가 전혀 나타나지 않아야 한다. 매우 밀접한 경우로 데이터베이스 스키마가 데이터베이스 엔진의 동작 구조에서 사업 정보를 분리시키는 방법을 생각해 볼 수 있다. 이러한 분리는 엔진을 오픈소스로 만듦으로써 갖는 이익을 극대화하면서 핵심 자산인 스키마도 보호할 수 있게 해준다.

완전히 비합리적인 이유로 소스를 폐쇄하는 경우도 있다. 예를 들면 소스를 공개하지 않으면 크래커나 침입자로부터 기업 시스템 보안을 더 안전하게 지킬 수 있으리라는 착각이다. 만약 여러분이 이런 경우에 해당한다면 보안 전문가와 즉시 상담할 것을 권하고 싶다. 정말로 보안에 신경 쓰는 전문가들은 뼈저린 경험을 통해 배워왔기 때문에 폐쇄소스 프로그램의 보안을 믿을 만큼 어리석지 않다. 보안은 신뢰성의 한 일면이다. 철저한 동료검토`peer review`[^4-25]를 거친 알고리즘과 구현물만을 가능한 한 안전한 것으로 믿을 수 있다.

[^4-25]: 역자주 동료검토(peer review)란 비슷한 수준이나 역할을 수행하는 사람이 프로그램의 소스 코드를 분석하는 등의 방법으로 세부 사항을 검토 및 평가하는 것을 말한다.

## 사용가치 자금 마련 모델

사용가치와 판매가치를 구별했을 때 알 수 있는 핵심 사실은, 폐쇄소스를 오픈소스로 전환함으로써 위협받는 것이 오직 판매가치뿐이라는 것이다. 사용가치는 영향을 받지 않는다.

만약 판매가치보다 사용가치가 소프트웨어 개발의 주된 동인이고 (「성당과 시장」에서 논한 바와 같이) 폐쇄소스보다 오픈소스 개발 모델이 더 효율적이고 효과적인 방법이라면, 예상되는 사용가치만으로도 오픈소스 개발 자금을 지속적으로 마련할 수 있는 환경을 기대할 수 있을 것이다.

그리고 실제로 오픈소스 프로젝트를 위한 전일 근무`full-time` 개발자의 임금을 순전히 사용가치만으로 충당한 최소 2개의 중요한 모델을 어렵지 않게 찾을 수 있다.

### 1. 아파치 사례: 비용 공유

전자 상거래 사이트나 광고를 판매하는 인지도 높은 매스컴 사이트 또는 포털 사이트와 같이 높은 안정성의 고용량 웹 서버가 사업에 꼭 필요한 회사가 있다고 가정해보자. 이러한 웹 서버는 하루 24시간, 일주일 내내 쉬지 않고 가동되어야 하며 더 빠른 속도와 맞춤변경도 필요하다.

이러한 요구를 어떻게 충족시킬 수 있을까? 다음 3가지 기본 전략이 추진 가능하다.

#### 사유 웹 서버 구입

회사와 웹 서버 공급업체의 목표 방향이 일치하고 공급업체가 그것을 정확히 구현할 기술력을 갖고 있다고 확신할 때의 선택이 될 수 있다. 그러나 2가지가 모두 사실이라고 가정해도 제품을 원하는 대로 변경하기엔 불충분할 수 있다. 왜냐하면 공급업체가 선택적으로 제공한 후크`hook`[^4-26]를 통해서만 소프트웨어를 수정할 수 있기 때문이다. 넷크레프트`Netcraft`의 월간 조사 결과를 보면 사유 웹 서버의 선택은 선호 되는 것이 아니며, 계속해서 인기가 없어지고 있음을 알 수 있다.[^4-27]

[^4-26]: 역자주 나중에 기능을 추가하거나 수정할 때 작업을 간단히 할 수 있도록 관련 기능을 프로그램에 미리 내장한 것을 후크라고 한다.

[^4-27]: 역자주 <http://web.archive.org/web/20001110045100/http://www.netcraft.com/survey/> 참고.

#### 직접 제작

웹 서버를 직접 만드는 것도 고려할 수 있는 선택이다. 웹 서버는 매우 복잡한 프로그램이 아니며 웹 브라우저와 비교하면 확실히 더 그렇다. 또한 기능을 특화하면 매우 효율적이고 강력해질 수 있다. 이 방법을 선택하면 개발 시간과 비용을 지불해야 하지만 원하는 기능과 설정을 정확히 얻을 수 있다. 그러나 개발자가 퇴사하거나 은퇴할 경우에는 문제가 생길 수 있다.

#### 아파치 그룹에 참여

아파치 서버는 동시다발적인 개별적 개발 노력보다 하나의 코드 기반을 개선하는 노력을 한데 모으는 것이 더 현명하다는 것을 깨우친 웹 마스터들이 인터넷 연결 기반의 모임을 통해 개발한 것이다. 이렇게 함으로써 독자적인 서버 개발로 얻을수 있는 대부분의 이점과 대규모로 동시에 이뤄지는 동료검토의 강력한 디버깅 효과를 모두 얻을 수 있었다.

아파치를 선택했을 때의 이점은 매우 크다. 넷크레프트의 월간 조사 결과를 통해 이점이 얼마나 큰지 판단할 수 있는데, 아파치의 시장 점유율은 처음부터 모든 사유 웹 서버들보다 꾸준히 높아지고 있다. 2000년 11월 현재, 아파치와 변형 웹 서버들은 법적 소유자나 판촉 활동 그리고 계약에 의한 서비스 조직이 전혀 없는 상태로 전체 시장의 약 60%를 점유하고 있다.[^4-28]

[^4-28]: 역자주 <역자주 27> 참고. 최근 자료는 <http://www.netcraft.com/survey/>에서 참고할 수 있다.

아파치 사례는 경쟁 소프트웨어의 사용자들이 오픈소스 개발에 협력적으로 자금을 제공해 이점을 찾은 모델로 일반화할 수 있다. 이 모델에서는 그렇지 않은 때보다 더 낮은 개발 비용과 더 좋은 품질을 제품을 가질 수 있다.


### 2. 시스코 사례: 위험 분산[^4-29]

[^4-29]: 역자주 이 단락의 내용은 「리눅스 저널」 1998년 10월호 기사를 중심으로 한 것이다.

몇 년 전 (네트워크 장비 제조업체) 시스코`Cisco`의 프로그래머 두 명은 사내에서 사용할 분산 인쇄 스풀링 시스템 개발을 맡았는데 꽤 어려운 작업이었다. 임의의 사용자 A가 (바로 옆 방일 수도 있고 1천 킬로미터 이상 떨어진 곳일 수도 있는) 임의의 프린터 B를 사용할 수 있어야 하는 것은 물론이고 인쇄 용지나 토너 상태에 문제가 있을 경우, 가까이 있는 다른 프린터로 경로를 바꿀 수 있어야 했다. 또한 이런 문제를 프린터 관리자에게 보고하는 기능도 있어야 했다.

두 사람은 표준 유닉스의 인쇄 스풀링 소프트웨어를 솜씨 좋게 수정하고 몇 개의 래퍼 스크립트`wrapper script`를 덧붙여 작업을 완성(<http://www.tpp.org/CiscoPrint/>)[^4-30]했는데, 나중에 그들과 시스코 모두에 문제가 있음을 깨닫게 된다.

[^4-30]: 역자주 시스코 인쇄 스풀링 소프트웨어 개발 및 정보 사이트는 <http://ceps.sourceforge.net/>로 이전되었다.

문제는 두 사람 모두 시스코에 계속 있을 것 같진 않다는 점이었다. 두 사람이 모두 시스코를 떠나면 결국 소프트웨어는 유지관리되지 않아 부패하기 시작할 것이다. (즉, 점차 현실 상황과 동떨어지게 될 것이다.) 자신의 작업이 그렇게 되는 것을 보고 싶은 개발자는 없을 것이다. 적극적인 두 사람은 그들이 계속 근무하리라는 합당한 기대에서 시스코가 개발 비용을 지불했을 것으로 느꼈다.

두 사람은 관리책임자에게 인쇄 스풀링 소프트웨어를 오픈소스로 공개해 달라고 설득했다. 그들의 주장은 소프트웨어가 오픈소스로 전환되더라도 시스코의 입장에서는 잃어 버릴 판매가치가 없으며, 오히려 많은 것을 얻게 되리라는 것이었다. 사용자와 개발자 공동체가 많은 기업으로 확산되어 성장하도록 함으로써 시스코는 소프트웨어의 최초 개발자가 없어질 위험을 효과적으로 피할 수 있었다.

시스코 사례는 오픈소스가 비용 절감뿐 아니라 위험 분산과 완화 기능도 할 수 있다는 것을 보여준다. 모든 관계자는 소스 공개와 다수의 독립적인 매출원을 통해 자금이 제공되는 협력적인 공동체가 그 자체로 경제적인 가치가 있으면서 자금을 제공하기에 충분한 매력을 가진 안전 장치가 된다는 사실을 알게 되었다.


## 왜 판매가치가 문제가 되는가

오픈소스는 소프트웨어에서 직접적인 판매가치를 얻는 것을 훨씬 어렵게 한다. 그러나 이러한 어려움이 기술적인 이유 때문은 아니다. 소스 코드를 복제하는 것이 바이너리를 복제하는 것보다 더 어렵지도 쉽지도 않으며, 판매가치를 얻을 수 있는 저작권과 이용허락`license`을 강제하는 것이 폐쇄소스보다 오픈소스에서 불가피하게 더 어려운 것도 아니다.

판매가치 확보의 어려움은 오픈소스의 개발을 지속하게 하는 사회계약의 본질에 있다고 할 수 있다. 서로를 강화시키는 3가지 이유 때문에 주된 오픈소스 이용허락들은 직접 판매 수익을 용이하게 할 수 있는 사용과 재배포, 개작에 대한 대부분의 제약을 금지한다. 이런 이유들을 이해하려면 이용허락이 만들어진 사회적 맥락인 인터넷 [해커 문화](http://korea.gnu.org/people/chsong/cb/hacker-howto/)를 살펴보아야만 한다.

해커 문화에 대한 신화가 외부에서 여전히 널리 믿어지고 있음에도 불구하고, 다음 3가지 이유는 모두 시장 적대감과 관련이 없다. 이윤 추구를 계속 반대하는 소수의 해커도 있지만, 레드햇`Red Hat`과 수세`SuSE`, 칼데라`Caldera`와 같은 영리 목적의 리눅스 배포업체와 협력하는 해커 공동체의 일반적인 의향은 자신의 목적에 도움이 되는한 대부분의 해커들이 기업과 기꺼이 함께 일할 것이라는 점을 보여준다. 해커들이 직접 수익을 얻게 하는 이용허락에 거부감을 갖는 진짜 이유는 훨씬 더 미묘하고 흥미로운 것이다.

첫 번째 이유는 대칭성과 관련된다. 대부분의 오픈소스 개발자는 자신이 증여한 것에서 다른 사람이 이익을 얻는 것에 본질적으로 반대하지 않지만, 또한 개발자 대부분은 (코드의 원저작자는 예외가 될 수 있겠지만) 다른 어떤 당사자도 이익을 얻을 특권적 지위에 있지 않기를 요구한다. J. 랜덤 해커는 자신이 만든 소프트웨어나 패치를 푸바코`Fubarco`[^4-31]가 판매해 수익을 얻는 것에 반대하지 않겠지만, 이는 자신도 잠재적으로 그렇게 할 수 있는 동안에만 그런 것이다.

[^4-31]: 역자주 Fubarco(FUBAR COrporation)는 J. 랜덤 해커의 경우처럼 임의의 회사 이름을 가리킨다. 푸바(FUBAR)는 2차 세계 대전 당시 미국 육군에서 사용한 구호인 ‘Fouled Up Beyond All Recognition’ 또는 ‘Fucked Up Beyond All Repair’의 두문자어로 “I had a traffic accident, so my car is fubar now.” 등의 용례처럼 엉망진창이라는 뜻을 갖고 있다. 미군에서 사용하는 속어적 의미와 달리 해커 문화에서는 foo와 bar 그리고 fubar를 임의의 단어나 변수를 가리키는 대명사로 흔히 사용한다.

두 번째 이유는 의도하지 않은 결과와 관계 있다. 해커들은 상업적 이용이나 판매를 위한 (직접 판매가치를 얻는 데 가장 일반적인 형태면서 언뜻 보기에는 불합리한 것처럼 보이지 않는) 별도의 제한이나 이용 요금 조항을 포함한 이용허락이 심각하고 섬뜩한 영향을 미치는 것을 지켜봐 왔다. 구체적인 예를 들면 우리가 원칙적으로는 권장하고 싶은 저렴한 가격의 CD-ROM 모음집 재배포 행위 등에 드리워진 법률적 그림자다. 좀 더 일반적으로 말하면 사용, 판매, 개작, 배포의 제한과 (이용허락에 포함된 더 복잡한 제한들은) 적합성 추적에 간접 비용을 발생시키고 (취급하는 소프트웨어 패키지의 수가 증가할수록) 감지되는 불확실성과 잠재적인 법률 위험이 폭발적으로 증가한다. 이러한 결과는 매우 해로운 것으로 간주되기 때문에 이용허락에 제한을 두지 않고 되도록 간결하게 유지하려는 강한 사회적 압력이 있게 된다.

가장 결정적인 마지막 세 번째 이유는 「얼누리의 개간」에서 설명한 증여문화의 원동력인 동료검토를 유지하는 것과 관계된다. 지식재산의 보호나 직접 판매가치를 확보하기 위해 만들어진 이용허락의 제한들은 종종 프로젝트 분기`fork`[^4-32]를 법률적으로 불가능하게 한다. 이러한 경우의 예로 썬 마이크로시스템즈가 자바`Java`와 지니`Jini`에 적용한 소위 [공동체 소스 이용허락](http://korea.gnu.org/people/chsong/cb/magic-cauldron/scsl.html)을 들 수 있다. (「얼누리의 개간」에서 자세히 설명한 대로) 프로젝트 분기는 꺼려지며 마지막 수단으로 간주되지만, 유지관리자의 무능이나 (더 폐쇄적인 이용허락으로) 프로젝트가 변절할 경우에는 마지막 수단이 존재하는 것이 매우 중요하다고 여겨진다.[^4-33]

[^4-32]: 역자주 쇠스랑 발이 밑부분에서 3개로 갈라지듯이 본래의 프로젝트에서 독자적 프로젝트로 분리돼 나가는 것을 포크(fork) 또는 포킹(forking)이라고 한다. 이 번역문에서는 분기로 표현한다.

[^4-33]: 원주 프로젝트가 변절한 후에 분기가 일어난 전형적인 예를 OpenSSH(OpenBSD Secure SHell)의 역사에서 볼 수 있다. OpenSSH 프로젝트는 초기판의 SSH가 폐쇄소스가 되면서 뒤늦게 분기되었다.

해커 공동체는 첫 번째 대칭성 이유에 어느 정도 유연성이 있다. 프로그램 원저작자가 수익을 얻을 수 있는 특권을 어느 정도 허용하는 [네트스케이프 공중 이용허락](http://www.mozilla.org/MPL/NPL/1.0/)`NPL` 같은 형태는 공동체가 용인한다. (NPL의 경우를 구체적으로 말하면 폐쇄소스를 포함한 파생 제품에 오픈소스 모질라 코드를 이용할 수 있는 배타적 권리를 허용한다.) 그러나 의도하지 않는 결과를 방지하려는 두 번째 이유에는 유연성이 덜하며, 프로젝트 분기 선택권을 유지하려는 세 번째 이유에는 타협의 여지가 전혀 없다. (이런 이유 때문에 자바와 지니에 적용한 썬의 공동체 소스 이용허락 책략은 해커 공동체에 의해 널리 거부되고 있다.)

다시 한번 말하지만 해커 공동체의 그 누구도 한 프로젝트가 경쟁하는 여러 계열로 갈라지는 것을 원치 않는다. (「얼누리의 개간」에서 살펴본 대로) 실제로 정당한 이유에서 프로젝트 분기에 반대하는 매우 강한 사회적 압력이 있다. 시위 현장이나 법정에 서고 싶은 사람도 없고 총격전을 하고 싶은 사람도 없다. 그러나 분기할 권리는 쟁의권이나 제소권, 무기휴대권과 같다.[^4-34] 이러한 권리 중 어느 것도 행사하고 싶지 않겠지만, 누군가 이 권리를 뺏으려 한다면 그것은 심각한 위험 신호가 된다.

[^4-34]: 역자주 미국의 경우 수정헌법 제2조에 무기휴대권이 명시되어 있다.

이러한 이유들은 ‘[오픈소스 정의](http://korea.gnu.org/people/chsong/copyleft/osd-korean.html)’의 내용을 알기 쉽게 해주는데, 오픈소스 정의는 ([GPL](http://www.gnu.org/licenses/gpl.html), [BSD 이용허락](http://opensource.org/licenses/bsd-license), [MIT 이용허락](http://opensource.org/licenses/MIT), [예술적 이용허락](http://www.perlfoundation.org/artistic_license_2_0) 같은) 표준 이용허락들의 중요한 특징에 대한 해커 공동체의 합의를 명시하기 위해 만들어진 것이다. ‘오픈소스 정의’의 조항들은 (의도된 것은 아닐지라도) 직접 판매가치의 포섭을 매우 어렵게 만드는 효력을 갖고 있다.

## 간접 판매가치 모델

그럼에도 불구하고 간접 판매가치와 다소 비슷한 효과를 얻을 수 있는 소프트웨어 관련 서비스 시장을 만드는 방법들이 있다. 다음은 이러한 종류의 알려진 5개 모델과 이론적인 2가지 모델이다. (더 많은 모델이 앞으로 개발될 것이다.)


### 1. 미끼 상품 및 시장지위 견인 상품[^4-35]

[^4-35]: 역자주 이 제목의 원어 표현은 ‘로스리더(loss-leader) 및 마켓 포지셔너(market positioner)’다. 본 상품 또는 다른 상품을 팔기 위해 염가로 소비자를 유혹하는 미끼 상품을 로스리더(loss-leader)라고 한다. 또한 원하는 표적 시장에서 고객 인지도 등의 시장 지위(market position)를 확립하는 마케팅 과정인 마켓 포지셔닝(market positioning)에 사용하는 상품을 이 글에서는 마켓 포지셔너(market positioner)라고 표현했다. 이 단락에서 설명하는 사업 모델은 오픈소스 소프트웨어를 마켓 포지셔닝 도구나 로스리더로 이용하는 것이다.


이 모델에서는 직접 매출원이 되는 사유 소프트웨어의 시장 지위를 만들거나 유지하기 위해 오픈소스 소프트웨어를 이용한다. 가장 흔한 변형은 오픈소스 클라이언트 소프트웨어를 통한 서버 소프트웨어의 판매나 포털 사이트와 제휴한 광고 및 구독 매출이다.

네트스케이프 커뮤니케이션즈`Netscape Communications`가 1998년 초에 모질라`Mozilla` 브라우저를 오픈소스로 만들면서 이 전략을 따랐다.[^4-36] 이 회사의 매출 중 13%를 차지하는 브라우저 부문 매출은 마이크로소프트가 인터넷 익스플로러`IE: Internet Explorer`를 처음 출시했을 때 하락하고 있었다. IE의 집중적인 마케팅으로 (그리고 나중에 반 독점소송의 핵심 쟁점이 된 수상한 끼워팔기 관행 때문에) 네트스케이프의 브라우저 시장 점유율은 빠르게 잠식됐고 마이크로소프트가 브라우저 시장을 독점하고 HTML과 HTTP를 사실상 통제해 서버 시장에서 네트스케이프를 몰아내려 한다는 우려를 낳았다.[^4-37]

[^4-36]: 역자주 『오픈 소스 Vol. II, 한빛미디어, 2013년, ISBN: 9788968486456』의 13장 「소스를 자유롭게」에서 모질라 이야기를 자세히 참고할 수 있다.

[^4-37]: 역자주 1998년 5월 18일부터 시작된 MS의 반독점소송은 1심에서 혐의가 인정돼 MS의 회사 분할 결정이 내려졌지만 이어진 항소심에서 판결이 뒤집혔고, 2001년 11월 2일 법무부와 MS 간의 화해가 이루어지며 큰 성과 없이 종결되었다. <http://www.ipleft.or.kr/bbs/view.php?board=ipleft_5&id=375>에서 소송과정과 내용을 자세히 참고할 수 있다.

아직 폭넓은 인기가 있던 브라우저를 오픈소스로 만드는 방법으로 네트스케이프는 마이크로소프트의 브라우저 독점 가능성을 효과적으로 부정했다. 네트스케이프는 오픈소스 협력이 브라우저의 개발과 디버깅을 가속할 것으로 기대했으며, 또한 만회할 수 있을 만큼 IE의 점유율이 낮아져 마이크로소프트가 배타적으로 HTML을 정의하는 것을 막을 수 있기를 바랬다.

이 전략은 효과가 있었다. 실제로 1998년 11월부터 네트스케이프는 IE로부터 사업 시장 점유율을 회복하기 시작했고, 네트스케이프가 AOL`America On-Line`로 인수된 1999년 초에는 모질라를 계속 유지하는 것의 경쟁상 이점이 충분히 명확해졌기 때문에 모질라가 아직 시험 단계에 머물러 있었음에도 AOL은 첫 번째 공개 선언중 하나에서 모질라 프로젝트를 계속 지원한다고 밝혔다.[^4-38]

[^4-38]: 역자주 모질라는 네트스케이프 커뮤니케이션즈의 상용 웹 브라우저 내비게이터(Navigator)의 오픈소스 판이자 프로젝트 명칭이다. 본문의 내용처럼 네트스케이프가 통신 서비스 회사 AOL에 인수된 이후에도 AOL이 모질라 프로젝트에 대한 지원을 계속했지만, 지원을 종료한 2003년부터는 모질라 재단이 만들어져 현재까지 개발을 계속하고 있다. 지금의 프로그램 이름은 모질라 파이어폭스(Firefox)다. <http://gs.statcounter.com/>에서 브라우저 세계 시장 점유율을 확인할 수 있는데, 이 글을 쓸 당시에는 존재하지 않았던 구글 크롬(Google Chrome) 브라우저가 모바일 장비를 포함해 현재 점유율 1위를 차지하고 있다. 크롬은 오픈소스 소프트웨어다. 한편 AOL로 인수된 후의 네트스케이프는 인터넷 뉴스 포털로 사업 영역을 변경했다.

### 2. 하드웨어에 매력 더하기[^4-39]

[^4-39]: 역자주 이 제목의 원어 표현은 위젯 프로스팅(widget frosting)이다. 이름을 특정하지 않은 작은 하드웨어를 가리킬 때 가젯(gadget)이라는 단어를 사용하기도 하는데 하드웨어에 대해서는 위젯(widget)을 같은 의미로 사용한다. 프로스팅(frosting) 또는 아이싱(icing)은 도넛이나 쿠키, 케이크 같은 식품 위에 고객을 유혹할 수 있는 장식이나 맛을 내기 위해 설탕 가루나 시럽 등의 달콤한 재료를 뿌리거나 입히는 것을 말한다. 따라서 위젯 프로스팅은 위젯(하드웨어)에 프로스팅(오픈소스 소프트웨어)를 공짜로 함께 제공해 고객의 선호도와 구매욕을 높이려는 하드웨어 떡고물 전략이다. (Copyright 2013 이제명 <crinje@gmail.com>. 이 이미지는 크리에이티브 커먼즈 저작자표시-동일조건변경허락 3.0 대한민국 이용허락에 따라 이용할 수 있다.)

이 모델은 하드웨어 제조업체를 위한 것이다. (여기서 말하는 하드웨어에는 이더넷 카드나 주변 장치 기판에서부터 전체 컴퓨터 시스템에 이르는 어떤 것도 모두 포함된다.) 시장의 압력은 하드웨어 회사들이 (장치 드라이버와 설정 도구는 물론 전체 운영체제까지 모든 종류의) 소프트웨어를 만들고 유지하도록 강요한다. 그러나 하드웨어 회사에게 소프트웨어 자체는 수익의 중심이 아닌 간접 비용이며 때로는 상당한 부담이 된다.

이러한 상황에서 오픈소스로의 전환은 어렵지 않은 결정이다. 잃게 될 매출원이 없기 때문에 손실은 없다. 회사가 얻는 것은 극적으로 확대된 개발자 집단과 고객 요구에 대한 더 빠르고 유연한 대응, 동료검토를 통한 더 나은 안정성이다. 다른 환경으로의 이식도 무료로 얻을 수 있다. 또한 고객이 요구할 때 기술 지원 직원들이 소스를 개선하기 위해 더 많은 시간을 쏟기 때문에 고객 충성도도 높아질 수 있다.

하드웨어 드라이버를 특히 오픈소스로 만드는 것에 대해 제조업체들이 흔히 제기하는 몇 가지 반론이 있다. 이에 대해서는 이곳의 더 일반적인 문제들과 함께 설명하기보다 별도의 주제로 ‘[뒷이야기: 왜 드라이버를 폐쇄하는 업체가 손해를 보는가?]’ 부분에서 다루고자 한다.

오픈소스의 ‘미래 보장`future-proofing`’ 효과는 이 모델에서 특히 강하다. 하드웨어 제품은 생산과 지원에 있어 유한한 수명을 갖고 있고, 수명이 끝난 뒤에는 고객이 자력으로 문제를 해결해야 한다. 그러나 드라이버 소스에 접근해 필요한 패치를 만들 수 있다면 만족스런 재구매 고객으로 계속 남아 있을 수 있다.

이 모델을 도입한 매우 극적인 사례는 1999년 3월 중순에 애플 컴퓨터가 맥 OS X 서버 운영체제의 핵심을 다윈`Darwin`이란 이름의 오픈소스로 발표한 것이다.[^4-40]

[^4-40]: 역자주 애플 컴퓨터(Apple Computer, Inc.)는 아이폰, 아이팟과 같은 전자 제품 시장을 확대하기 위해 2007년 1월 9일 이름에서 컴퓨터를 뺀 애플(Apple Inc.)로 회사 이름을 변경했다. 다윈이 발표된 정확한 날짜는 1999년 3월 16일이다.

### 3. 요리법은 공개하고, 식당을 개업하라

(미끼 상품 및 시장지위 견인 상품 사례에서는) 폐쇄 소프트웨어를 위한 것이었지만, 이 모델에서는 서비스의 시장 지위를 확립하기 위해 소프트웨어를 오픈소스로 만든다. (예전에는 이 모델을 ‘면도기는 무료로 증정하고, 면도날을 팔아라’라고 표현하기도 했는데, 오픈소스와 서비스 사이의 결합이 면도기와 면도날의 비유만큼 밀착되어 있는 것은 아니다.)

이 모델은 1989년에 창업한 최초의 오픈소스 기업 시그너스 솔루션즈`Cygnus Solutions` 가 처음 사용했다.[^4-41] 당시의 GNU 개발 도구들은 여러 아키텍처에서 사용할 수 있는 공용 개발 환경을 제공했지만 각각의 도구를 다른 플랫폼에서 실행하려면 별개의 프로그램 패치와 설정 과정이 필요했다. 시그너스 솔루션즈는 GNU 도구들을 수정하고 빌드 과정을 통합하는 설정 스크립트를 만든 후에(요리법), 이 제품들과 지원 서비스를 판매했다(식당 개업). GPL에 따라 고객들은 소프트웨어를 자유롭게 사용하고 배포하며 수정할 수 있었다. 그러나 서비스 계약보다 많은 수의 사용자가 서비스를 받을 경우에는 보다 높은 요금을 받거나 서비스를 종료할 수 있었다(추가 인원은 샐러드 바 무료 이용 금지).

[^4-41]: 역자주 『오픈 소스 Vol. I, 한빛미디어, 2013년, ISBN: 9788968486449』의 5장 「시그너스 솔루션즈의 미래」에서 시그너스 솔루션즈의 성공 이야기를 자세히 참고할 수 있다.


이것은 레드햇과 다른 리눅스 배포업체들이 취하고 있는 방법이기도 하다. 이들이 실제로 팔고 있는 것은 소프트웨어 그 자체가 아니라 같은 상표를 달고 있는 다른 운영체제들과의 완전한 호환성과, 상품성이 (명시적은 아니지만) 보증된 동작 가능한 운영체제를 구성하고 검증함으로써 더해진 가치다. 그들의 가치 제안에는 무료 설치 지원과 지원 계속 계약 옵션 등이 포함된다.

오픈소스의 시장 구축 효과는, 특히 처음부터 본질적으로 서비스를 제공하는 입장에 있을 수밖에 없는 회사에 매우 강력할 수 있다. 최근의 한 교훈적인 예는 1998년에 창업한, 복잡한 데이터베이스와 트랜잭션 사이트를 전문으로 취급하는 웹 사이트 디자인 회사 [디지털 크리에이션즈](http://www.perlfoundation.org/artistic_license_2_0)`Digital Creations`다. 이 회사의 핵심 지식재산인 객체 출판 도구는 여러 형태와 이름을 거쳐왔지만 지금은 조프`Zope: Z Object Publishing Environment`로 불리고 있다.

디지털 크리에이션즈의 경영진이 벤처투자회사를 찾고 있을 때 그들과 연결된 투자회사는 인력과 도구 그리고 예상 틈새 시장을 면밀히 검토한 뒤에 조프를 오픈소스로 만들도록 권했다.

전통적인 소프트웨어 산업의 기준에서 보면 이는 완전히 미친 짓과 같다. 조프와 같은 핵심 지식재산은 어떤 상황에서도 무료로 공개해서는 안 되는 회사의 황금알이라는 것이 경영대학원에서 배울 수 있는 종래의 지혜다. 그러나 벤처투자회사는 2개의 연관된 통찰이 있었다. 첫 번째는 조프의 진정한 핵심 자산은 사실 직원들의 두뇌와 기술이라는 것이고, 두 번째는 조프를 비밀병기가 아닌 시장을 만드는 도구로 사용할 때 더 큰 가치를 창출할 수 있다는 것이다.

다음 2개의 시나리오를 비교해보자. 종래의 시나리오에서 조프는 디지털 크리에이션즈의 비밀 병기로 남는다. 이를 매우 효과적인 방법이라고 단정해보자. 결과적으로 회사는 짧은 일정에도 매우 우수한 품질을 제공할 수 있지만 누구도 이 사실을 모른다. 물론 고객을 만족시키는 것은 쉽겠지만, 초기에는 고객층을 만드는 것이 힘들 것이다.

벤처투자회사는 이 방법 대신 조프를 오픈소스로 공개하면 디지털 크리에이션즈의 진정한 자산인 사람을 홍보하는 데 결정적인 역할을 할 것으로 내다봤다. 조프를 평가할 고객들이 자체적으로 조프 기술을 개발하는 것보다 디지털 크리에이션즈의 전문가를 쓰는 편이 더 효율적이라고 판단하리라 예상한 것이다.

조프의 중역 중 한 명은 디지털 크리에이션즈의 오픈소스 전략이 다른 방법으로는 불가능했을 많은 기회를 만들어 주었다고 공공연하게 말한다. 잠재 고객은 상황 논리에 확실히 반응하기 때문에 디지털 크리에이션즈는 이 논리에 따라 번창하고 있다.[^4-42]

[^4-42]: 역자주 오픈소스 조프의 개발과 배포는 공동체 사이트를 통해 이루어지며, 디지털 크리에이션즈는 2001년 7월 23일 이름을 조프 코포레이션(Zope Corporation)으로 바꾼 뒤 현재까지 이어지고 있다. 본문의 내용은 <http://lwn.net/1998/1203/digicool.php3>에서 좀 더 자세히 참고할 수 있다.

또 하나의 가장 최근 사례로 [e-smith](http://web.archive.org/web/20001018091528/http://www.e-smith.net/)를 들 수 있다. 이 회사는 리눅스를 인터넷 서버 소프트웨어로 맞춤변경해 지원 계약과 함께 판매한다. 회사의 중역 중 한 사람은 e-smith 소프트웨어의 무료 내려받기 수가 느는 것에 대해 “[많은 회사가 이를 불법복제로 생각하지만, 우리는 무료 마케팅이라고 생각한다](http://web.archive.org/web/20030628201057/http:/www.globetechnology.com/archive/gam/News/19990625/BAND.html)”고 말한다.[^4-43]

[^4-43]: 역자주 e-smith은 이메일 서버와 웹 서버, 방화벽 등이 통합된 리눅스 기반 인터넷 서버 소프트웨어를 CD-ROM에 담아 매뉴얼과 1년간의 지원 계약과 함께 400달러(1999년 당시 화폐가치 약 48만원, 통계청이 발표하는 연도별 소비자물가상승률을 고려한 2013년 화폐가치 약 72만원)에 판매했다. 지원 계약 없이 소프트웨어만 홈페이지에서 무료로 내려받을 수도 있었는데 본문의 내용은 이와 관련한 것이다. e-smith의 사업 방식은 레드햇 등의 리눅스 배포업체와 같은 형태지만 소규모 사업체를 대상으로 서버 소프트웨어에 특화한 것이었다. e-smith은 2001년 7월 11일 미텔(Mitel Networks)에 인수·합병됐으며, 소프트웨어는 SME(Small to Medium Enterprise) 서버란 이름으로 사용자 공동체에 의해 현재까지 이어지고 있다.

### 4. 관련 상품 판매

이 모델은 오픈소스 소프트웨어와 관련된 물품을 판매하는 것이다. 여기에는 머그컵과 T-셔츠 같은 단순 상품에서부터 전문적으로 편집된 문서 등의 고급 상품이 있다.[^4-44]

[^4-44]: 역자주 대표적인 예로 비영리 목적인 <http://shop.fsf.org/category/gnu-gear/>와 영리 목적인 <http://www.cafepress.com/+linux+gifts/> 등이 있다. <역자주 16>에서 설명한 긱넷(과거의 VA 리눅스 시스템즈)도 <http://www.thinkgeek.com/>에서 현재 이러한 형태의 사업을 한다. LPIC(Linux Professional Institute Certification)나 리눅스 마스터와 같은 리눅스 기술 자격 인증 사업도 이 유형에 해당한다.

탁월한 내용의 오픈소스 소프트웨어 관련 도서를 많이 출간하는 오라일리 출판사가 좋은 예다.[^4-45] 오라일리는 출판 시장에서 평판을 얻는 방법으로 래리 월`Larry Wall`이나 브라이언 벨렌도르프`Brian Behlendorf` 같은 저명한 오픈소스 해커들을 실제로 고용해 지원하고 있다.

[^4-45]: 역자주 1978년에 창업한 오라일리(O'Reilly & Associates) 출판사는 사업 영역을 확장하면서 2004년 4월 26일 회사 이름을 오라일리 미디어(O'Reilly Media)로 변경했다.

### 5. 미래는 무료로, 현재를 판매하라

이 모델은 소프트웨어 바이너리를 소스 코드와 함께 폐쇄 이용허락으로 출시하지만, 폐쇄 규정에 유효기간을 설정하는 것이다. 예를 들면, 무료 재배포를 허용하되 상업적 이용에는 요금을 부과하면서 소프트웨어가 출시된 지 1년이 경과한 시점이나 공급업체가 사업을 그만두면 GPL이 적용되도록 이용허락을 만드는 것이다.

이 모델에서 고객은 자신의 요구에 맞는 맞춤변경을 확신할 수 있다. 왜냐하면 소스 코드를 가질 수 있기 때문이다. 이러한 제품은 회사가 없어져도 이용허락을 통해 오픈소스 공동체가 해당 제품을 넘겨받을 수 있기 때문에 미래 보장 효과가 있다.

제품의 가격과 수량에는 이러한 고객의 기대가 반영되기 때문에 회사는 폐쇄소스 이용허락만으로 제품을 출시할 때와 비교해 증대된 매출을 얻을 수 있다. 더욱이 유효기간이 지난 코드는 GPL이 적용되기 때문에 면밀한 동료검토와 오류 수정, 작은 기능 추가 등이 가능해져 원저작자는 75%의 유지보수 부담 중 일부를 덜게 된다.

이 모델은 포스트스크립트`PostScript`가 지원되지 않는 프린터에서 이를 인쇄할 수 있게 해주는 인터프리터인 고스트스크립트`Ghostscript` 프로그램을 만드는 알라딘 엔터프라이즈`Aladdin Enterprises`가 성공적으로 채택하고 있는 방법이다.[^4-46]

[^4-46]: 역자주 1986년에 처음 만들어진 고스트스크립트의 개발과 배포는 2007년부터 소유권을 넘겨받은 아티펙스 소프트웨어(Artifex Software)가 맡고 있다. 현재의 고스트스크립트는 GPL과 AGPL, 사유 소프트웨어 3개 판이 병존하는데, 이것이 가능한 이유는 프로그램 저작권자가 하나의 소프트웨어에 복수의 이용허락을 설정했기 때문이다. 즉, 상업 목적이 아닐 때는 GPL이나 AGPL로 누구나 자유롭게 사용할 수 있지만 상업 목적의 경우에는 폐쇄소스 조항이 적용돼 사용료를 내야만 사용할 수 있다. 이러한 형태를 흔히 이중 이용허락(dual license)이라고 하는데, 자세한 내용은 관련 글인 「이중 라이센스: 오픈소스 상업화 실험」에서 참고할 수 있다.

그러나 이 모델이 가진 큰 문제점은 시기상 제품 수명주기 초반에 가장 필요한 동 료검토와 참여를 폐쇄 규정이 가로막는다는 데 있다.

### 6. 소프트웨어는 무료로, 상표를 판매하라

이것은 이론적인 사업 모델이다. 소프트웨어 기술을 오픈소스로 만든 뒤에 테스트 도구나 호환성 기준 설정권을 보유한다. 그런 다음 기술의 구현물이 같은 상표를 붙인 다른 제품들과 호환된다는 인증이 필요한 이용자에게 상표 인증을 판매한다.  (이것은 썬 마이크로시스템즈가 앞으로 자바와 지니에 적용해야 할 방법이다.)

(이 글이 발표된 이후인 2000년 7월에 썬은 스타오피스를 오픈소스로 만든다고 발표했는데, 썬의 유효성 검사를 통과한 코드 기반의 개발 상품에 스타오피스 상표 이용을 판매한다고 밝혔다.[^4-47])

[^4-47]: 역자주 썬 마이크로시스템즈는 MS의 오피스 사업을 견제하려는 목적으로 1999년 8월 31일 스타오피스(StarOffice)를 개발한 스타디비전(StarDivision)을 인수·합병한 뒤에 이름을 오픈오피스(OpenOffice)로 바꿔 오픈소스로 공개했다. 오픈오피스는 오픈소스와 썬이 자체적으로 유지하던 사유 소프트웨어 2개 판이 병존했다. 2009년 4월 20일 74억 달러(2009년 화폐가치 약 9조4천억 원, 2013년 화폐가치 약 10조 원)의 금액으로 오라클이 썬을 인수·합병한 뒤에 오라클의 오픈오피스 정책과 지원이 공동체의 뜻과 어긋나는 방향으로 흘러가자 다수의 개발자가 프로젝트를 분기해 2010년 9월 28일부터 리브레오피스(LibreOffice)를 개발해 배포 중이다. 그 후 개발 동력을 상실한 오라클은 오픈오피스의 개발과 지원을 중단하고 2011년 6월 1일 프로그램 코드와 저작권을 아파치 소프트웨어 재단(Apache Software Foundation)으로 넘겨 개발이 이어지고 있다.

### 7. 소프트웨어는 무료로, 콘텐츠를 판매하라

이 또한 이론적인 사업 모델이다. 주식 시세 정보 구독과 같은 서비스를 한번 생각해보자. 서비스의 가치는 클라이언트나 서버 소프트웨어에 있는 것이 아니라 객관적으로 신뢰할 수 있는 정보를 제공하는 데 있다. 따라서 소프트웨어는 모두 오픈소스로 만들고 콘텐츠 구독 상품을 판매하면 된다. 해커들이 클라이언트 소프트웨어를 새로운 플랫폼으로 이식하고 다양한 방식으로 발전시키면, 시장 또한 자동으로 확대된다. (이것이 AOL이 클라이언트 소프트웨어를 오픈소스로 만들어야 하는 이유다.)

## 공개할 때와 폐쇄할 때

오픈소스 소프트웨어 개발을 지원하는 사업 모델을 검토해 보았기 때문에 이제 소스 코드를 언제 공개하고 또한 언제 폐쇄하는 것이 경제적으로 타당한지에 대한 일반적인 질문에 다가설 수 있다. 먼저 각각의 전략이 가진 이익이 무엇인지 명확히 알아야 한다.


### 1. 무엇이 이익인가?

폐쇄소스 방식은 비밀 코드에서 이용허락 수익을 거둘 수 있게 해준다.[^4-48] 반면에 충실하고 독립적인 동료검토 가능성이 배제된다. 오픈소스 방식에서는 독립적인 동료평가가 가능하지만 비밀 코드를 통한 이용허락 수익을 가질 수 없다.

[^4-48]: 역자주 일반적인 상거래로 물건을 구입하면 해당 물건에 대한 소유권이 이전되지만, 소프트웨어의 이용허락(license)은 저작권자가 소유권을 그대로 유지하면서 단지 이용만을 허락해 주는 형태다. 이 때문에 자신이 구입한 소프트웨어라 하더라도 인터넷 등을 통해 다른 사람이 내려받을(download) 수 있게 하면 저작권자의 저작권, 즉 소유권을 침해하는 것이 된다. 법률적으로 볼 때, 영화 DVD를 구매해도 영화 자체에 대한 소유권을 넘겨받는 것이 아닌 것과 같다. 단지 영화를 이용(감상)할 수 있을 뿐이다. 따라서 폐쇄소스 소프트웨어를 판매해 수익을 얻는다는 것은, 보다 정확하게 말하면 제3자에게 소프트웨어의 이용을 허락하고 이용요금을 받는 것이다. 구입한 영화 DVD를 복제하면 저작권 침해가 성립한다. 마찬가지로 돈을 주고 구입한 소프트웨어를 복제하는 것도 저작권 침해가 된다. 그러나 현실적인 이유들을 고려해 저작권법은 비영리적인 개인 용도의 제한된 복제를 ‘사적 이용(personal use)’라는 이름으로 허용한다(저작권법 제30조 참고). 이 글에서는 폐쇄소스의 요금 수익, 즉 라이선스를 통한 수익을 이용허락 수익이라고 표현한다.

비밀 코드가 주는 이점은 쉽게 이해할 수 있으며 소프트웨어 사업 모델은 전통적으로 이용허락 수익을 중심으로 만들어져 왔다. 독립적인 동료검토가 주는 이점은 최근까지 충분히 이해되지 못했는데, 인터넷 핵심 소프트웨어와 다른 공학 분야의 역사를 통해 이미 수년 전에 알아야 했을 교훈을 리눅스가 크게 일깨워 주었다. 그것은 오픈소스의 동료검토가 높은 안정성과 품질을 달성할 수 있는 확장 가능한 유일한 방법이라는 것이다.

그렇기 때문에 오픈소스를 이용해 소프트웨어 관련 서비스와 부가가치 및 부수 시장에서 매출원을 유지할 방법을 찾은 소프트웨어 제작자는 경쟁 시장에서 높은 안정성과 품질을 추구하는 고객으로부터 보상받게 될 것이다. 이런 현상은 리눅스의 경이로운 성장 뒤에 있는 것이기도 하다. 1996년에 어디선지 모르게 나타난 리눅스가 2000년 중반에는 기업 서버 시장에서 2번째로 인기 있는 운영체제가 되었다.  (2000년 후반에는 마이크로소프트의 점유율을 실제로 넘어섰다는 조사도 있다.) 1999년 초에 IT 시장조사 전문기관 IDC`International Data Corporation`는 리눅스가 2003년까지 다른 모든 운영체제를 합한 것보다 빠르게 성장할 것으로 예측했는데, 이는 아직까지 유효하다.[^4-49]

[^4-49]: 역자주 이 글은 1999년에 쓰여지고 2002년 8월에 마지막으로 갱신되었다. 2013년 8월 IDC 조사 자료는 <http://www.idc.com/getdoc.jsp?containerId=prUS24285213>에서 참고할 수 있다.

동료검토 못지 않은 오픈소스의 또 다른 이점은 공개 표준을 확산하고 이와 관련된 시장을 만들 수 있는 수단으로서의 유용성이다. 인터넷의 극적인 성장은 아무도 TCP/IP를 소유하지 않는다는데 크게 기인한다. 누구도 핵심적인 인터넷 프로토콜을 독점할 수 없다.

TCP/IP와 리눅스의 성공 배경에 있는 네트워크 효과는 매우 명확한 것이며 궁극적으로 신뢰성과 대칭성 문제로 환원된다.[^4-50] 공유 인프라가 어떻게 동작하는지 속속들이 알 수 있다면 잠재적 당사자는 공유 인프라를 더욱 합리적으로 신뢰할 수 있을 것이다. 또한 하나의 당사자가 수익을 얻거나 통제력을 행사하는 특권적 지위를 갖기보다 모든 당사자가 동등한 대칭적 권리를 갖는 인프라를 선호할 것이다.

[^4-50]: 역자주 한 상품을 사용하는 사람이 많아질수록 모두의 효용과 편익이 증가하고 서로에게 영향을 미치는 상호의존성 또한 커지는 현상을 네트워크 효과(network effect)라고 한다. 생산자 측면에서는 생산 규모가 늘어나면 비용은 낮아지고 수익은 높아지는 수확체증이 나타나는데, 소비자 측면에서 이러한 규모의 경제가 나타난 것이 네트워크 효과라 할 수 있다. 따라서 네트워크의 규모(특정 시장의 참여자수 또는 소비자수)가 커질수록 수확체증으로 인해 네트워크의 가치가 높아지며 네트워크 효과 역시 더욱 커진다. 이 글이 쓰여진 당시의 폭발적인 리눅스 성장세를 생각하면 ‘변화의 흐름은 마치 달리는 말과 같아서 이미 달리고 있는 방향으로 편승하는 것이 용이하다’는 존 나이스빗(John Naisbitt)의 말을, 오픈소스를 선택해 커지고 있는 네트워크 효과를 최대로 이용하라는 뜻으로 해석할 수 있다(『메가트렌스, 존 네이스비트, 장상용, 홍성범 함께 옮김, 고려원, 1988년』). 네트워크 효과는 규모를 조건으로 하기 때문에 참여자 사이의 수직적 관계(권력관계)에서는 동등성(대칭성)이 문제가 되고, 수평적 관계(협력관계)에서는 신뢰성이 문제가 된다. 기본적으로 수직 관계와 수평 관계가 균형을 이루며 확장되는 것이 최적의 네트워크 상태라 할 수 있다.

그러나 대칭성 문제가 소프트웨어 소비자에게 영향을 미치려면 네트워크 효과가 자리 잡혀 있어야만 한다고 생각할 필요는 없다. 왜냐하면 이성적으로 판단할 때 허용할 만한 품질을 가진 오픈소스 대체물이 있음에도 불구하고 폐쇄소스에 의존해 공급자가 통제하는 독점 안에 갇히는 선택을 할 소프트웨어 소비자는 없을 것이기 때문이다. 이러한 주장은 소프트웨어가 소비자의 사업에 보다 중요한 것일수록 더욱 힘을 얻는다. 사업에 더 중대한 것일수록 소프트웨어가 외부자에게 통제되는 것을 참을 수 없게 된다.

비대칭 문제도 있다. 경제학자들은 일반적으로 정보 비대칭이 시장의 작동을 저하시킨다고 생각한다. 더 좋은 상품을 생산하는 데 투자하는 것보다 기밀 정보를 이용한 수익이 더 높다면 우량 상품은 축출당한다. 소프트웨어뿐 아니라 일반적으로 모든 분야에서 비밀주의는 품질의 적이다.

마지막으로, 신뢰성 문제와 관련한 오픈소스 소프트웨어의 중요한 소비자 이익은 미래 보장 효과다. 소스 코드가 공개되어 있으면 공급자가 파산하더라도 고객은 어느 정도 대안을 가질 수 있다. 하드웨어 제품은 짧은 수명주기를 갖는 경향이 있기 때문에 미래 보장 효과는 ‘하드웨어에 매력 더하기’ 모델에서 특히 중요할 수 있다. 그러나 이 효과는 보다 일반적인 것이며, 모든 종류의 오픈소스 소프트웨어에 대한 증가된 가치로 나타난다.

### 2. 어떻게 상호 작용하는가?

비밀 코드의 이용허락 수익이 오픈소스의 수익보다 크다면 폐쇄소스가 경제적으로 합당하다. 반대로 오픈소스의 수익이 비밀 코드의 이용허락 수익보다 클 경우에는 오픈소스가 경제적으로 합당하다.

이는 그 자체로는 별로 대단한 말이 아니다. 그러나 오픈소스에서 얻는 수익이 비밀 코드의 이용허락 수익보다 측정과 예측이 어렵다는 것을 인식할 경우에는 결코 사소한 것이 아니게 된다. 이것은 수익이 전체적으로 과대평가되기보다 과소평가 되고 있다는 것을 말하는데, 실제로 1998년 초반에 모질라 소스가 공개되고 주류 업계가 기존의 입장을 재고하기 시작하기 전까지 오픈소스의 수익은 부정확하지만 매우 일반적으로 0으로 추정됐다.

그렇다면 오픈소스에서 얻는 수익을 어떻게 산정할 수 있을까? 이것은 일반적으로 어려운 질문이지만 다른 예측 가능한 문제들처럼 접근해 볼 수 있다. 먼저 오픈소스 접근 방식이 성공하거나 실패한 사례를 관찰해 이익을 극대화하려고 노력한 기업이나 투자자에게 적어도 오픈소스가 실제로 성공을 가져다 주었다는 질적인 느낌을 주는 모델을 만들어 일반화시켜보자. 그 뒤에 관찰 사례를 다시 살펴보며 해당 모델을 다듬어보자.

「성당과 시장」에서 (가) 신뢰성/안정성/확장성이 핵심인 분야와 (나) 설계와 구현의 정확성이 독립적인 동료검토 이외의 방법으로는 쉽게 검증될 수 없는 분야에서 오픈소스의 높은 수익을 기대할 수 있다고 분석한 바 있다. (두 번째 기준은 조금이라도 복잡한 대부분의 프로그램 실무에 부합된다.)

독점 공급자에게 종속되지 않으려는 소비자의 합리적인 욕구는 소프트웨어가 소비자에게 더 중요해질수록 오픈소스에 대한 관심을 증가시킨다. (그리고 이러한 이유 때문에 오픈소스로 가는 공급자의 경쟁 시장에서의 가치는 높아진다.) 이에 따라서 또 다른 기준이 만들어 지는데, (다) (많은 기업의 MIS 부서에서 사용하는 것과 같이) 소프트웨어가 사업의 핵심 자본재일 때, 오픈소스로의 압력이 높아진다.

오픈소스 인프라는 애플리케이션 영역에서 시간이 흐름에 따라 더 많은 소비자를 유인하고 폐쇄소스 인프라를 압도하는 신뢰와 대칭 효과를 만든다는 것을 이미 살펴보았다. 그리고 급성장하는 시장에서 작은 부분을 차지하는 것이 폐쇄되고 정체된 시장의 큰 부분을 차지하는 것보다 대개 더 낫다. 따라서 인프라 소프트웨어 분야에서는 지식재산 이용허락으로 승부하는 폐쇄소스보다 어디에나 존재하는 편재성으로 승부하는 오픈소스가 장기적인 수익 면에서 더 좋을 수 있다.

사실 잠재적인 소비자가 공급자 전략의 미래 결과를 추론해 공급 독점을 받아들이지 않는 데는 큰 제약이 있다. 따라서 이미 압도적인 시장 지배력을 가진 회사가 아니라면 오픈소스의 편재성 수익과 폐쇄소스의 직접 수익 중 한 가지만 선택할 수 있을 뿐 2가지 모두를 취할 수는 없다. (이러한 원리는 다른 분야에서도 볼 수 있는데, 예를 들어 전자 제품 시장에서 소비자는 흔히 하나의 공급자밖에 없는 제품은 구매하지 않는다.) 조금 덜 부정적인 표현을 쓴다면 네트워크 효과(긍정적인 네트워크 외부효과)가 지배적인 상황에서는 오픈소스가 옳은 선택일 수 있다.[^4-51]

[^4-51]: 역자주 오픈소스와 네트워크 효과를 이용해 사실상 시장을 장악한 예로 한국의 메신저 프로그램 카카오톡(KakaoTalk)을 들 수 있다. 카카오톡은 무료 배포를 통해 사용자 네트워크를 키운 뒤에 프로그램 자체를 아이템이나 게임, 광고 등의 상거래 플랫폼으로 활용한 사업 모델이다. 이것은 본문에 제시된 여러 사업 모델들이 새롭게 혼합된 형태다. 네트워크 외부효과와 플랫폼의 특성에 대해 『인터넷 그 길을 묻다, 한국정보법학회, 중앙북스, 2012년, ISBN: 9788927803737』의 내용을 인용하면 다음과 같다. 「비즈니스 모델로서 플랫폼 모델은 자신이 스스로 플랫폼이 됨으로써 플랫폼으로서의 지위를 비즈니스에 투영하려는 모델이라고 이해된다. 플랫폼이 됨으로써 가질 수 있는 비즈니스 측면에서의 장점은 다음과 같다. 플랫폼의 지위에 있게 되면, 관련 생태계를 자신을 중심으로 형성할 수 있으므로 플랫폼으로서의 지위를 유지하는 한, 플랫폼 사업자는 이익의 선순환 구조를 만들 수 있다. 다시 말해 플랫폼을 사용하는 사업자들은 자신의 이익과 플랫폼의 이익이 일치하는 구조가 되므로, 자신들의 이익을 위해 플랫폼을 더 많이 사용하고, 플랫폼이 제공하는 표준을 사용해 프로그램을 개발하게 되므로 다시 플랫폼의 사용이 활발하게 되는 구조를 가지게 되는 것이다. IT 산업은 네트워크 외부성(network externality)이 있으며, 네트워크의 외부성에 의해 일단 네트워크가 확장되기 시작하면 확장속도는 점차 빨라진다. 이런 점에서 인터넷 비즈니스의 핵심은 누가 플랫폼을 장악하는가에 있다 해도 과언이 아니라고 본다. 그러므로 플랫폼 사업을 시작하려는 순간 생존을 위해 반드시 자신의 플랫폼을 중심으로 하는 생태계(eco-system)를 조성해야 하며, 조성된 생태계에 활력을 부여하기 위해 노력하게 된다. 플랫폼의 경제학은 기본적으로 경쟁의 구조를 기존의 기업과 기업의 경쟁에서 플랫폼 간의 경쟁으로 바꾸고 있다고 설명할 수 있다.(‘인터넷 생태계에 있어 플랫폼 모델이 갖는 의미 및 관련 이슈’, 최승재, 218페이지)」

이러한 논리는 (라) 일반적인 컴퓨팅과 통신 인프라를 확립하거나 가능케 하는 소프트웨어에서는 폐쇄소스보다 오픈소스가 더 큰 수익을 만드는 데 가장 성공적일 수 있다고 정리할 수 있다.

마지막으로 독특하거나 매우 차별화된 서비스를 제공하는 업체는 널리 알려진 핵심 알고리즘과 기술 자료로 서비스를 제공하는 업체보다 경쟁자에 의한 모방의 두려움이 더 크다. 따라서 (마) 핵심 방법이 (또는 기능적으로 동등한 것이) 일반적인 공학 지식의 일부일 때 오픈소스는 더 지배적이 될 수 있다.

인터넷 핵심 소프트웨어인 아파치와 리눅스의 표준 유닉스 API 구현은 위의 5가지 기준 모두에 대한 가장 좋은 모범이다. 오픈소스로 향한 시장의 진화 방향은 데이터 네트워킹이 DECnet, XNS, IPX와 같은 폐쇄 프로토콜을 이용한 15년 간의 제국 건설 시도 실패 후에 1990년대 중반 TCP/IP로 다시 집중된 것을 보면 잘 알 수 있다.[^4-52]

[^4-52]: 역자주 DECnet(Digital Equipment Corporation NETwork, 디지털이 만든 네트워크 프로토콜 이름), XNS(Xerox Network Systems, 제록스가 만든 네트워크 프로토콜 이름), IPX(Internetwork Packet eXchange, 노벨이 만든 네트워크 프로토콜 이름).

이와 반대로 가치를 창출하는 소프트웨어 기술이 오류에 비교적 민감하지 않고((가)의 반대), 독립적인 동료검토 이외의 방법으로 쉽게 검증할 수 있으며((나)의 반대), 사업에 결정적인 것도 아니며((다)의 반대), 네트워크 효과나 편재성에 의해 가치가 본질적으로 증가되지 않는 형태면서((라)의 반대), 그 기술을 유일하게 소유하고 있는((마)의 반대) 회사에는 오픈소스가 거의 의미가 없다고 할 수 있다.

이러한 극단적인 경우의 한 예로, 1999년 초에 목재소용 패턴 계산 소프트웨어 제작사가 내게 오픈소스로 가야 하냐고 문의한 일이 있다. 이 소프트웨어는 통나무에서 최대한 많은 수의 널빤지를 잘라낼 수 있는 재단 패턴을 만드는 것이었는데 내 결론은 반대였다. 이 경우에 그나마 적용할 수 있는 기준은 (다) 하나인데 위기 상황이라면 숙련공이 손으로 재단 패턴을 직접 그릴 수 있다.

만약 패턴 계산 소프트웨어를 목재소 장비 제조업체가 만들었다면 내 대답이 달라졌을 것에 유의해야 한다. 이 경우에는 소스 공개가 회사가 판매하는 관련 하드웨어 제품의 가치를 증가시켰을 것이다. 또한 (아마도 다른 목재소 장비 제조업체에서 만든 것이었겠지만) 오픈소스로 이용할 수 있는 패턴 계산 소프트웨어가 이미 존재했다면, 가격보다는 맞춤변경이나 그 밖의 특징에 대한 오픈소스의 이점을 소비자가 파악하게 됨으로써 폐쇄소스가 이와 경쟁하는데 어려움이 있었을 것이다.

중요한 점은 특정한 상품이나 기술이 어느 분야에 있느냐에 따라 이러한 기준들이 시간에 따라 변할 수 있다는 점이다. 이에 대해서는 뒤에서 둠의 사례로 살펴볼 것이다.

요약하면 오픈소스를 추진할 차별화 요인은 다음과 같다.

1. 신뢰성/안정성/확장성이 결정적인지 여부
1. 설계와 구현의 정확성이 독립적인 동료검토 이외의 방법으로 쉽게 검증될 수 있는지 여부
1. 소프트웨어가 사업을 제어하는 데 결정적인 역할을 하는지 여부
1. 소프트웨어가 일반적인 컴퓨팅과 통신 인프라를 확립하거나 가능케 하는지 여부
1. 핵심 방법이 (또는 기능적으로 동등한 것이) 일반적인 공학 지식의 일부인지 여부

### 3. 사례 연구: 둠

이드 소프트웨어`id Software`[^4-53]의 베스트셀러 게임 둠`Doom`의 역사는 시장의 압력과 제품의 발전이 폐쇄소스와 오픈소스 사이의 수익 규모를 극적으로 바꾼 방식을 잘 보여준다.

[^4-53]: 역자주 이드 소프트웨어의 이름인 id는 사업 초기에는 ‘Ideas from the Deep’의 약자였지만 뒤에 프로이트 심리학에서 인간의 3개 심리 기층을 말하는 원초아(id), 자아(ego), 초자아(superego) 중 원초아를 가리키는 말로 그 의미를 바꿨기 때문에 소문자 id로 쓰고 이드로 발음하는 것이 옳다. 이 글이 쓰여진 당시에는 한국에서 ‘아이디 소프트웨어’라는 회사 이름으로 제품의 상표를 등록했고, 2013년에도 같은 이름으로 등록을 갱신했기 때문에 이 글의 표기 기준으로는 ‘아이디 소프트웨어’로 써야 한다. 그러나 이는 서류상의 문제일 뿐이고, 이 회사가 실제로 사용하는 이름은 ‘이드’이기 때문에 여기서는 ‘이드 소프트웨어’로 표기한다.

1993년 말에 처음 출시된 둠의 1인칭 및 실시간 애니메이션 특성은 이 제품을 완전히 유일무이한 것으로 만들었다(기준 (마)의 반대). 전작 울펜슈타인 3D`Wolfenstein 3D`의 평면 애니메이션을 크게 넘어선 기술의 시각적 충격도 대단했지만 수개월 동안 그 누구도 당시의 저성능 마이크로프로세서에서 그것을 어떻게 구현했는지 알 수 없었다. 이러한 비밀 코드는 매우 큰 수익 가치가 있었다. 게다가 오픈소스로 전환했을 때의 잠재 수익도 매우 낮았다. 1인용 게임이었던 둠은 오류가 발생해도 허용할 만한 낮은 비용이 발생하고((가)의 반대), 검증하기 극도로 어려운 소프트웨어도 아니며((나)의 반대), 어떤 소비자의 사업에도 핵심적인 것이 아니고((다)의 반대), 네트워크 효과로부터 오는 수익도 없었다((라)의 반대). 따라서 둠은 폐쇄소스가 되는 것이 경제적으로 합리적이었다.

그러나 둠을 둘러싼 시장은 가만 있지 않았다. 경쟁 후보들은 둠의 애니메이션 기술과 기능적으로 동등한 것들을 만들어 냈고, 듀크 뉴켐`Duke Nukem` 같은 또 다른 1인칭 슈팅 게임도 등장했다. 이런 게임들이 둠의 시장을 잠식해 가면서 비밀 코드에서 오는 수익 가치는 감소해 갔다.

한편, 시장 점유를 확대하려는 노력은 더 높은 안정성과 더 많은 게임 기능, 더 넓은 사용자 기반, 그리고 멀티 플랫폼과 같은 새로운 기술적 도전을 불러왔다. 다인용 사투 경기`death-match play` 기능과 온라인 둠 게임 서비스의 등장과 함께 시장은 상당한 네트워크 효과를 보이기 시작했다. 이 모든 것에는 추가적인 개발 시간이 요구됐지만, 이드 소프트웨어는 후속 게임 개발에 시간을 쏟고 싶었다.

둠을 처음 출시했을 때부터 이드 소프트웨어는 게임을 위해 (사용자 모드나 맵 등의) 데이터 파일을 만들려는 사람에게 도움이 되는 기술명세의 출판에 호의를 가졌으며, 때로는 특정 질문에 답하거나 보유하던 기술명세 문서를 출판하는 방식으로 해커들과 직접 협력했고 새로운 둠 자료의 인터넷 배포 또한 권장했다.

기술과 시장의 추세는 소스 공개를 통한 수익 확대로 가고 있었다. 또한 둠의 기술 명세 공개와 독립 소프트웨어 개발업체`third-party`의 추가기능`add-ons` 출시 장려는 게임의 인식 가치를 높이며 이용할 수 있는 2차 시장을 만들어냈다. 어느 시점에 이르러서는 수익 곡선이 교차되어 둠의 소스를 공개하고 (게임 시나리오 선집 등의 제품으로) 2차 시장에서 수익을 내는 것이 경제적으로 합리적이게 됐는데, 그로부터 얼마 뒤에 이것이 현실화되었다. 1997년 후반에 둠의 전체 소스 코드가 공개된 것이다.[^4-54]

[^4-54]: 역자주 1997년 12월 23일에 공개된 둠의 소스 코드는 비영리 목적에만 이용을 허락했으나, 1999년 10월 3일에 GNU GPL로 전환되었다. 둠의 소스 코드는 <http://www.doomworld.com/idgames/>에서 내려받을 수 있다.

### 4. 언제 공개할 지 알기

둠의 사례가 흥미로운 것은 둠이 운영체제나 통신, 네트워크 소프트웨어가 아니기 때문이다. 따라서 명확하고 일반적인 오픈소스의 성공 사례와 많이 동떨어져 있다. 그러나 둠의 수명주기는 수익 교차점을 포함하며 동료검토로만 해결할 수 있는 심각한 신뢰성/안정성/확장성 문제를 낳는 통신 및 분산 계산, 그리고 (신뢰성과 대칭성 문제가 모두 포함된) 경쟁 요인과 기술 환경의 경계 모두를 흔히 가로지르는, 오늘 날 코드 생태에서의 애플리케이션 소프트웨어의 전형을 보여준다고 할 수 있다.

둠은 일인용 게임에서 대전용 사투 게임으로 발전되었고, 네트워크 효과는 점점 더 컴퓨터 사용 그 자체가 되고 있다. 비슷한 경향이 ERP 시스템과 같은 가장 비중 있는 기업용 애플리케이션에서도 나타나는데, WWW의 전체 설계 안에 내재된 것이기는 하지만 이는 기업 네트워크가 공급자 및 소비자와 더욱 더 긴밀하게 연결되기 때문이다. 따라서 거의 모든 부문에서 오픈소스의 수익성은 점진적으로 증가하고 있다.

만약 현재의 추세가 계속된다면 다음 세기[^4-55]에 당면할 소프트웨어 기술 및 제품 관리의 핵심 과제는 언제 놓아버려야 할지를 아는 것이다. 즉, 동료검토 효과를 이용하고 서비스와 2차 시장에서 보다 높은 수익을 얻기 위해 폐쇄소스를 언제 오픈소스 인프라로 편입시킬 지를 아는 것이다.

[^4-55]: 역자주 이 글이 쓰여진 때는 20세기인 1999년이기 때문에 당시 시점에서 다음 세기는 2000년과 2001년중 어느 해를 원년으로 삼든 간에 몇 년 뒤를 뜻하는 표현이 된다.

분명한 수익 확보 정책은 어느 방향으로든 수익 교차점을 너무 멀리 잡지 않는 것이다. 그 시점을 넘어서면 너무 오랫동안 기다려야 하는 심각한 기회 위험이 있다. 즉, 같은 틈새 시장 안에서 오픈소스 전략을 사용한 경쟁자에게 뒤쳐질 수 있다.

이것이 심각한 문제인 이유는, 하나의 제품 부문에서는 오픈소스 협력 안으로 끌어들일 수 있는 사용자와 개발자의 수가 모두가 제한적이기 때문이다. 또한 한 곳에 참여하면 다른 곳으로 옮기지 않으려는 경향도 있다. 만약 대부분 동등한 기능을 가진 오픈소스 경쟁 코드를 먼저 공개한 회사와 나중에 공개한 회사가 있다면, 먼저 공개한 쪽은 대부분의 사용자와 최고의 의욕을 가진 동료 개발자 대부분을 유인할 수 있겠지만 후발자는 나머지만을 가지게 될 것이다. 사용자는 친근함에 빠져들고 개발자는 코드 자체에 시간을 투자하기 때문에 일단 참여한 곳에서 떠나지 않는 경향이 있다.

## 전략 무기로서의 오픈소스

때때로 오픈소스는 시장 확대의 수단뿐만 아니라 기업 경쟁에 대비한 전략 기동으로도 효과적일 수 있다. 따라서 이전에 설명한 사업 전술 중 일부를 다음과 같은 각도로 재검토해 보는 것이 유익할 수 있다. 즉, 오픈소스를 직접적인 매출 수단으로 간주하기보다 시장을 뚫고 들어가 이를 재편하는 수단으로 살펴보는 것이다.

### 1. 경쟁 무기로서의 비용 분담

오픈소스 프로젝트에서 비용 분담을 통해 더 좋고 값 싼 인프라를 개발한 예로 아파치를 들었지만, 마이크로소프트의 IIS`Internet Information Server` 웹 서버와 경쟁하는 소프트웨어 및 시스템 공급자에게는 아파치 프로젝트가 경쟁 무기이기도 하다. 마이크로소프트의 거대한 자금과 독점적인 데스크톱 시장 지배력의 이점을 완전히 상쇄하는 것은 어떤 단일 웹 서버 공급자에게도 어렵거나 어쩌면 불가능하다. 그러나 아파치는 프로젝트에 참여하는 각각의 기업에게 과반수 시장 점유율로 소비자를 안심시키면서 기술적으로 IIS보다 우월한 매우 낮은 비용의 웹 서버 제공을 가능케 한다. 이는 (IBM의 웹스피어`WebSphere`의 경우와 같이) 부가가치 전자상거래 제품의 생산비와 시장 지위를 개선한다.

이것은 다음과 같이 일반화된다. 공개되고 공유된 인프라는 참여자에게 두 가지 경쟁 이점을 준다. 하나는 잘 팔리는 제품과 서비스를 만드는 데 필요한 각 참여자당 비용이 낮아지는 것이고 또 하나는 공급자의 전략이나 전술 변경 때문에 고객이 버려진 기술에 빠져 낭패를 당할 가능성이 적다는 안심을 줄 수 있는 시장 지위다.

### 2. 경쟁 초기화

1980년대 오픈소스 X 윈도 시스템 개발에 DEC[^4-56]가 자금을 제공했을 때, DEC의 분명한 목표는 ‘경쟁을 초기화’한다는 것이었다. 당시에는 특히 썬 마이크로시스템즈의 NeWS`Network extensible Window System`를 비롯한 유닉스에서 동작하는 대체 가능한 몇 가지 경쟁 그래픽 환경이 있었다. DEC의 전략가들은 만약 썬이 독점적인 그래픽 표준을 확립하게 된다면 급속히 발전하는 유닉스 워크스테이션 시장을 독차지하게 될 것으로 믿었다. 그래서 X 프로젝트에 자금과 인력을 제공하는 한편 X를 사실상의 표준으로 만들기 위해 군소 업체들과 동맹하는 방법으로 DEC는 더 많은 사내 전문 그래픽 기술을 보유한 다른 경쟁자들과 썬의 이점을 무력화시킬 수 있었다. 이것은 워크스테이션 시장의 경쟁 중심을 DEC의 전통적 강세 분야인 하드웨어 쪽으로 옮기게 했다.

[^4-56]: 역자주 PDP 시리즈 등의 미니컴퓨터 제조회사로 유명한 DEC(Digital Equipment Corporation)는 1998년에 컴팩(Compaq: COMPatibility And Quality)에 인수·합병되었고 컴팩은 2002년 HP(Hewlett-Packard)에 인수·합병되었다. DEC는 일반적으로 ‘디지털’, ‘데크’, ‘디·이·시’ 등으로 발음 및 호칭한다.

이것은 다음과 같이 일반화된다. 오픈소스는 경쟁력 있는 개발에 자금을 혼자 충당하기 힘든 작은 규모의 잠재적 동맹자와 현명한 고객에게 매력적이다. 오픈소스 프로젝트는 적기에 시작하면 폐쇄소스 상대와 성공적으로 경쟁하는 것 이상을 할 수 있다. 폐쇄소스 상대가 시장에서 영향력을 높이지 못하게 실제로 가로막을 수 있으며, 경쟁을 초기화하고 약세인 경쟁 분야를 강세 분야로 옮길 수 있다.

### 3. 연못 넓히기

레드햇 소프트웨어는 리눅스 세계에 표준 바이너리 패키지 설치 관리 프로그램을 선물하기 위해 RPM`Red Hat Package Manager` 개발에 자금을 제공했다. 레드햇은 경쟁자가 이 프로그램을 사용함으로써 잃게 될 지 모를 손실이나 개발 비용보다 잠재 소비자에게 줄 수 있는 높아진 신뢰가 장래 매출에 더 큰 도움이 된다고 확신했다.

때때로 더 큰 개구리가 되는 가장 현명한 방법은 연못을 더욱 빨리 넓히는 것이다. 기술 회사들이 공용 표준(여기서는 오픈소스 소프트웨어를 실행 파일 표준으로 생각하는 것이 유용하다)에 참여하는 것은 당연히 경제적인 이유 때문이다. 이러한 전략은 시장을 만드는 뛰어난 주체가 되는 것 외에도 작은 회사가 표준을 기반으로 한 동맹 바깥에 있는 훨씬 큰 회사의 시장 및 대중 지배력을 초기화하려 할 때 직접적인 경쟁 무기가 될 수 있다. 레드햇의 사례에서 분명하게 알 수 있는 거대 경쟁자는 마이크로소프트다. 대부분의 리눅스 배포판을 포괄하는 RPM 표준화는 마이크로소프트가 먼저 갖고 있던, 윈도우가 설치된 컴퓨터의 손쉬운 시스템 관리의 이점을 무력화하는 데 의미 있는 수단이 되었다.

### 4. 목 조르기 막기[^4-57]

[^4-57]: 역자주 여기서 말하는 ‘목 조르기(choke hold)’의 의미는 경쟁사가 핵심 기술을 통제해 사업에 영향력을 행사하는 것이다.

‘미끼 상품 및 시장지위 견인 상품’ 모델을 설명할 때 네트스케이프가 모질라 브라우저를 오픈소스로 만든 것이 어떻게 마이크로소프트의 HTML 마크업과 HTTP 프로토콜 독점을 효과적으로 막은 (성공적인) 전략이었는지 논한바 있다.

특정 기술을 직접 통제하는 것보다 경쟁자가 해당 기술을 좌우하지 못하게 막는 것이 더 중요할 때가 많다. 오픈소스를 이용해 이러한 가능성을 차단하는 잠재적 동맹의 크기를 월등히 키울 수 있다.

## 오픈소스와 전략적 사업 위험

궁극적으로 오픈소스가 더 널리 사용될 것으로 보이는 이유는 공급자 측면의 효율성보다 고객의 요구와 시장의 압력에 있다. 지배적인 단일 공급자에게 좌우되지 않는 인프라와 안정성에 대한 고객 요구의 결과가 역사적으로 네트워크의 발전 과정에서 어떻게 나타났는가는 이미 공급자의 관점에서 설명한 바 있다. 하지만 오픈소스가 중심 요인이 되는 시장의 고객 행동에 대해서는 아직 이야기할 것이 남아 있다.

잠시 동안 여러분이 IT 인프라를 구축하거나 개량해야 하는 포천 500대 기업 중 한 곳의 최고기술책임자`CTO: Chief Technology Officer`라고 생각해 보자. 아마도 여러분은 전사적으로 사용할 수 있는 네트워크 운영체제를 선택해야 할 것이다. 여러분의 관심사는 하루 24시간, 일주일 내내 운영되는 웹 서비스와 전자상거래일 수도 있고 여러분의 사업은 높은 안정성과 고용량 트랜잭션 데이터베이스 처리에 의존적인 것일 수도 있다.

종래의 폐쇄소스 방법을 따른다고 가정해보자. 이는 독점 공급자가 회사를 좌우할 수 있게 만드는 것이다. 왜냐하면 독점이라는 말의 정의처럼 소프트웨어의 성능 향상과 오류 수정, 그리고 지원을 얻기 위해 찾을 수 있는 곳이 오직 한 곳 밖에 없기 때문이다. 공급자가 해주지 않는다면 초기 투자와 훈련 비용에 사실상 갇혀 있기 때문에 효과적으로 사용할 수 있는 다른 수단이 없다. 공급자는 이 사실을 안다. 이런 상황에서 여러분의 필요와 계획에 따라 소프트웨어가 바뀔 것이라 생각하는가? 아니면 공급자의 필요와 계획에 따라 바뀔 것이라 생각하는가?

회사의 핵심 사업 과정이 (수정은 말할 것도 없고) 내부를 볼 수조차 없는 불투명한 코드 덩어리에 의해 실행된다면, 사업의 통제권을 잃게 된다는 것이 냉혹한 진실이다. 공급자가 여러분을 필요로 하는 것보다 여러분이 공급자를 더 필요로 하게 되고 이러한 힘의 불균형 때문에 여러분은 계속 비용을 지불해야 한다. 더 비싼 비용을 지불하게 되고, 잃어버린 기회에 비용을 지불해야 하며, 시간이 흐르면서 더 악화되는 고착된 것들에 비용을 지불해야 하는데, 이는 (이전의 많은 희생자를 통해 수법을 연마해 온) 공급자가 지배력을 더욱 강화하기 때문이다.

이제 오픈소스 선택과 비교해보자. 오픈소스를 선택하면 소스 코드를 가질 수 있고 누구도 이것을 빼앗아 갈 수 없다. 사업의 목을 죄는 독점 공급자 대신 많은 서비스 회사가 여러분의 공급자가 되기 위해 서로 경쟁한다. 이제 이들 각자와 상대할 수 있을 뿐 아니라 외부 용역에 맡기는 것보다 비용이 더 절감될 것으로 보일 경우에는 회사 내부에 지원 부서를 직접 만드는 선택도 할 수 있다. 시장은 여러분을 위해 움직인다.

논리는 자명하다. 폐쇄소스에 의존하는 것은 사업에서 받아들일 수 없는 전략적 위험이다. 그렇기 때문에 오픈소스 대체물이 있음에도 불구하고 단일 공급자의 폐쇄 소스 제품을 구매하는 것은 실제 선관주의의무 위반이 되어 주주 소송의 정당한 근거로 간주될 날이 멀지 않았다고 나는 믿고 있다.[^4-58]

[^4-58]: 역자주 원어 표현인 fiduciary irresponsibility는 한국의 경우 ‘상법 제382조 선관주의의무 또는 충실의무 위반’ 등으로 해석할 수 있으며, 주식회사의 대표이사 또는 이사가 임무를 저버리고 주주나 채권자에게 손해가 될 행위를 한 경우, 「형법」이나 「특정경제범죄 가중처벌 등에 관한 법률」 위반 등을 함께 고려한 배임죄 처벌의 근거가 된다. 주주소송의 경우, 형사처벌 외에 손해배상 청구도 가능한데 이사회 또는 주주총회의 결의가 있었더라도 손해를 발생시킨 행위가 면책되지는 않는다는 대법원 판례도 있다.(대법원 2005.10.28. 선고 2005도4915 판결)

## 오픈소스의 사업 생태

오픈소스 공동체는 오픈소스의 생산성을 증폭시키는 방식으로 스스로 조직되어 왔다. 특히 리눅스 세계에는 개발자와 구별된 별도의 층을 형성하며 경쟁하는 여러 개의 배포업체가 존재한다는 사실이 경제적으로 볼 때 중요하다.

개발자는 코드를 만들고 인터넷을 통해 이용할 수 있게 한다. 각각의 배포업체는 이용할 수 있는 프로그램 중 일부를 선택해 통합하고 패키지로 만들어 자신의 상표를 붙인다. 그리고 고객에게 판매한다. 고객은 배포판을 선택할 수 있으며, 개발자 사이트에서 프로그램을 직접 내려받아 배포판을 보충할 수 있다.

개발자와 배포업체가 분리된 형태를 통해 얻을 수 있는 효과는 소프트웨어 개량을 위한 매우 유동적인 내부 시장을 형성할 수 있다는 점이다. 개발자들은 배포업체와 일반 사용자의 관심을 끌기 위해 소프트웨어의 품질을 놓고 서로 경쟁하며, 배포업체들은 패키지 선정의 적절함과 소프트웨어에 추가한 부가가치로 소비자의 돈을 놓고 경쟁한다.

이러한 내부 시장 구조가 갖는 1차적 효과는 인터넷의 각 구성 단위가 교체 가능하게 된다는 점이다. 개발자는 사라질 수 있다. 그러나 이 때문에 코드 기반 중 사라진 개발자가 만든 부분이 다른 개발자에 의해 곧바로 이어질 수 없더라도 다른 사람의 주목을 받으려는 경쟁 때문에 기능적으로 동등한 대체 코드가 빨리 생겨난다. 배포업체가 사업에 실패한다고 해도 오픈소스의 공용 코드 기반은 손상되거나 위협받지 않는다. 전체로서의 오픈소스 사업 생태는 폐쇄소스 운영체제를 기반으로한 어떠한 거대 기업이 할 수 있는 것보다 시장의 요구에 더 빨리 반응하며, 충격에 대한 내구력과 회복력도 높다.

또 하나의 중요한 효과는 특화를 통해 간접비를 줄이고 효율성을 높일 수 있다는 점이다. 개발자는 일상적인 타협과 자신을 진흙 구덩이에 빠지게 만드는 종래의 폐쇄 프로젝트에서의 압력을 느낄 필요가 없다. 오픈소스 프로젝트에는 무의미하고 짜증스러운 마케팅 점검 목록도 없고 부적절하고 쓸모 없어진 언어나 개발 환경을 사용하라는 경영진의 명령도 없으며, 제품 차별화나 지식재산 보호라는 명목으로 호환되지 않는 새로운 방법으로 제품을 다시 개발하라는 요구도 없다. 또한 (가장 중요한) 마감 기일이 없다. 제대로 개발되지도 않은 상태에서 1.0판을 출시하는 일은 없다. 디마르코`DeMarco`와 리스터`Lister`의 책 『피플웨어』[^4-59]에는 ‘다 되면 알려줘’ 식의 관리 방법이 소개되어 있는데, 이것은 일반적으로 고품질에 이바지할 뿐 아니라 제대로 동작하는 결과물을 가장 빨리 생산할 수 있는 방법이기도 하다.

[^4-59]: 원주 『Peopleware: Productive Projects and Teams, De Marco and Lister, Dorset House, 1987, ISBN: 0932633056』 (역자주 한국에는 『피플웨어: 정말로 일하고 싶어지는 직장 만들기, 톰 디마르코 외, 박승범 옮김, 매일경제신문사, 2003년, ISBN: 9788974422493』이란 제목으로 번역·출판되었다. 이 책은 소프트웨어 경영관리 분야의 고전으로 불릴 만큼 유용한 내용을 담고 있는데, 본문에 언급된 ‘다 되면 알려줘’ 식의 관리 방법은 관리자가 프로젝트 일정에 전혀 압력을 주지 않고 ‘다 되면 그때 내게 알려줘’ 식으로 관리했을 때 생산성이 최고가 된다는 조사 결과를 인용한 것이다. ‘회사의 일정에 쫓겨 일해야 할 때 직원들은 근무 시간만 채우도록 일을 늘리는 경향이 있다’는 변형된 파킨슨 법칙도 같은 페이지(56페이지)에 설명되어 있다. 이 책의 원문 요약은 <http://javatroopers.com/Peopleware.html>에서 참고할 수 있다.)

한편 배포업체는 자신이 가장 효과적으로 만들 수 있는 부분을 특화할 수 있다. 단순히 경쟁력을 유지하기 위해 거대하고 끝없는 소프트웨어 개발에 예산을 쏟아야 할 필요에서 벗어나 시스템 통합과 패키징, 품질 보증, 그리고 서비스에 집중할 수 있다.

배포업체와 개발자 모두는 오픈소스 방식에 없어서는 안 될 부분인 고객들의 지속적인 살핌`monitoring`과 의견 수렴을 통해 충실함을 유지하게 된다.

## 성공에 대처하기

오늘날의 오픈소스 개발에는 공유지의 비극 모델이 적용되지 않을 지도 모른다. 그러나 이것이 오픈소스 공동체가 가진 현재의 힘이 지속 가능할 지 전혀 의심할 필요가 없다는 것을 의미하는 것은 아니다. 자신의 몫이 늘어난다면 협력에서 이탈할 핵심 세력은 없을까?

이 질문에는 몇 가지 수준으로 답할 수 있다. 공유지의 비극에 대한 우리의 대항 논리인 ‘공유지의 희극’은 오픈소스의 개별적인 기여 가치를 금전적으로 환산하기 어렵다는 주장에 근거한다. 그러나 이러한 주장은 (리눅스 배포업체와 같이) 이미 오픈소스와 관련된 매출원이 있는 기업에 대해서는 설득력을 잃어버린다. 그들의 기여는 이미 매일 금전화되고 있다. 그렇다면, 그들에게 있는 지금의 협력적 역할은 안정된 것일까?

이 질문을 살펴보면, 지금 현실 세계에서의 오픈소스 소프트웨어의 경제와 미래 소프트웨어 산업에 있어 진정한 서비스 산업의 패러다임이 어떠해야 하는 것인지에 대한 몇 가지 흥미 있는 통찰에 도달할 수 있다.

이 질문을 실제적인 수준에서 현재의 오픈소스 공동체에 적용한다면, 보통 2가지 다른 형태 중 하나가 된다. 하나는 “리눅스는 파편화될 것인가?”이고 또 다른 하나는 정반대 시각인 “리눅스는 지배적이고 독점에 가까운 기업을 갖게 될까?”이다.

리눅스의 파편화를 이야기할 때 많은 사람이 역사적인 비교거리로 삼는 것은 1980년대 사유 유닉스 업체들의 행동이다. 공개 표준에 대한 끝없는 토론과 수많은 제휴, 그리고 컨소시엄과 합의가 이루어졌음에도 사유 유닉스는 몰락했다. 호환성을 유지함으로써 (그리고 결과적으로 독립 소프트웨어 개발업체의 진입 장벽과 소비자의 총소유비용 모두를 낮춤으로써) 유닉스 시장 전체의 크기를 키우려는 관심보다 제품 차별화를 위해 운영체제의 기능을 수정하고 덧붙이려는 업체들 각각의 욕구가 더 컸음이 증명된 것이다.

하지만 이러한 일이 리눅스에서 일어날 가능성은 매우 적다. 간단한 이유는 모든 배포업체가 공용 소스 기반으로 작업하도록 제약되고 있기 때문이다. 리눅스 코드가 개발되는 이용허락 아래에서는 한 업체가 만든 코드를 다른 모든 업체와 공유하도록 실질적으로 강제되기 때문에 어떤 업체도 차별화를 유지하는 것이 실제로 가능하지 않다. 한 배포업체가 특정 기능을 개발하면, 모든 경쟁업체가 그 기능을 자유롭게 복제할 수 있다.

모두가 이 사실을 이해하고 있기 때문에 누구도 사유 유닉스를 파편화시켰던 종류의 책략을 사용할 생각조차 하지 않는다. 그 대신 리눅스 배포업체들은 소비자와 전체 시장에 실제로 이익을 주는 방법으로 경쟁할 수밖에 없다. 즉 서비스와 지원, 그리고 설치와 사용을 실제로 쉽게 해주는 인터페이스 디자인으로 경쟁할 수밖에 없다.

공용 소스 기반은 또한 독점 가능성도 막는다. 리눅스 세계 사람들이 독점에 대해 걱정할 때 흔히 듣게 되는 이름은 (미국 안의 어떤 지역에서는 90%에 가까운 시장 점유율을 가진) 가장 크게 성공한 최대 배포업체 레드햇이다. 하지만 1999년 5월, 오랫동안 기다리던 레드햇 리눅스 6.0판의 출시 소식이 공지된 며칠 후에 (아직 CD-ROM 제품이 정식으로 판매되기 전임에도 불구하고) 다른 출판사와 CD-ROM 배포업체들이 레드햇의 익명 FTP 사이트에서 가져다 만든 CD-ROM 복제품을 레드햇의 예정 가격보다 싼 가격에 판매한다고 광고한 것은 주목할 만한 일이다.

레드햇은 이러한 상황에 전혀 개의치 않았다. 왜냐하면 레드햇의 설립자들은 그들이 제품의 일부를 소유하고 있지 않고 또한 소유할 수도 없다는 사실을 이미 명확하게 알고 있었기 때문이다. 리눅스 공동체의 사회 규범이 그것을 금지하는 것이다. 존 길모어`John Gilmore`의 유명한 통찰인 ‘인터넷은 검열을 손상으로 해석하고 이를 우회한다’는 말을 지금 시점에서 인용한다면 ‘리눅스를 지탱하는 해커 공동체는 통제하려는 시도를 손상으로 해석하고 이를 우회한다’고 적절하게 표현할 수 있을것이다.[^4-60] 만약 레드햇이 최신 제품을 출하하기 전에 복제품을 먼저 판매한 업체를 상대로 문제를 제기했다면, 개발자 공동체로부터 미래의 협력을 이끌어내는데 상당한 타격을 받았을 것이다.

[^4-60]: 역자주 존 길모어(John Gilmore). 썬 마이크로시스템즈 창업에 참여했으며, 그 후 GNU 프로젝트에서 활동하다가 마이클 티만, 데이비드 헨켈-월리스와 함께 시그너스 솔루션즈를 공동 창업했다. 1995년에 사업에서 은퇴한 뒤에는 인터넷상의 자유와 공유를 위한 여러 활동을 하고 있다. 블루 리본 캠페인으로 유명한 전자개척재단(EFF: Electronic Frontier Foundation)을 공동 설립했으며 뉴스그룹의 alt.\* 계층을 만들었고, 2009년 제12회 자유 소프트웨어 재단상을 수상하기도 했다. 본문에 인용된 말은 1993년 12월 6일자 타임지 인터뷰에서 나온 것으로 <http://www.chemie.fu-berlin.de/outerspace/internet-article.html>에서 전체 내용을 참고할 수 있다.

아마도 지금 레드햇을 제약하는 보다 중요한 요인은 공동체의 규범이 표현된 소프트웨어 이용허락일 것이다. 이것은 레드햇 제품의 기반이 되는 소스 코드를 레드햇이 독점하지 못하게 하는 법률적 구속력을 실제로 갖고 있다. 레드햇이 판매할 수 있는 유일한 것은 사람들이 기꺼이 돈을 지불할 만한 상표 가치와 지원 및 서비스 상품이다. 이런 것에는 약탈적인 독점이 매우 크게 나타날 가능성이 거의 없다.

## 오픈 R&D와 후원 제도의 재발명

실제 돈이 오픈소스 세계로 유입되면서 변하고 있는 것이 또 하나 있다. 오픈소스 공동체의 저명인사들은 다른 일로 생계를 유지하면서 취미로 오픈소스를 개발하는 대신 그들이 하고 싶은 일을 하며 돈을 벌 수 있다는 사실을 갈수록 분명히 깨닫고 있다.

레드햇과 오라일리, VA 리눅스 시스템즈와 같은 회사들은 재능 있는 오픈소스 인력을 채용해 이들을 안정적으로 유지하기 위한 반독립적인 연구 부서를 만들고 있다.

이것은 회사가 시장을 빠르게 성장시켜 얻을 기대 수익으로 연구 부서의 인건비를 어렵지 않게 충당할 수 있을 때만 경제적인 타당성이 있다. 오라일리는 펄과 아파치의 지도자들에게 작업 비용을 지불하는데, 이는 그들의 노력을 통해 더 많은 펄과 아파치 관련 서적을 판매할 수 있고 콘퍼런스에 더 많은 사람이 모일 것을 기대하기 때문이다. VA 리눅스 시스템즈가 연구 부서에 자금을 제공하는 이유도 리눅스 개량을 통해 그들이 판매하는 워크스테이션과 서버의 사용가치가 높아지기 때문이다. 또한 레드햇이 레드햇 고급 개발 연구소`RHAD: Red Hat Advanced Development Labs`[^4-61]에 자금을 대는 이유는 이것이 레드햇 상품의 가치를 높이고 더 많은 고객을 끌어들일 수 있기 때문이다.

[^4-61]: 역자주 레드햇 고급 개발 연구소 RHAD는 그놈 프로젝트와 자유 소프트웨어 개발을 지원하기 위한 목적으로 1998년 1월에 설립되었고, 2001년 이후 해체되었다.

특허나 영업비밀로 보호되는 지식재산을 기업의 핵심 자산으로 여기는 문화 뒤에 있는, 소프트웨어 산업의 보다 전통적인 부문에 속한 전략가들에게 이러한 행동은 (시장을 키우는 효과는 있겠지만) 이해할 수 없는 것일지 모른다. 경쟁자 모두가 당연히 공짜로 이용할 수 있는 연구에 왜 자금을 댈 것인가?

여기에는 두 가지 핵심 이유가 있을 것 같다. 하나는 자신의 틈새 시장에서 유력한 업체로 남아 있을 동안에는 공개 R&D에서 돌아오는 수익 중 가장 큰 몫을 비례적으로 기대할 수 있기 때문이다. 미래의 이익을 얻기 위해 R&D를 이용하는 것은 새로운 발상이 아니다. 하지만 여기서 흥미로운 점은 동료검토 효과를 얻기 위해 회사가 무임승차자를 기꺼이 용인할 만큼 기대되는 미래 수익이 충분히 크다는 것이 암시되어 있는 공개 R&D 투자 계산이다.

투자수익률`ROI: Return On Investment`에 주목하는 냉철한 자본가들의 세계에서는 명확한 미래 기대 가치 분석이 필수적인 것이겠지만, 사실 저명인사 고용에 대한 가장 흥미 있는 설명 방식은 아닌 것 같다. 왜냐하면 리눅스 업체들도 여기에 대해 모호하게 말하고 있기 때문이다. 만약 그들에게 이유를 물어 본다면 단지 자신의 태생인 오픈소스 공동체가 옳다고 생각하는 일을 하는 것이라고 대답할 것이다. 과분하게도 나는 앞서 언급한 3개 회사의 중역들과 충분한 친분이 있기 때문에 그들의 말이 허튼 소리가 아니라고 증언할 수 있다. 실제로 나 자신도 1998년 후반에 ‘옳은 일’에 대한 자문을 제공하는 역할로 VA 리눅스 시스템즈의 임원이 된 일이 있고, 실제로 내가 ‘옳은 일’에 대해 말했을 때 그들은 싫어하는 기색을 전혀 보이지 않았다.

경제학자라면 그렇게 하는 데 어떤 이익이 있는지 물을지 모른다. 만약 ‘옳은 것’을 행하는 일에 대해 이야기하는 것이 공허한 방침이 아님을 인정한다면, 그 다음에 올 질문은 ‘옳은 것’을 함으로써 ‘회사가 얻는 이익은 무엇인가?’일 것이다. 이에 대한 답변은 그 자체로 놀라운 것도 아니고 적절한 질문으로 맞는 답변인지 확인하는게 어렵지도 않다. 다른 산업 분야에서 행해지는 겉으로 보기에 이타적인 행동들처럼 리눅스 회사들은 그들이 선의를 사고 있다고 정말로 믿고 있다.

선의를 얻기 위해 일하는 것과 이를 미래 시장 수익의 예상 자산으로 평가하는 것도 새로운 시각은 아니다. 흥미로운 사실은 이 회사들이 쏟는 노력의 정도로 볼 때, 선의를 얻는 것에 대단히 높은 가치를 부여하고 있다는 점이다. 그들은 심지어 기업공개[^4-62]를 향해 치닫는 자본이 가장 필요한 국면 중에도 직접적인 매출을 만들 수 없는 프로젝트에 매우 비싼 인재를 대놓고 고용하기를 주저하지 않는다. 그리고 시장은 최소한 지금까지 이러한 행동에 충분히 보상해 왔다.

[^4-62]: 역자주 주식을 외부에 공개하지 않은 회사를 비공개회사(privately held company)라 한다. 비공개회사가 기업 공개(IPO: Initial Public Offering) 절차를 통해 거래소 상장 등이 이루어지면 공개회사(publiclyheld company)가 되는데, 공개회사는 형태와 규모에 맞게 증권거래법 등에 따른 여러 규제를 받는다. 기업이 자금을 조달하는 방법 중 하나가 어음이나 채권 외에 주식을 발행하는 것이며 일반인에게 공개적으로 주식을 처음 발행하는 것을 IPO, 즉 기업공개 또는 최초 주식 공모라 한다. 전형적인 실리콘밸리의 벤처회사는 비공개회사로 출발해서 벤처투자회사를 통해 사모 발행으로 규모를 확장한 뒤에 IPO를 거쳐 나스닥(NASDAQ: National Association of Securities Dealers Automated Quotation) 상장이 이루어진다. 그 후 기업 인수·합병이 이루어지면 큰 돈을 벌 수 있는 기회가 된다. 특히 벤처투자회사들은 투자금을 회수해야 하기 때문에 IPO와 인수·합병에 적극적이다.

이 회사들의 중역들은 선의가 (그들에게) 특히 중요한 이유를 명확히 잘 알고 있다. 그들은 고객층 안에 있는 자원자들에게 제품 개발과 비공식 마케팅 활동 모두를 크게 의존한다. 회사와 고객의 관계는 친밀하며 회사 내부와 외부의 사람이 맺은 개인적 신뢰에 의존하는 경우도 많다. 그들은 해커 공동체를 단순히 이용하는 것이 아니라 자신을 공동체와 동일시한다.

이러한 점들은 이전에 다른 측면의 추론을 통해 알게 된 사실을 다시 한번 확인시켜 준다. 회사와 고객 그리고 개발자 사이의 관계는 전형적인 제조업에서 볼 수 있는 것이 아니다. 그보다는 고도로 전문화된 지식 집약적 서비스 산업의 극단적 형태와 특징을 보인다. 우리는 이러한 형태를 기술 산업 분야 이외에 (예를 들면) 법률 회사나 병원, 대학 등에서 찾아볼 수 있다.

사실, 오픈소스 회사들이 유명한 해커를 고용하는 이유는 대학이 유명한 교수를 고용하는 것과 같은 이유라고 볼 수 있다. 이러한 관행은 두 경우 모두 방식과 효과 면에서 산업 혁명 이후까지 대부분의 순수 예술 분야에 자금을 지원한 귀족들의 후원 제도와 유사하다. 그리고 일부 당사자들은 이 유사성을 충분히 인식하고 있다.

## 더 높은 곳으로 도약하기

오픈소스 개발에 자금을 제공해 수익을 만들려는 시장의 작용 원리는 여전히 빠르게 발전하고 있다. 이 글에서 살펴본 사업 모델 이외의 모델도 앞으로 나타날 것이다. 투자자들은 폐쇄소스 지식재산보다 서비스에 분명한 초점을 맞추는 형태 등으로 소프트웨어 산업을 재편한 결과에 대해 계속 숙고하고 있으며, 이는 당분간 계속될 것이다.

이러한 개념적 혁명은 소프트웨어 산업의 5% 판매가치에 투자한 사람들의 포기 수익을 일부 비용으로 한다. (어느 의사나 변호사도 실제로 개업을 하면 보통 더 높은 수익을 올린다고 말하겠지만) 역사적으로 서비스업은 제조업만큼 수익성이 좋진 않다. 그러나 소프트웨어 소비자가 오픈소스 제품으로 막대한 비용을 절감하고 효율성을 높일 수 있기 때문에 포기해야 하는 어떤 수익보다 비용에서 얻는 이익이 많아질 것이다. (비슷한 예로 기존의 전화 네트워크가 인터넷으로 대체되면서 나타난 사회 전반에서 볼 수 있는 효과를 들 수 있다.)

이러한 효율과 비용 절감의 가능성은 새로운 시장 기회를 만들고 있으며, 이를 이용하기 위해 기업가와 벤처투자가들이 몰려오고 있다. 이 글의 첫 번째 초안을 준비할 때 실리콘밸리의 가장 저명한 벤처투자회사는 연중무휴 일주일 24시간 리눅스 기술 지원을 전문으로 하는 최초의 신생 기업 리눅스케어`Linuxcare`에 선도적인 지분 투자를 했다.[^4-63] 1999년 8월에는 레드햇의 IPO가 (인터넷과 기술 주식의 침체 분위기에도 불구하고) 엄청난 성공을 거뒀다. 1999년이 지나기 전에 리눅스와 오픈소스 관련 몇 개 기업의 IPO가 이루어질 것으로 일반적으로 기대되는데 이들 모두 큰 성공을 거둘 것이다.[^4-64]

[^4-63]: 역자주 1998년에 창업한 리눅스케어는 2001년 이후 소프트웨어 개발 회사로 방향을 바꾸면서 2004년 5월 17일 이름을 레반타(Levanta)로 변경하고 기술 지원 사업을 중단했다. 그 후 2008년 3월 31일에 사업을 청산하고 소멸했다. 24시간 고객 상담이 사업 모델이었던 리눅스케어의 침체 원인 중 하나는 무료로 문제를 해결할 수 있는 뉴스그룹이나 메일링리스트, 사용자 모임 등의 활발한 사용자 공동체가 있었기 때문으로 분석된다.

[^4-64]: 원주 2000년 이후의 시점에서 볼 때 모두 큰 성공을 거뒀다.

또 하나의 매우 흥미 있는 진전은 오픈소스 개발 프로젝트 안에 작업 시장을 형성하려는 조직적인 시도가 일어나고 있다는 점이다. [소스익스체인지](http://web.archive.org/web/20000310232700/http://www.sourcexchange.com/process.html)`SourceXchange`와 [코소스](http://web.archive.org/web/20000302160316/http:/www.cosource.com)`CoSource`는 오픈소스 개발 자금 조달에 역경매 방식을 적용하는 조금은 다른 시도를 보여주고 있다.[^4-65]

[^4-65]: 역자주 일반적인 경매는 판매자가 내놓은 상품에 가장 비싼 가격을 제시한 구매자가 낙찰을 받지만, 역경매는 구매자가 자신이 필요한 상품을 먼저 제시하면 여러 명의 판매자가 가격을 제안해 이 중 가장 싼 가격을 내세운 판매자가 낙찰을 받는다. 형식 면에서 도급 입찰과 같다고 할 수 있다. 콜랩넷(Collab.net)과 오라일리 두 회사의 프로젝트로 시작된 소스익스체인지는 1999년 8월 10일에 서비스를 시작했지만 그 후 다른 프로젝트로 중심을 이동하면서 18개월 뒤에 사업을 종료했다. 1999년 12월 6일 정식 서비스를 시작한 코소스는 1999년 12월 13일 애플릭스(Applix)에 인수·합병된 뒤에 리눅스 사업 부문이 독립 회사 비스타소스(VistaSource)로 분리되면서 오피스 소프트웨어 애플릭스웨어(Applixware)를 중심으로 사업을 전개했다. 그 뒤에 애플릭스는 코그노스(Cognos, 2007년 9월 5일)에, 코그노스는 IBM(2007년 11월 12일)에 인수·합병되었다.

전반적인 추세는 매우 분명하다. 2003년까지 리눅스는 다른 모든 운영체제를 합친 것보다 빠르게 성장할 것이라는 IDC 예측을 이미 언급한 바 있다. 아파치는 61%의 시장 점유율을 갖고 있으며 그 비중은 꾸준히 증가하고 있다. 인터넷 사용은 폭발적으로 증가하고 있으며, [인터넷 운영체제 카운터](http://leb.net/hzo/ioscount/)와 같은 조사를 통해 리눅스와 다른 오픈소스 운영체제가 이미 인터넷 호스트의 다수를 차지하고 있으며 폐쇄 운영체제에 대해 점유율을 꾸준히 높여가고 있다는 사실을 알 수 있다. 오픈소스 인터넷 인프라를 이용해야 할 필요가 높아진다는 것은 단지 다른 소프트웨어의 설계뿐 아니라 모든 관련 기업의 사업 관행과 소프트웨어의 이용 및 구매 형태까지 점점 더 오픈소스가 조건짓게 된다는 것을 의미한다. 그리고 이러한 경향은 어떻든 더 가속될 것으로 보인다.

## o결론: 혁명 뒤의 세상

오픈소스로의 이행이 완성되면 소프트웨어 세계는 어떤 모습이 될까?

어떤 프로그래머들은 오픈소스로의 이행이 그들의 직업을 없애거나 가치를 떨어트릴 것으로 우려한다. 대표적인 악몽은 내가 오픈소스 최후의 날, 즉 ‘오픈소스 둠스데이`Doomsday`’라 부르는 시나리오다. 이것은 소프트웨어의 시장가치가 0이 되면서 시작된다. 왜냐하면 온갖 공짜 소스 코드가 세상에 넘쳐나기 때문이다. 사용가치만으로는 소프트웨어 개발을 지원하기에 충분한 소비자를 끌 수 없다. 상업 소프트웨어 산업은 붕괴한다. 프로그래머는 굶주리거나 이 분야를 떠난다. (이 모든 요인의 남은 시간에 따라) 오픈소스 문화 자체가 붕괴하면, 최후의 날이 도래하고 프로그램을 만들 수 있을 만한 사람은 아무도 남지 않는다. 모든 게 끝난다. 아! 이 당혹감이란![^4-66]

[^4-66]: 역자주 오픈소스 개발 인력 수급의 문제 중 하나를 『인터넷 그 길을 묻다, 한국정보법학회, 중앙북스, 2012년, ISBN: 9788927803737』에서 인용하면 다음과 같다. 「한국과 같이 대다수의 인재가 내부 노동시장에 매몰되어 있게 된다면 외부 노동시장이 기능하기 힘들게 된다. 물론 이는 한국뿐만 아니라 산업 성장을 겪은 모든 국가들이 어느 정도는 경험하는 일이다. 그러나 이때 오픈소스 활동과 같이 내부 노동시장을 기업에 매몰된 형태가 아닌 커뮤니티와 제품 혹은 직능이라는 새로운 틀로 해방시키는 플랫폼이 자생적으로 마련된 것이다. 성과급, 유연한 고용으로 대변되는 치열하고 경쟁적인 노동시장 속에서도 OJT(On the Job Training)를 통한 장기적 직능 발전이라는 내부 노동시장의 유효성을 자발적으로 시도한 것이 바로 운동으로서의 오픈소스였던 것이고, 이는 현대 소프트웨어 산업의 노무와 인력 동향을 분석함에 있어 주요한 요소가 된다. (중략) 한국에서도 오픈소스는 많이 가져다 쓰지만 결국 기여는 일어나지 못하는데, 그 이유는 그 이면에 깔린 노동 문화와의 결합에 의한 확장된 내부 노동시장화라는 동향을 우리가 아직 이해하지 못했거나, 혹은 이해할 필요를 못 느껴서다. 대다수의 기득권 기업들이 자급자족이 가능한 노동시장을 내부에 지닌 이상 낯선 외부적 평가에 관심을 둘 동기부여가 없기 때문이다. 한줌의 인재만이 대기업의 내부 노동시장의 보호를 받고, 나머지는 성장의 기회마저 놓친 채 갑을병정의 피라미드 밑의 경쟁시장에서 고군분투하게 되는 결과를 낳게 되고, 이는 장기적으로 외부의 다양성을 통한 직능 교배와 지식 공유를 막게 되어, 마치 생태계에 있어서의 '동종교배의 위험'을 그대로 답습하게 된다.(‘이중 노동시장의 문제’, 김국현, 751페이지)」

우리는 이런 일이 일어나지 않으리라는 충분히 많은 이유를 이미 목격하고 있다. 무엇보다 먼저 대부분의 개발자 임금은 소프트웨어의 판매가치에 의존적이지 않다. 그러나 여기서 강조할 가치가 있는 가장 중요한 것은 ‘일거리를 찾을 방법이 없어 놀고 있는 소프트웨어 개발자를 마지막으로 본 것이 언제인가?’라는 점이다. 아무리 많은 비밀과 시간을 세상에 공짜로 내어놓더라도 컴퓨터로 무엇을 하게 만들 수 있는 사람에 대한 충분한 일감과 건강한 수요는 빠르게 바뀌는 세계와 급속히 복잡해지는 정보 중심적 경제 안에 항상 존재한다.

소프트웨어 시장 자체를 검토해 보려면, 어느 정도까지 서비스를 공개 기술 표준으로 설명할 수 있는가라는 기준에 따라 소프트웨어를 분류해 보는 것이 도움이 된다. 이는 기본 서비스가 어느 정도까지 일상재가 될 수 있는가라는 점과 밀접하게 연관되어 있다.[^4-67]

[^4-67]: 역자주 일상재(commodity)는 기능과 품질 등이 균질화되서 더 이상 차별화 요소가 없어진 상품을 말한다. 일회용 종이컵이나 면봉, 공DVD처럼 특정 상표나 기업의 제품이 아닌 어떤 것을 사용해도 상관없는 일상용품이 여기에 해당한다. 일상재가 된 상품은 차별화 요소가 없기 때문에 가격 외에는 경쟁 우위를 가질 수 없다. 스마트폰 시장이 보조금 지원 등의 가격 경쟁을 통해 움직이는 것은 스마트폰이 더 이상 기능과 디자인만으로는 소비자를 유인할 수 없는 일상재가 되어가는 예로 볼 수 있다.

이러한 기준은 (공개 기술 표준이 미약하거나 존재하지 않으면서 전혀 일상재가 아닌) 애플리케이션과 (뚜렷한 표준이 존재하면서 일상재가 된 서비스인) 인프라, 그리고 (효과적이지만 완성되지 않은 기술 표준이 존재하면서 부분적으로 일상재가 되어 있는) 미들웨어를 구분할 때 사람들이 일반적으로 생각하는 기준과 일치한다. 2000년 시점의 대표적인 예는 워드 프로세서(애플리케이션)와 TCP/IP 스택(인프라) 그리고 데이터베이스 엔진(미들웨어)이다.

이미 살펴보았던 수익 분석에 따르면 애플리케이션과 인프라, 미들웨어는 서로 다른 방식으로 바뀌며 오픈소스와 폐쇄소스의 균형 비율도 각각 다르다. 또한 특정한 소프트웨어 분야에서 오픈소스가 확산될 수 있는 열쇠는 네트워크 효과가 중요하게 작용하는지와 실패 비용이 얼마인지, 그리고 소프트웨어가 어느 정도까지 사업에 결정적인 자본재인지에 달려있다.

만약 이러한 경험적 발견을 개별 제품이 아닌 소프트웨어 시장 전체에 과감히 적용해 본다면 다음과 같은 예측이 가능하다.

(인터넷, 웹, 운영체제 그리고 경쟁 제품 사이에 연결이 이루어져야 하는 통신 소프트웨어의 하층 같은) 인프라는 거의 모두 오픈소스가 되고, 사용자 컨소시엄과 현재의 레드햇이 하는 역할처럼 이윤을 추구하는 배포 및 서비스 업체에 의해 협력적으로 유지관리될 것이다.

반면에 애플리케이션은 폐쇄소스로 남을 가능성이 매우 높다. 소비자가 돈을 주고 폐쇄 소프트웨어를 계속 구입할 만큼 비공개 알고리즘이나 기술의 사용가치가 충분히 높은 (그리고 비안정성 때문에 발생하는 비용이 충분히 낮고 독점 공급자에 의한 위험 또한 충분히 감수할 수 있는) 상황이 있을 것이다. 이러한 상황은 네트워크 효과가 약한 (기업용 소프트웨어와 같은) 독립 수직 시장 애플리케이션에서 유지될 가능성이 가장 높다. 이전에 다루었던 제재소의 경우가 한 예다. 1999년의 유망 분야인 생체 식별 소프트웨어[^4-68]도 한 예가 될 수 있다.

[^4-68]: 역자주 지문이나 목소리, 안구 등의 인체 기관을 이용한 신분 확인 소프트웨어를 말한다.

(데이터베이스와 개발 도구, 맞춤변경된 애플리케이션 프로토콜 스택의 최상층과 같은) 미들웨어는 혼재된 형태가 될 것이다. 미들웨어 분야가 오픈소스로 향할 지 폐쇄소스로 향할 지는 실패 비용에 따라 결정되기 쉬운데, 실패 비용이 높다면 오픈소스 쪽으로 시장의 압력이 작용할 것이다.

그러나 이러한 구도를 완성시키려면 ‘애플리케이션’이나 ‘미들웨어’가 완전히 고정된 범주 안에 있는 것이 아니라는 점을 인식할 필요가 있다. 이미 살펴본 바와 같이 개별적인 소프트웨어 기술은 자연적인 수명주기를 통해 합리적인 폐쇄 상태에서 합리적인 공개 상태로 바뀌어 간다. 보다 일반적인 상황에도 같은 논리가 적용된다.

(SQL이 데이터베이스 엔진에서 프런트 엔드로 떨어져 나간 뒤에 데이터베이스가 미들웨어가 된 것처럼) 애플리케이션은 표준화된 기술이 발전하고 서비스의 일부분이 일상재가 되어감에 따라 미들웨어가 되는 경향이 있다. 또한 미들웨어 서비스가 일상재가 되면, 미들웨어는 다시 오픈소스 인프라가 될 것이다. 지금 우리가 보고 있는 운영체제에서의 이행이 이러한 것이다.

오픈소스와의 경쟁을 포함한 미래에는, 모든 소프트웨어 기술이 결국 사멸하거나 공개 인프라의 일부가 될 것으로 예상할 수 있다. 이는 폐쇄 소프트웨어에서 이용허락 수익을 한없이 얻고 싶은 기업가에겐 좋은 소식이 아니겠지만, 소프트웨어 산업 전체에는 기업 정신이 계속 유지된다는 것을 시사한다. 새로운 틈새 시장이 상층부에서 (애플리케이션으로) 지속적으로 생겨날 것이고 제품의 범주가 인프라 쪽으로 이행하면서 폐쇄적인 지식재산의 독점력은 제한된 수명을 갖게 될 것이다.

마지막으로, 두 말할 필요도 없이 이러한 균형은 이 과정을 움직이고 있는 소프트웨어 소비자에게 매우 좋은 것이다. 생산 중단이나 누군가의 통제 안에 갇히는 대신 더 많은 고품질 소프트웨어를 변함없이 사용할 수 있게 될 것이다. 케리드웬의 ‘마법의 솥’은 결국 너무 약한 은유였다. 왜냐하면 음식은 없어지거나 부패하지만 소프트웨어의 소스 코드는 잠재적으로 영원하기 때문이다. 교역이나 증여에 상관없이 강제되지 않은 모든 활동을 포함한 가장 넓은 의미의 자유주의적 관점에서 볼 때, 자유 시장은 모든 사람을 위해 영속적으로 증가하는 소프트웨어의 부를 생산할 수 있다.

## 뒷이야기: 왜 드라이버를 폐쇄하는 업체가 손해를 보는가?

(이더넷 카드나 디스크 컨트롤러, 비디오 카드와 같은) 주변 장치 제조업체들은 역사적으로 볼 때 드라이버를 공개하는 것을 꺼려왔다. 그러나 지금은 이러한 경향이 바뀌고 있으며 어댑텍`Adaptec`과 싸이클라이드`Cyclades`와 같은 업체는 생산 제품의 기술 명세와 드라이버 소스 코드를 정기적으로 공개하기 시작했다.[^4-69] 그럼에도 불구하고 공개에 대한 저항은 아직 남아 있는데 그러한 저항을 지탱하는 몇 가지 잘못된 경제적 오해를 여기서 떨쳐보고자 한다.

[^4-69]: 역자주 1981년에 창업한 어댑텍은 하드 디스크와 같은 기억 장치 컨트롤러 전문 제조업체이며 현재까지 홈페이지 안에 오픈소스 정보 페이지를 운영하고 있다. 1991년에 창업한 싸이클라이드는 2006년 5월 31일 아보센트(Avocent)에 인수·합병되었고, 아보센트는 2009년 10월 6일에 에머슨 일렉트릭(Emerson Electric)에 인수되었다.

만약 여러분이 하드웨어 제조업체라면 아마도 드라이버 소스를 공개하면 하드웨어가 어떻게 작동하는 지 알 수 있는 중요 사항이 드러나고, 경쟁업체가 이를 복제해 부당한 경쟁 이점을 갖게 되리라 우려할지 모른다. 3년에서 5년 정도의 제품 수명주기를 갖는 시대로 거슬러 올라간다면 이는 타당한 주장이다. 그러나 오늘날에는 경쟁업체의 기술자가 복제물을 만들고 이해하는 데 필요한 시간이 손해를 끼칠 만큼 제품 수명주기의 큰 부분을 차지해 버리기 때문에 자신의 제품을 혁신하거나 차별화하는 데 시간을 쓸 수 없게 돼 버린다.

이는 새로운 통찰이 아니다. [전직 KGB 간부 올렉 카루진Oleg Kalujin이 말한 좋은 사례](http://web.archive.org/web/20070528193344/http:/edition.cnn.com/SPECIALS/cold.war/experience/spies/interviews/kalugin)가 있다.

「예를 들어 우리 계획에 있었거나 서구 세계는 큰 진전을 이뤘지만 우리는 뒤쳐져 있던 몇몇 다른 전자 분야의 IBM 기술을 훔쳤을 때, 우리는 첩보 결과를 구현하는 데 수 년이 걸렸다. 그러나 5∼7년이 흐른 시점이 되면 그들은 더 앞서 가 버려서 우리는 훔치는 일을 계속해야만 했다. 우리는 점점 더 많이 뒤쳐져 버렸다.」

러디어드 키플링`Rudyard Kipling`은 거의 1세기 전에 그의 시 ‘[메리 글로스터호](http://www.everypoet.com/archive/poetry/Rudyard_Kipling/kipling_the_mary_gloster.htm)’에 이상황을 더욱 잘 표현해 놓았다.

「그들이 내게 어떻게 한 것인지 물었을 때,
나는 성경 한 구절을 건네주었습니다
“너희 빛을 사람 앞에 비추게 하라!”
그들은 할 수 있는 모든 것을 따라 했지만,
내 생각까지 따라 할 수는 없었습니다
그들이 애써 일하며 뒤에서 1년 반을 허비하도록,
나는 그렇게 내버려 두었습니다[^4-70]」

[^4-70]: 역자주 러디어드 키플링(Joseph Rudyard Kipling, 1865∼1936). 영국 태생의 시인이자 소설가로 빅토리아 시대의 대표 작가다. 1907년도 노벨 문학상을 수상했다. 한국에는 『왕이 되려 한 사나이(The Man Who Would be King)』, 『정글북(Jungle Book)』, 『킴(Kim)』 등의 작품이 소개되어 있으며 특히 『왕이 되려 한 사나이』는 숀 코너리(Sean Connery)가 주연한 1974년작 영화로 널리 알려져 있다. 이 절에서 인용한 「The Mary Gloster」는 1896년에 쓰여진 것으로 죽음을 앞 둔 선박 왕 앤서니 글로스터 경(Sir Anthony Gloster)이 아들에게 자신의 성공 이야기를 들려주는 형식의 산문시다. 여기서 말하는 성경 구절은 마태복음 5장 16절인데, 이 구절의 의미를 이해하려면 ‘등불로 집 안의 모든 사람을 환히 비추려면 등에 불을 붙인 후에 등잔대 위에 올려놓아야지 등불을 그릇으로 덮어서는 안 된다’는 15절의 내용을 먼저 알아야 한다. 즉, 시에서 성경 구절을 인용한 의미는 행위의 목적과 방법을 모른 채 단지 하라는 대로 따라 하기만 해서는 원하는 것을 이룰 수 없다는 뜻이다. 이는 창의와 혁신 없이 흉내만 내며 시간을 허비하는 경쟁자의 모습을 비판한 것이다. 신랑을 맞이하는 열 신부의 이야기를 담은 마태복음 25장도 같은 의미의 비유라고 할 수 있다.

인터넷 시대의 가속화는 이러한 효과를 더욱 실감하게 해 준다. 만약 여러분이 어떤 분야에서 앞서 있다면 표절은 경쟁자가 빠지면 좋을 함정이다!

어떤 경우든 지금은 어떤 세부 사항도 오랫동안 감출 수 있는 시대가 아니다. 하드웨어 드라이버는 운영체제나 애플리케이션과 달리 작고 디어셈블하기 쉬우며 복제물을 만들기도 쉽다. 이것은 심지어 10대 초보 프로그래머도 할 수 있으며 실제로 흔히 행해진다.

바깥 세상에는 새로운 보드에 맞는 드라이버를 만들 능력과 동기를 가진, 말 그대로 수천 명에 달하는 리눅스와 FreeBSD 프로그래머들이 있다. 이러한 열정적인 해커들은 비교적 단순한 인터페이스와 (디스크 컨트롤러와 네트워크 카드와 같이) 잘 알려진 표준이 있는 많은 등급의 하드웨어에 대해 흔히 제조업체의 개발 속도와 거의 동일하게 드라이버의 원형`prototype`을 만들 수 있다. 심지어 이것은 기존의 드라이버에 대한 문서가 없거나 디어셈블을 하지 않고도 가능하다.

비디오 카드나 사운드 카드와 같이 다루기 어려운 장치의 경우에도 디스어셈블러로 무장한 솜씨 좋은 프로그래머를 막을 방법은 거의 없다. 필요한 비용은 적고 법의 장벽에는 허점이 많다. 리눅스는 국제적인 협력이고, 리버스 엔지니어링`reverse engineering`이 합법인 곳은 항상 존재하기 마련이다.

이 모든 주장에 대한 확실한 증거를 보고 싶다면, 리눅스 커널의 지원 장치 목록을 살펴보거나 심지어 제조업체의 지원 없이도 새로운 드라이버가 커널에 추가되는 속도에 주목해보라.

드라이버를 공개해야 할 또 하나의 좋은 이유는 혁신에 집중할 수 있다는 것이다. 새로운 커널이 나올 때마다 그에 맞는 실행 파일을 다시 만들고 테스트하고 배포해야 하는 회사의 시간과 비용이 더 이상 필요 없다고 가정해보라. 확실히 모든 자원을 이용해 더 나은 것을 가질 수 있다.

또 다른 좋은 이유도 있다. 그 누구도 오류 수정을 위해 6개월씩 기다리길 원치 않는다. 만약 오픈소스를 이용하는 경쟁자가 있다면, 이것 하나만으로도 여러분을 눌러버릴 수 있다.

물론 여기에는 이전에 언급했던 미래 보장 효과가 있다. 고객은 오픈소스를 원한다. 왜냐하면 비용 효율로 인해 제조업체가 지원할 수 있는 한정된 제품 수명주기를 오픈소스가 확장시킨다는 것을 알기 때문이다.

이 모든 이유에도 불구하고 드라이버를 공개해야 하는 최상의 이유는, 돈을 버는 가장 좋은 방법은 하드웨어를 많이 파는 것이기 때문이다. 많이 팔리는 하드웨어가 돈을 벌어준다. 여러분의 비밀 유지를 위한 시장 수요는 없다. 사실은 그 반대다. 만약 여러분의 드라이버가 발견하기 힘들고, 자주 갱신`update`해야 하고, (가장 나쁘게는) 형편없이 동작한다면 이 모든 것이 나쁘게 반영돼 하드웨어는 덜 팔릴 것이다. 오픈소스는 이런 문제들을 해결하고 매출을 높여준다.

시사하는 것은 무엇인가? 드라이버를 비밀로 유지하는 것이 단기적으로 매력적으로 보일지 모르지만 장기적으로 보면 (특히 이미 드라이버를 공개한 다른 업체와 경쟁하고 있다면) 십중팔구 나쁜 전략이다. 그러나 만약 드라이버를 공개하지 않아야만 될 상황이라면 보드에 탑재된 ROM에 코드를 내장한 다음 인터페이스를 공개하라. 시장을 만들고 싶다면, 또한 경쟁업체보다 더 혁신적이고 더 숙고하는 자신의 역량을 잠재 고객에게 보여주고 싶다면 가능한 많은 부분을 공개하라.

만약 폐쇄 정책을 계속 유지한다면 최악의 결과를 얻기 쉬울 것이다. 여러분의 비밀은 여전히 계속 폭로될 것이고 공동체의 자유로운 개발 지원도 받지 못할 것이며, 어리석은 경쟁업체들이 복제품을 만들며 시간을 허비하게 할 수도 없다. 가장 중요하게는 폭넓은 조기 도입 수단을 놓치게 된다. (인터넷과 대다수 기업 데이터 센터를 실제로 움직이는 서버 관리자들로 구성된) 크고 영향력 있는 시장은 여러분이 수세적이고 답이 없다고 단정하고 제품 사용을 고려하지 않을 것이다. 왜냐하면 여러분이 이런 것들을 깨닫지 못했기 때문이다. 그리고 오픈소스 정책을 채택한 다른 회사의 제품을 구매할 것이다.

---

## 감사의 글

데이비드 D. 프리드먼`David D. Friedman`과의 몇 번의 자극적인 토론은 오픈소스의 ‘역공유지’ 모델을 다듬는 데 도움이 되었다. 마셜 반 앨스틴`Marshall van Alstyne`은 경쟁적인 정보재의 개념적 중요성을 지적해 주었다. 인디애나 사용자 모임`Indiana Group`의 레이 온트코`Ray Ontko`는 이 글에 유용한 논평을 해 주었다. 1999년 6월 전까지 내 강연을 들어 준 많은 청중에게도 얻은 것이 있다. 만약 여러분이 그 중 한 명이라면 누구를 말하는지 알 것이다.

이 글을 처음 발표한 이후 며칠 동안 내가 받은 메일 덕분에 중요 부분이 보강된 점은 오픈소스가 가진 장점을 보여준 또 다른 실례라고 생각한다. 로이드 우드`Lloyd Wood`는 오픈소스가 미래 보장 효과를 갖게 된다는 중요성을 일러 주었으며, 더그 단테`Doug Dante`는 ‘미래는 무료로, 현재를 판매하라’ 사업 모델을 일깨워 주었다. 애덤 무어하우스`Adam Moorhouse`의 질문 덕분에 오픈소스를 배제하는 것으로 얻을 수 있는 수익이 무엇인지 토론할 수 있었다. 라이어넬 올리비에라 그라스`Lionel Oliviera Gresse`는 사업 모델 중 하나에 더 좋은 명칭을 만들어 주었다. 스티븐 턴불`Stephen Turnbull`은 내가 무임승차자 효과를 부주의하게 다룬 점을 따끔하게 질책해 주었다. 앤서니 베일리`Anthony Bailey`와 워런 영`Warren Young`은 둠스데이 사례에서 몇 가지 사실을 바로잡아 주었다. 에릭 싱크`Eric W. Sink`는 공장 모델이 셸프웨어로 보상한다는 통찰에 도움을 주었다.

이 모든 분에게 진심으로 감사의 말을 전한다.


---

![](figures/sagrada_gargoyle.jpg "")

사그라다 파밀리아 성당, 가고일 조각상[^4-71]

우리가 하얀빛과 검은 그림자를 생각할 때, 그 가능성은 무한하다. 왜 이처럼 변혁이 일어나야 하는가? 그것은 사람들이 사물에 직면하게 되고, 갑자기 인간의 시설에 의문을 품기 때문이다. 이 변혁을 통해 더욱 훌륭한 사실, 더 간단히 말하자면 사실의 재정의가 생겨날 것이다.  — 루이스 칸(Louis Kahn, 1901~1974),
『루이스 칸: 학생들과의 대화, MGH Publications, 2001년, 29페이지』

[^4-71]:　역자주 Copyright 2013 Colin. 이 이미지는 크리에이티브 커먼즈 <저작자표시-동일조건변경허락 3.0 미국 이용허락>에 따라 이용할 수 있다.


