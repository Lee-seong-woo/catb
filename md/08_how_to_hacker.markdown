# 부록 A  |  해커가 되는 방법

윤종민 역[^8-1]

[^8-1]: 역자주 이 글은 2013년 9월 25일에 개정된 1.46판을 번역한 것이다. 한국어 번역문의 최종 개정일은 2013년 12월 21일이다.

## 이 글을 쓰는 이유

「[자곤 파일](http://www.catb.org/jargon/)」[^8-2]의 편집자면서 또한 널리 알려진 비슷한 다른 글들의 저자이기 때문에 나는 “어떻게 하면 최고의 해커가 될 수 있는가?”라는 질문을 많이 받는다. 1996년으로 돌아가 보면 당시에는 이런 중요한 질문에 답을 알려주는 어떠한 ‘자주 묻는 질문들에 대한 답변`FAQ: Frequently Asked Questions`’이나 문서도 찾기 쉽지 않았기 때문에 나는 이 글을 작성하기 시작했다.

[^8-2]: 역자주 자곤 파일은 종이책으로도 출판되어 있다. 영문판과 한국어 번역판은 각각 다음과 같다. 『The New Hacker's Dictionary, Eric S. Raymond, MIT Press, 3rd edition, 1996, ISBN: 0262680920』, 『해커 영어사전, Eric S. Raymond, 한경훈 옮김, 기전연구사, 1998년, ISBN: 9788933604427』

이제 많은 해커가 이 글을 추천하며 스스로도 잘 설명했다고 생각하지만, 나는 이 주제에 대해 이야기하는 유일한 사람이 되고 싶지는 않다. 이 글에 동의하지 않는다면 여러분의 생각을 직접 써보면 좋을 것 같다.

이 문서를 오프라인 문서로 접했다면, <http://catb.org/~esr/faqs/hackerhowto.html>에서 최신판을 구할 수 있다.

이 문서의 마지막 부분에 FAQ가 있다. 내게 이 글에 대한 문의를 하기 전에 FAQ를 적어도 2번은 읽어주길 부탁한다.

이 문서는 다음과 같은 언어로 번역되었다. 영어 원문은 가끔 개정되며, 번역자의 사정이 모두 다르기 때문에 언어별 개정 여부는 다를 수 있다. ([그리스어](http://earthlab.uoi.gr/indy/hacker-howto-gr/), [네덜란드어](http://www.knudde.be/index.php?page_name=hacker_howto), [노르웨이어](https://web.archive.org/web/20051201235256/http:/stian.atlantiscrew.net/doc/hacker-howto.html), [덴마크어](http://www.olemichaelsen.dk/hacker-howto.html), [독일어](http://www.linuxtaskforce.de/hacker-howto-ger.html), [루마니아어](http://garaj.xhost.ro/hacker-howto/hacker-howto.ro.html), [벨라루스어](https://web.archive.org/web/20110924022331/http:/www.moneyaisle.com/worldwide/how-to-become-a-hacker-be), [스웨덴어](https://web.archive.org/web/20130121133143/http:/www1.tripnet.se/~mly/open/faqs/hacker-howto.se.html), [스페인어](http://biblioweb.sindominio.net/telematica/hacker-como.html), [아랍어](http://www.slashproc.net/doc/howto-ar.html), [에스토니아어](http://www.kakupesa.net/hacker/), [이탈리아어](http://www.victorfleur.com/documents/hacker.html), [중국어(간체)](http://www.angelfire.com/ok/leekawo/hackersim.htm), [체코어](http://jjk.kybli.net/projekty/jak-se-stat-hackerem.html), [페르시아어](http://ashiyane.org/forums/showthread.php?20570-Faq-%D9%87%DA%A9-%D8%B1%D9%88-%D8%A7%D8%B2-%DA%A9%D8%AC%D8%A7-%D8%B4%D8%B1%D9%88%D8%B9-%DA%A9%D9%86%D9%85-%D8%9F), [(브라질)포르투갈어](http://jvdm.sdf1.org/pt/raquer-howto/), [터키어](https://web.archive.org/web/20030816023144/http:/belgeler.org/howto/hacker-howto/hacker-howto.html), [한국어](http://korea.gnu.org/people/chsong/cb/hacker-howto/), [히브리어](http://web.archive.org/web/20030221211218/www.rootshell.be/~eg/faqs/hacker-howto.heb.html))

이 문서에서 사용한 5개 점을 가진 정사각형 도형의 이름은 글라이더`glider`다. 이것은 간단한 패턴으로 수년 간 해커들을 매료 시킨 [라이프](http://www.dmoz.org/Computers/Artificial_Life/Cellular_Automata/)`Life`라 불리는 수학 시뮬레이션의 일부다. 자세히 살펴 보면, 처음에는 알 수 없지만 복잡한 구조를 가진 세계로 들어가는 관문이어서 해커를 표현하는 훌륭한 상징이라고 생각한다. 글라이더에 대해서는 <http://www.catb.org/hacker-emblem/>에서 좀 더 자세히 알아볼 수 있다.[^3-3]

[^3-3]: 역자주 <http://ko.wikipedia.org/wiki/라이프_게임>에서 보다 자세한 설명을 참고할 수 있다.

이 문서가 여러분에게 유용했다면, [내게 Gittip으로 기부](https://www.gittip.com/esr/)를 해 주었으면 한다. 또한 여러분이 유용하고 가치 있게 사용하는 코드를 작성한 해커에게 기부하는 것도 한 번 고려해보자. 이런 기부가 계속되면 더 많은 사람이 자유롭게 보다 가치 있는 것들을 만들어 낼 수 있다.

![](figures/hacker_emblem.jpg "")

## 해커란 누구인가?

「[자곤 파일](http://www.catb.org/jargon/html/H/hacker.html)」에는 ‘해커’에 대한 많은 정의가 포함되어 있다. 대부분 문제를 해결하고, 한계를 극복하는 기술적인 숙련도와 명석함에 초점을 맞춘다. 하지만 여러분이 해커가 되는 방법을 알고 싶다면 기술과 마음가짐, 이 두 가지가 실제적으로 중요하다.

숙련된 프로그래머와 네트워크 전문가가 문화를 공유하는 공동체가 있다. 그 시초는 최초의 시분할 미니컴퓨터와 아르파넷`ARPANET: Advanced Research Projects Agency NETwork`을 사용하던 수십 년 전으로 거슬러 올라간다. 이 문화의 구성원이 바로 ’해커’라는 말의 기원이다. 해커는 인터넷을 만들었고, 현재와 같은 형태의 유닉스 운영체제를 만들었다. 또한 해커는 유즈넷을 운영하고 WWW를 움직인다. 만약 여러분이 이러한 문화에 속해 있거나 이러한 문화에 기여한 바가 있다면, 그리고 이 문화에 속해 있는 사람들이 여러분을 알고 여러분을 해커라고 부르고 있다면 다름이 아닌 여러분이 바로 해커인 것이다.

해커의 사고방식은 소프트웨어 해커 문화에 국한되지 않는다. 예를 들어, 해커의 마음가짐으로 전자공학이나 음악과 같은 분야에 관심을 쏟는 사람도 있으며, 실제로 최고 수준의 예술과 과학 분야에서 이런 모습을 찾아 볼 수 있다. 소프트웨어 해커는 그들과 유사한 생각을 가진 사람들이 있다는 것을 인정하며, 그런 사람들 역시 해커라 부를 수 있다. 그리고 어떤 해커들은 해커의 본질은 해커가 일하는 특정 분야나 수단과는 관계가 없다고 주장한다. 그러나 이 글에서는 범위를 한정해 소프트웨어 해커의 기술과 마음가짐, 그리고 해커라는 말의 기원이 된 공유 문화의 전통에 대해 알아보기로 하자.

실제로는 그렇지 않지만 자신을 해커라 부르는 또 다른 집단이 있다. 이들은 주로 청소년기의 남자 아이들로 구성되며 컴퓨터 시스템에 침입하거나, 전화를 무료로 사용할 수 있도록 조작하는 일을 한다. 하지만 진짜 해커는 이들을 ‘크래커`cracker`’라 부르며 그들과 관계하는 것을 원치 않는다. 해커 대부분은 크래커를 게으르고 무책임하며 명석하지 않다고 생각한다. 철사를 이용해 자동차 시동을 건다고 해서 자동차 엔지니어가 되는 것이 아닌 것처럼 시스템의 보안을 뚫을 수 있다고 해서 해커가 되는 것은 아니다. 하지만 많은 언론과 작가들이 크래커를 해커라는 단어로 부르며, 진짜 해커들은 이 부분을 항상 못 마땅하게 생각한다.

해커는 무엇인가를 만드는 사람이지만, 크래커는 무엇인가를 파괴하는 사람이라는 것이 해커와 크래커의 근본적인 차이다.

만약 해커가 되고 싶다면 이 글을 계속 읽어야 되지만 크래커가 되기 원한다면, alt.2600(news:alt.2600) 뉴스그룹의 글을 읽은 뒤 5∼10년 정도의 세월을 교도소에서 보내고 나서야 스스로가 얼마나 바보 같았는지 깨달을 수 있을 것이다. 이것이 내가 크래커에 대해 하고 싶은 이야기의 전부다.

![](figures/hacker_emblem.jpg "")

## 해커의 마음가짐

해커는 문제를 해결하고 무엇인가를 만들어 내며, 자유와 자발적인 상호 협력을 믿는다. 해커로 인정받으려면 이런 마음가짐을 가진 것처럼 행동해야 한다. 그리고 진심으로 이런 마음가짐으로 행동해야 한다.

하지만 단지 해커 문화 안에서 인정받으려고 이런 태도를 취한다면, 중요한 부분을 간과한 것이다. 그러한 것들을 믿는 사람이 된다는 것은 여러분 자신이 학습하는데 도움이 되고 지속적인 동기를 제공할 수 있기 때문에 중요한 일이다. 모든 창조적인 분야가 그렇듯이 대가가 되는 가장 효과적인 방법은 다음 선시`禪詩`와 같이 대가의 품성과 태도뿐만 아니라 감정적인 부분까지도 그대로 모방하는 것이다.

	길을 따르다
	대가를 보고,
	대가를 따르고,
	대가와 함께 걷고,
	대가의 눈으로 보면,
	대가가 될 수 있다

해커가 되기를 바란다면 다음 것들을 믿을 때까지 반복하라.

1. 이 세상은 풀어야 할 매력적인 문제로 가득 차 있다

해커가 되는 것은 매우 재미있는 일이지만, 많은 노력이 필요하다. 이 노력에는 동기부여가 필요하다. 성공한 운동 선수는 자신의 신체를 단련하거나 육체적 한계를 극복함으로써 얻는 기쁨이 동기가 된다. 이처럼 해커가 되려면 문제를 해결하고 자신의 기술을 숙련시키고 지적 능력을 단련하는 데서 오는 원초적인 희열을 느낄 수 있어야 한다.

만약 이런 느낌을 가질 수 없는 사람이라면, 노력해야 한다! 이런 감정을 느낄 수 있어야 해커가 될 수 있다. 그렇지 않다면 여러분의 해킹 에너지는 섹스와 돈, 명성같은 유혹에 약해질 수 있다.

(또한 문제를 해결하는 데 필요한 모든 사항을 알지 못하더라도 일부분을 해결하면 그것을 통해 나머지 부분도 순차적으로 해결할 수 있다는 스스로의 학습 능력에 대한 확신을 해커가 될 때까지 증진시켜 나가야 한다.)

2. 동일한 문제를 반복해서 풀어서는 안 된다

창조적인 두뇌는 소중하고 한정된 자원이다. 새롭게 해결해야 할 매력적인 문제가 많이 있는데, 이러한 자원을 이미 해결된 문제를 다시 해결하는 데 소모해서는 안된다.

해커처럼 행동하려면 다른 해커의 연구 시간도 소중하다는 사실을 알아야 한다. 정보를 공유하는 것과 다른 해커가 오래된 문제를 다시 해결하지 않고 새로운 문제를 해결할 수 있도록 자신이 해결한 문제의 답을 다른 해커에게 공개하는 것은 도덕적인 의무다.

‘문제를 반복해서 풀어서는 안 된다’는 말은 모든 문제에 적용되는 것이 아니라 주어진 문제의 올바른 해법이 하나 밖에 없을 때 적용된다. 간혹 우리는 해법을 공부하기 전에는 풀 수 없었던 문제에서 많은 것을 배운다. 이런 경우에는 문제를 여러번 풀어 보는 것이 도움이 된다. 하지만 사람들로 하여금 바퀴를 다시 발명하게 하는 것같이 좋은 해법을 재사용하지 못하게 하는 기술이나 법률, 폐쇄소스 코드와 같은 제도적 장벽이 문제가 된다.

(창조적 성과물을 모두 공개한다면 다른 해커로부터 최상의 존경을 받겠지만, 이것이 자신의 성과물을 모두 공개해야만 한다는 의미는 아니다. 숙식을 해결하거나 컴퓨터를 사용하는 등의 생계를 유지하려고 자신의 성과를 유료로 판매하는 것은 해커의 가치나 윤리에 전혀 어긋나지 않는다. 또한 가족을 부양하거나 돈을 벌기 위해 자신의 해킹 기술을 이용하는 것도 그 일을 하는 동안 자신이 해커라는 사실을 망각하지 않는다면 문제될 것이 없다.)

3. 권태와 단순 반복은 죄악이다

일반적으로 창조적인 사람과 해커는 권태를 느끼거나 미련하게 반복하는 작업을 해서는 안 된다. 이러한 것들은 새로운 문제를 해결할 수 없게 만들기 때문이다. 이런 자원의 낭비는 모든 사람에게 유감스러운 일이다. 그렇게 때문에 권태와 단조로운 작업은 단순히 불쾌할 뿐만 아니라 죄악과도 같다.

해커로 행동하려면 자신만이 아니라 모든 사람, 특히 다른 해커를 위해 자동화로 가능한 한 모든 반복 요소를 없앨 수 있다고 믿어야 한다.

(그러나 이러한 부분에도 한 가지 분명한 예외가 있다. 해커는 때때로 의심 가는 부분을 확인하거나 기술을 익히기 위해, 혹은 다른 방법으로는 얻을 수 없는 경험을 얻으려고 반복적이고 지루한 일을 하기도 한다. 하지만 이는 스스로의 선택이기 때문에 그 누구도 지루한 일을 강요 받아서는 안 된다.)

4. 자유는 좋은 것이다

해커는 본질적으로 권위주의를 좋아하지 않는다. 여러분에게 명령을 내릴 수 있는 사람이 있다면, 여러분이 매력을 느껴 해결하고자 하는 문제를 풀지 못하도록 중단시킬 수 있다. 또한 권위주의 방식으로 이루어진 일은 일반적으로 끔찍하게 어리석은 이유로 시작되기도 한다. 어디에서든 권위주의적인 태도를 발견하면 다른 해커가 질식하지 않도록 맞서 싸워야 한다.

(이는 모든 권위에 맞서 싸우라는 말이 아니다. 아이와 범죄자는 격리할 필요가 있다. 해커가 권위에 의한 명령을 따름으로써 동일한 시간에 자신이 원하는 것보다 많은 것을 얻어낼 수 있다면, 그런 권위를 따르는 것에 동의할 수 있다. 하지만 이러한 형태는 제한되고 의식적인 타협일 뿐 권위에 굴복하는 형태가 돼서는 안 된다.)

권위주의자는 검열과 비밀을 통해 세력을 확장한다. 자발적인 협력과 정보의 공유를 믿지 않고 통제에 의한 협력만을 신뢰한다. 그렇기 때문에 해커로서 행동하려면 검열과 비밀, 그리고 자신의 의지에 반대되는 행동을 강제하는 데 사용하는 무력이나 기만에 반감을 가져야 한다. 그리고 그러한 신념을 가지고 기꺼이 행동해야 한다.

5. 해커는 마음가짐이 아니라 능력이 있어야 한다

해커가 되려면 앞서 설명한 마음가짐을 가져야 한다. 하지만 이러한 태도를 가졌다고 해서 모두가 해커가 되는 것은 아니다. 운동 챔피언이나 록스타가 마음만 가지고 되는 것은 아니다. 해커가 되려면 지식과 노력, 헌신 그리고 많은 노동이 필요하다.

그러므로 올바른 자세만 가지면 된다는 생각을 버리고 모든 종류의 능력을 존중해야 한다. 해커는 시간을 낭비해서는 안 되고 어떠한 능력을 추구하는 것은 좋지만 특히 해킹 능력을 추구해야 한다. 소수의 사람만이 정통할 수 있는 기술을 가지는 것은 좋은 일이다. 더욱이 정신적인 예리함과 기술 그리고 집중이 필요한 기술을 가진다면 최고의 해커가 될 수 있다.

만약 여러분이 능력을 외경한다면, 스스로가 그런 능력을 가질 수 있도록 노력하는 것을 즐겨보라. 힘든 작업과 일에 전념하면 힘들고 단조로운 일을 진지한 놀이로 만들어 줄 것이다. 이러한 자세가 여러분을 해커로 만들어 줄 것이다.

![](figures/hacker_emblem.jpg "")

## 해킹 기술의 기초

해커의 마음가짐도 중요하지만 기술은 더욱 중요하다. 마음가짐이 능력을 대신할 수는 없다. 해커가 되려면 다음과 같은 기술을 기본적으로 가져야 한다.

새로운 기술이 개발되고 기존의 기술이 낡고 쓸모 없어지면서 기술의 경향은 서서히 바뀌어 간다. 예를 들어, 예전에는 기계어를 이용해서 프로그래밍하는 것이 기본적인 해킹 기술이었지만 지금은 HTML을 사용한다. 그렇기에 현 시점에서는 다음이 필요하다.

1. 프로그래밍을 배우자

당연히 프로그램을 만드는 법을 배우는 것이 해킹의 기장 기본적인 기술이다. 만일 여러분이 컴퓨터 언어를 전혀 접해본 적이 없다면 파이썬`Python`을 배울 것을 추천한다. 파이썬은 간결하게 설계되어 있으며 잘 정리된 문서를 구하기 쉽고 초보자에게 적합하다. 처음 시작하기에 좋은 언어지만 결코 장난감 같은 언어가 아니라 매우 강력하고 유연하며 대형 프로젝트에도 적합한 언어다. 파이썬에 대해서 [좀 더 자세히 써둔 글](http://www.linuxjournal.com/article/3882)이 있다. 파이썬 웹 사이트에도 좋은 [입문서](http://docs.python.org/2/tutorial/)가 있다.

자바`Java`도 초보자에게 적합한 언어로 추천했었지만, 「[처음 배우는 프로그래밍 언어로서의 자바가 가지는 위험](http://www.crosstalkonline.org/storage/issue-archives/2008/200801/200801-Dewar.pdf)」이라는 글을 읽고 생각을 바꾸게 되었다. (링크된 주소에 있는 문서의 한 부분에 해당 내용이 있다.) 해커는 ‘철물점에 있는 배관공’과 같은 방식의 문제 해결 방법을 가질 수 없기 때문에 어떤 구성 요소가 실제로 어떻게 동작하는지 알아야 한다. 그렇기 때문에 이제는 C와 리스프`LISP`를 먼저 배운 뒤에 자바를 배워야 한다고 생각한다.

여기에는 좀 더 일반화된 이야기가 있다. 어떤 컴퓨터 언어가 배우기 어렵다면, 그 언어는 아마도 생산성은 좋지만 배우기는 어려운 언어일 것이다. 언어뿐 아니라 웹 애플리케이션 프레임워크 또한 같은 문제가 있다. 루비온레일스`RubyOnRails`, CakePHP, 장고`Django`를 이용하면 어려운 문제에 당면하거나 해결 방법을 수정할 때 매우 쉽게 사용할 수 있다.

진지하게 프로그래밍을 하고 싶다면, 유닉스의 핵심 언어인 C를 배워야 한다. C++는 C와 깊은 관계가 있다. 둘 중 하나를 알면 나머지 하나는 어렵지 않게 배울 수 있다. 두 언어 모두 첫 번째 언어로 좋은 언어는 아니다. 사실 C로 프로그래밍을 하지 않을수록 생산성은 높아질 것이다.

C는 매우 효율적이고 컴퓨터의 자원을 효과적으로 사용한다. 하지만 C를 효과적으로 사용하려면 메모리와 같은 자원을 저수준에서 직접 관리해 주어야 한다. 저수준 코드는 복잡하고 버그가 생기기 쉬우며 디버깅하는데 엄청난 시간이 필요하다. 근래의 컴퓨터는 매우 강력하기 때문에 이 부분이 상당히 아쉽게 느껴진다. 그렇기 때문에 파이썬 같이 컴퓨터를 효율적으로 사용할 수 있는 언어로 작업하는 것이 효과적이다.

해커에게 중요한 또 다른 언어는 [펄](http://www.perl.com/)`Perl`과 [리스프](http://www.lisp.org/)다. 펄은 실용적인 이유로 배울 필요가 있다. 동적인 웹 페이지와 시스템 관리 등에 펄이 매우 폭넓게 사용되기 때문에 펄로 프로그램을 작성하지 않더라도 코드를 읽을 수 있어야 한다. 많은 사람이 펄을 이런 식으로 사용한다. 나는 시스템 최적화가 필요하지 않은 작업에는 C 대신 파이썬을 사용할 것을 권한다. 여러분은 해당 코드를 이해할 수 있어야 한다.

리스프는 다른 이유로 배워야 할 필요가 있다. 리스프를 배우면 엄청난 경험을 가질 수 있다. 리스프를 그리 많이 사용하지 않는다 하더라도 이런 경험은 남은 여생동안 여러분을 더 좋은 프로그래머로 지낼 수 있게 해 줄 것이다. 이맥스`Emacs`의 편집 모드나 김프GIMP의 [Script-Fu](http://docs.gimp.org/ko/gimp-concepts-script-fu.html) 부가기능`plug-in`을 작성하거나 수정하면서 리스프를 쉽게 배울 수 있다.

사실 파이썬, C/C++, 자바, 펄, 리스프 이 5가지의 언어를 모두 익히는 것이 최선이다. 이 언어들이 가장 중요한 해킹 언어라는 점 이외에도 각각 다른 방식으로 프로그램을 작성하기 때문에 프로그램에 접근하는 다양한 방법을 가르쳐 줄 것이다.

해커 수준의 기술에 도달하지 못했거나 단순히 여러 개 언어를 익힌 프로그래머라면, 특정한 하나의 언어로부터 독립해서 일반적인 문제 해결 방법을 배울 필요가 있다. 진정한 해커가 되려면 이미 아는 방식과 연관 지어 새로운 언어를 며칠 안에 배울 수 있는 수준까지 도달해야 한다. 이 말은 몇 가지 매우 다른 언어를 배워야만 한다는 의미다.

어떤 식으로 프로그래밍하는 법을 배워야 하는 지는 매우 복잡하기 때문에 이 글에서 설명하기는 힘들다. 하지만 책과 수업으로 배울 수 없다는 것은 말해줄 수 있다. 많은 수의, 아마도 대부분의 해커들이 스스로 생각한다. 언어의 기능적인 부분은 책에서 일부 배울 수 있지만 아는 것을 살아 있는 기술로 만드는 사고방식은 연습과 시간으로만 배울 수 있다. 프로그래밍하는 방법을 배우려면 (1) 코드를 읽고, (2) 써보아야 한다.

구글의 최고수 해커이자 AI 분야에서 널리 사용되는 교과서의 공동 저자 피터 노빅`Peter Norvig`은 「10년 안에 프로그래밍 정복하기」라는 훌륭한 글을 썼다. 이 글은 주의 깊게 읽어볼 만한 가치가 있다.[^8-4]

[^8-4]: 역자주 이 글의 한국어 번역문은 <http://tavon.org/teach-yourself-programming-in-ten-yearskorean.html>에서 참고할 수 있다.

프로그래밍을 배우는 것은 컴퓨터 언어가 아닌 일반적인 언어의 작문을 배우는 것과 같다. 좋은 프로그램을 만드는 방법은 대가가 만든 코드를 읽고 자신이 직접 프로그램을 만들어 보는 것이다. 또한 스스로 생각했던 바를 힘과 효율성을 갖춰 개발할 수 있을 때까지 다른 여러 소스를 읽고 작성해보는 작업을 계속 반복해 보아야 한다.

초보 해커가 읽고 수정할 수 있으면서 소스 형태로 되어 있는 대형 프로그램은 거의 없기 때문에 참고할 만한 좋은 코드를 찾는 것은 그리 쉬운 일은 아니다. 하지만 상황이 극적으로 변해 지금은 해커가 만든 오픈소스 소프트웨어와 프로그래밍 도구, 운영체제가 널리 퍼져 있다. 따라서 소스 코드를 쉽게 구할 수 있다.

2. 오픈소스 유닉스 중 하나를 구해서 배우고 운영해 보자

우선 여러분이 개인용 컴퓨터가 있거나 이와 유사한 시스템을 사용할 수 있다는 전제로 이야기해 보려고 한다. (사실 해커 문화의 초기에는 개인이 컴퓨터를 가지기에는 컴퓨터가 매우 비쌌지만 지금은 그렇지 않다.) 초심자들이 해킹 기술을 익힐 수 있는 가장 확실한 첫 번째 단계는 리눅스나 BSD 유닉스 중 하나를 구해 개인용 컴퓨터에 설치한 뒤에 이를 운영해 보는 것이다.

이 세상에는 유닉스 이외에도 많은 운영체제가 있지만, 이런 운영체제는 바이너리 형태로만 배포되기 때문에 소스 코드를 확인하거나 수정할 수 없다. 마이크로소프트 윈도우나 소스가 공개되지 않은 다른 운영체제가 설치된 시스템에서 해킹을 배우려는 것은 마치 깁스를 하고 춤을 배우려는 것과 같다.

맥 OS X에서도 가능하지만 시스템 중 일부만 오픈소스이기 때문에 많은 장벽을 만날 것이다. 또한 애플이 독점하는 코드에 의존하는 좋지 않은 습관이 들지 않도록 주의해야 한다. 유닉스 시스템 내부를 공부하는 데 집중한다면 많은 것을 배울 수 있다.

유닉스는 인터넷의 운영체제다. 유닉스를 모르는 상태라도 인터넷을 배울 수 있다. 하지만 유닉스를 이해하지 못하면 인터넷 해커가 될 수 없다. 이런 이유로 오늘날의 해커 문화는 유닉스를 중심으로 이루어져 있다. (이 말이 항상 옳지는 않다. 오랜 해커 중 일부는 여전히 이 부분에 불만을 토로한다. 그러나 유닉스와 인터넷의 공생 관계는 마이크로소프트도 그 관계를 약화시키지 못할 정도로 꾸준히 강화되어 왔다.)

유닉스를 사용해 보자. 나는 리눅스를 좋아하지만 여러 가지 다른 선택을 할 수 있다. (물론 리눅스와 마이크로소프트 윈도우를 한 컴퓨터에서 동시에 사용할 수도 있다.) 배우고 운영하고 고쳐보며 인터넷에서 이러한 과정을 이야기해보자. 코드를 읽고 수정해 보자. (C, 리스프, 파이썬, 펄을 포함해) 마이크로소프트 운영체제에서 더 좋은 프로그래밍 도구를 접할 수 있으며, 즐거움을 가질 수 있다. 대가들의 뒤를 따르며 배워가다 보면 자신이 생각하는 것보다 더 많은 지식을 흡수하게 될 것이다.

유닉스를 더 배우고 싶으면 「[로지나타카](http://catb.org/~esr/faqs/loginataka.html)`Loginataka`」와 「[유닉스 프로그래밍의 예술](http://catb.org/~esr/writings/taoup/)`The Art of Unix Programming`」[^8-5]을 읽어 보자.

[^8-5]: 역자주 이 책의 한국어판은 『Art of UNIX Programming, Eric S. Raymond, 김희석 옮김, 정보문화사, 2004년, ISBN: 9788956742083』으로 번역·출판되었다. 온라인 문서는 <http://catb.org/~esr/writings/taoup/html>에서 참고할 수 있다.

리눅스는 ‘[리눅스 온라인](http://www.linux.org/)’ 사이트에서 구할 수 있다. 또한 지역 리눅스 사용자 모임`LUG: Linux User Group`에서 설치에 대한 도움을 받을 수 있다.

모든 리눅스 배포판은 초보자의 입장에서 볼 때 거의 동등하다고 나는 지난 10년간 이 글에서 말해왔다. 그러나 2006∼2007년 사이에 [우분투](http://www.ubuntu.com/)`Ubuntu`가 최고의 선택으로 부각됐다.[^8-6] 다른 배포판이 자신만의 영역에서 세력을 키워오는 동안 우분투는 리눅스 초보가 가장 쉽게 접근할 수 있는 배포판이 되었다. 하지만 우분투의 데스크톱 인터페이스는 수년 동안 흉측한데다 사용이 쉽지 않은 ‘[유니티](http://unity.ubuntu.com/)`Unity`’를 기본으로 채용해 왔다. 그렇기 때문에 [주분투](http://xubuntu.org/)`Xubuntu`나 [쿠분투](http://www.kubuntu.org/)`Kubuntu`와 같은 변종의 사용을 권하고 싶다.

[^8-6]: 역자주 우분투는 남아프리카 일대의 반투어로 ‘네가 있으니 내가 있다’, ‘다른 사람을 위한 인간애’ 등의 뜻이 있는 [아프리카의 전통적인 평화 인본주의 사상](http://ko.wikipedia.org/wiki/%EC%9A%B0%EB%B6%84%ED%88%AC_(%EC%82%AC%EC%83%81))을 가리키는 말이다.

BSD 유닉스에 대한 정보와 자원은 [www.bsd.org](http://www.bsd.org)에서 구할 수 있다.

첫발을 내딛는 가장 좋은 방법은 하드 디스크에 설치할 필요 없이 필요한 모든 것이 들어있는 [라이브CD](http://www.livecdnews.com/)를 이용해 부팅해보는 것이다. CD-ROM의 속도 때문에 라이브CD를 이용하는 것은 매우 느리지만, 특별한 조치 없이 많은 것을 둘러볼 수 있는 방법 중 하나다. 또한 나는 [유닉스와 인터넷 기초 HOWTO](http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/)라는 소개 글을 쓰기도 했다.[^8-7]

[^8-7]: 역자주 이 글의 1.1판 한국어 번역문은 <http://wiki.kldp.org/wiki.php/LinuxdocSgml/Unix-InternetFundamentals-HOWTO>에서 참고할 수 있다. 영문 최신판은 2.14판이다.

나는 초심자에게 리눅스나 BSD 설치를 혼자 해보라고 권하지 않았었다. 요즘은 초심자도 모든 과정을 혼자 할 수 있을 만큼 설치 프로그램이 좋아졌다. 하지만 나는 여전히 지역 리눅스 사용자 모임에 도움을 청하고 연락하는 것이 좋다고 생각한다. 어렵지 않을 뿐 아니라 여러 문제를 해결하는 데 도움을 받을 수 있다.

3. WWW를 사용하는 방법과 HTML을 작성하는 방법을 배워보자

해커 문화가 만들어 온 대부분의 것은 눈에 보이지 않게 움직이며 공장과 사무실, 대학이 일반인의 삶에서 문제없이 돌아가도록 도와준다. 해커들의 빛나는 커다란 작품인 웹은 하나의 큰 예외로 정치인들조차 웹 때문에 세상이 바뀌어 가는 것을 인정한다. 다른 많은 이유가 있지만 이 한 가지 사실만으로도 웹이 어떤 식으로 작동하는지를 배울 필요가 있다.

웹의 작동 방법을 배운다는 것은 누구나 할 수 있는 브라우저 이용법을 배우는 것이 아니라 웹의 마크업 언어인 HTML`HyperText Markup Language`을 작성하는 방법을 배운다는 뜻이다. 만일 여러분이 프로그램을 작성하는 방법을 모른다면 HTML 작성이 프로그램을 이해할 수 있는 사고방식을 기르는 데 약간의 도움이 될 수 있다. 따라서 HTML을 이용해서 홈페이지를 만들어 보자. 그리고 고전적인 HTML보다 명확한 언어인 XHTML`eXtensible HyperText Markup Language`을 지킬 수 있게 노력해 보자. (<http://htmldog.com/>에서 초심자에게 좋은 지침서를 참고할 수 있다.)

그러나 단지 홈페이지를 만드는 것으로 해커가 되는 일에 근접하는 것은 아니다. 웹은 많은 홈페이지로 가득 차 있으며 별다른 가치가 없거나 내용이 없는 경우가 많다. (<http://catb.org/~esr/html-hell.html>에서 바람직하지 않은 예를 참고할 수 있다.)

홈페이지를 가치 있게 만들려면 의미 있는 내용이 있어야 하며, 다른 해커들에게 흥미나 도움을 줄 수 있어야 한다. 그럼 이제 다음 주제로 넘어가 보자.[^8-8]

[^8-8]: 역자주 HTML을 배우는 첫 단계부터 좋은 디자인 방법과 접근성에 대한 올바른 인식을 갖는 것이 중요하다. 접근성(accessibility)이란 컴퓨터와 웹을 자유롭게 활용하는데 제약이 있는 장애인 등도 비장애인과 동등하게 원하는 정보에 접근할 수 있게 하는 디자인 기준이다. <http://www.gnu.org/accessibility/>와 <http://www.wah.or.kr/w3c_doc/>가 좋은 참고가 될 수 있다.

4. 영어에 익숙하지 않으면 영어를 배우자

나는 미국인이며 영어를 모어로 사용하기 때문에 제국주의 문화의 하나로 보여질듯해서 영어 학습을 권하는 것을 주저했다. 하지만 다른 언어를 사용하는 여러 사람이 영어가 해커 문화와 인터넷의 공용어이며, 해커 공동체에서 일익을 담당하려면 영어를 알아야 한다는 사실을 알리라고 충고해 주었다.

1991년에 나는 모어가 아닌 두 번째 언어로서 기술적인 대화를 영어로 하는 해커가 많다는 것을 알게 되었다. 당시에는 어떤 언어보다 영어에 기술적인 어휘가 많았기 때문에 영어가 작업 수단으로 가장 좋은 언어였다. 유사한 이유로 영어로 쓰여진 기술 책의 번역은 가끔 불만족스러웠다.

핀란드인 리누스 토르발스`Linus Torvalds`는 코드의 주석을 영어로 작성했다. 듣자 하니 다른 경우에는 그렇게 한 적이 없다고 한다. 토르발스의 유창한 영어는 전세계적인 리눅스 개발자 공동체를 만드는데 중요한 역할을 했다. 이것은 참고해 볼만한 예다.

원어민처럼 말할 수 있게 된다고 해서 해커가 되는 데 필요한 글쓰기 능력이 있다는 것을 보증하지는 않는다. 반 문맹에 가깝고, 문법에 맞지 않고, 철자 오류 때문에 난해한 글을 쓴다면 나를 포함한 많은 해커가 여러분을 무시할 것이다. 엉성한 작문은 엉성한 생각에서 비롯되며, 이 둘의 상관관계를 쉽게 찾을 수 있기 때문에 엉성하게 생각하는 사람을 좋아하지 않는다. 능숙하게 글을 쓰지 못한다면 글 쓰는 법을 배워야 한다.

![](figures/hacker_emblem.jpg "")

## 해커 문화 안에서의 지위

화폐경제가 개입되지 않는 대부분의 문화가 그렇듯이 해커 문화는 명성에 의해 움직인다. 여러분이 재미있는 문제를 풀려고 노력한다면, 문제가 얼마나 재미있는 지와 여러분의 해법이 얼마나 훌륭한 지는 보통 기술적으로 비슷한 수준의 동료나 기술적으로 우위에 있는 사람이 판단할 수 있다.

따라서 해커 게임을 한다고 할 때, 다른 해커가 여러분의 기술을 어찌 평가하느냐에 따라 여러분의 평가가 이루어진다는 점을 알아야 한다. (이러한 이유 때문에, 다른 해커가 여러분을 해커라 부르기 전까지는 여러분은 해커가 아닌 것이다.) 자아와 다른 사람의 인정이 본인의 동기에 영향을 준다는 것은, 해킹은 혼자 작업하는 것이라는 이미지와 해커 문화의 금기 때문에 잘 알려져 있지 않다. 1990년대의 후반 이래로 이러한 금기는 점차 사라져 가지만 여전히 존재하기는 한다.

특히 해커 문화는 인류학자가 말하는 ‘증여문화’에 해당한다. 해커 문화에서는 다른 사람을 지배하거나, 아름다워지거나, 다른 사람이 원하는 것을 획득하는 방법이 아니라 자신의 것을 주는 방법으로 지위와 명성을 얻을 수 있다. 즉 자신의 시간과 창의성, 기술 결과물을 공짜로 공개하는 방법으로 지위와 명성을 얻을 수 있다.

다음 5가지 방법으로 다른 해커의 존경을 받을 수 있다.

1. 오픈소스 소프트웨어를 만들라

가장 전통적이고 기본적인 방법은 다른 해커가 흥미를 느끼거나 유용하게 사용할 수 있는 프로그램을 만들고 프로그램의 소스 코드를 해커 문화에서 사용할 수 있도록 공개하는 것이다.

(우리는 이러한 프로그램을 ‘자유 소프트웨어’라고 부른다. 그러나 자유 소프트웨어에서 사용하는 ‘자유’의 영어 표기인 ‘free’는 자유와 무료라는 두 가지 의미가 모두 있기 때문에 사람들은 정확한 의미를 혼동하곤 한다. 그래서 근래에는 ‘[오픈소스](http://opensource.org/)`open source`’ 소프트웨어라는 말을 더 많이 사용한다.)

해커 문화 안에서 존경 받는 대부분의 해커는 많은 사람의 요구를 충족시킬 수 있는 광범위하고 유용한 프로그램을 많은 사람이 사용할 수 있게 무료로 공개한 사람이다.

여기서 한 가지 짚고 넘어가야 할 것이 있다. 해커들은 항상 공동체 안의 가장 어려운 일을 하는 오픈소스 개발자를 우러러 보았지만, 1990년대 중반 이전에는 해커 대부분이 폐쇄소스`closes source software`를 개발하는 데 대부분의 시간을 보냈다. 이는 이 문서를 처음 작성한 1996년까지도 사실이었다. 하지만 1997년 이후에는 오픈소스 소프트웨어가 주류가 됐다. 요즘은 ‘해커 공동체’와 ‘오픈소스 개발자’를 동일한 것으로 간주하기도 하지만 항상 그런 것은 아니라는 점에 주의해야 한다. (자세한 이야기는 이 글의 뒷부분 ‘역사 이야기: 해킹, 오픈소스, 자유 소프트웨어’에서 살펴보자.)

2. 오픈소스 소프트웨어의 테스트와 디버깅에 참여하라

오픈소스 소프트웨어의 디버깅에 참여하는 사람도 해커로 인정받을 수 있다. 완벽한 소프트웨어는 없기 때문에 필연적으로 디버깅에 소프트웨어 개발 시간의 대부분을 할애할 수밖에 없다. 바로 이런 점이 오픈소스 개발자들이 좋은 베타 테스터를 몸무게만큼의 보석과도 같은 가치가 있다고 생각하는 이유다. 좋은 베타 테스터는 문제를 명확하게 설명할 수 있고, 문제의 원인을 잘 찾아낼 수 있으며 촉박하게 만들어진 프로그램에 포함된 버그도 인내를 갖고 테스트할 수 있다. 또한 간단한 진단 테스트를 기꺼이 수행해 줄 수 있는 사람이다. 오랫동안 지연되는 악몽 같은 디버깅 작업이 되느냐 아니면 단지 가벼운 골치거리가 되는가의 차이는 이러한 기준 중 하나 때문에 달라지기도 한다.

만약 여러분이 유닉스 초심자라면 흥미를 갖고 좋은 베타 테스터가 될 수 있을 만한 프로그램을 찾아 참여해 보자. 이는 프로그램을 테스트하는 것을 돕는 것부터 시작해서 프로그램을 디버깅하는 단계로, 그리고 프로그램을 개작하는 단계까지 자연스럽게 발전할 수 있는 방법이다. 이러한 방법에서 많은 것을 배울 수 있으며 훗날 여러분을 도와줄 사람들과의 좋은 인연을 만들 수 있을 것이다.

3. 유용한 정보를 제공하라

해커들의 존경을 받을 수 있는 또 하나의 좋은 방법은 흥미 있고 유용한 정보를 모아 웹 페이지나 FAQ 형식의 문서로 만든 뒤에 다른 사람이 쉽게 이용할 수 있도록 하는 것이다.

주요 기술 FAQ의 유지관리자는 오픈소스 프로그램 저자에 버금가는 존경을 받는다.

4. 인프라를 유지하는 작업에 참여하라

인터넷 기술 개발을 포함한 해커 문화는 자원자들이 운영한다. 인터넷이 지속되기 위해서는 메일링리스트를 관리하거나 뉴스그룹을 조정하는 일, 그리고 대규모 소프트웨어 자료 보관 사이트`archive`를 유지하고, RFC`Request For Comments`와 그 밖의 기술 표준 문서를 개발하는 것과 같이 멋지고 재미있지는 않지만 꼭 필요한 일들이 계속되어야만 한다.

이러한 종류의 일을 하는 사람은 많은 존경을 받는다. 이러한 일은 많은 시간을 투자해야 하며 프로그램 코드로 작업하는 일보다 지루한 작업이라는 것을 모든 사람이 알기 때문이다. 이러한 일을 한다는 것 자체가 해커 문화와 공동체에 헌신한다는 것을 의미한다.

5. 해커 문화 자체에 봉사하라

마지막 방법은 해커 문화 자체에 기여하고 해커 문화를 더 널리 확산시키는 것이다. 예를 들어, 이 글과 같은 해커가 되는 방법을 확실히 알려주는 입문서를 쓰는 일 등이다. :-) 이런 일은 합당한 지위를 가져야 하거나 앞서 언급한 4가지 사항을 잘 알아야 할 수 있는 것은 아니다.

정확히 말해서, 해커 문화 안에 지도자가 따로 있지는 않다. 그러나 영웅과 원로, 역사가와 선구자는 존재한다. 만약 여러분이 해커 문화 안에 오래 남아 있게 된다면, 그러한 사람 중 한 사람이 될 수도 있다. 그러나 해커는 자신을 떠들썩하게 내세우는 원로를 싫어하기 때문에 그러한 평판을 얻는 것은 위험하다는 사실을 명심하라. 명성과 지위를 획득하려고 일부러 노력하지 말고 자신에게 스스로 찾아올 수 있도록 하라. 그리고 자신이 얻은 지위에 겸손하고 감사해야 한다.

![](figures/hacker_emblem.jpg "")

## 해커와 너드의 관계

알려진 것과는 달리 해커가 되려고 너드`nerd`가 될 필요는 없다. 그러나 너드가 되는 것은 해커가 되는 데 도움이 되며, 실제로 많은 해커가 너드이기도 하다. 일반적인 단어의 의미에서 ‘너드’는 사회부적응자를 말하기도 하지만 컴퓨터와 해커 문화에서 의미하는 것은 다르다. 사회적인 접촉에서 스스로를 격리하는 것은 사색과 해킹과 같은 중요한 일에 집중하는 데 도움이 된다.

이런 이유로 그리고 지금은 많은 해커가 ‘너드’보다 좋은 표현으로 여기는 ‘기크`geek`’라는 단어를 자긍심의 배지처럼 사용한다. 이것은 다른 일반적인 사회적 예상과 달리 자신이 독립적으로 행동한다는 것을 (또한 공상과학이나 전략 게임 같이 흔히 해커에게 잘 어울리는 것들을 좋아한다고) 선언하는 한 방법이다. 너드라는 단어는 이런 의미에서 1990년대부터 사용돼 왔는데, 당시에는 ‘너드’가 경멸적인 의미가 덜한 표현이었고 ‘기크’가 좀 더 가혹한 의미로 사용되었다. 그러나 2000년대 이후부터 적어도 미국의 인기 있는 문화 안에서는 이 단어들의 위치가 서로 바뀌었다. 지금은 기술자가 아닌 사람들조차 기크를 자긍심과 의미가 있는 단어로 사용하는 문화가 있다.

만약 여러분이 해킹에 전념해 좋은 성과를 얻을 수 있는 동시에 삶을 만족스럽게 유지할 수 있다면 이것은 매우 좋은 일이다. 이것은 내가 초심자였던 1970년대보다 근래에 더 수월해 졌다. 왜냐하면 현재의 주류문화는 기술 너드에 더 우호적이기 때문이다. 심지어 해커가 더 좋은 연애 상대와 배우자 감이라고 인정하는 사람도 점점 늘어나고 있다.

만약 여러분이 일반적인 삶을 갖지 않아 해킹에 매력을 느끼게 되었어도 그 또한
나쁘지 않다. 최소한 집중하는 데 문제가 없을 것이기 때문이다. 시간이 흐르면 원
하는 삶을 갖게 될 지 모른다.

![](figures/hacker_emblem.jpg "")

## 해커에게 어울리는 것들	

다시 한번 반복하면, 해커가 되려면 해커의 정신을 익히지 않으면 안 된다. 여기에 여러분이 컴퓨터 앞에 없을 때 할 수 있을 만한 것들이 있다. 물론 해킹을 대신할 수 있는 것은 아니지만 많은 해커가 이를 실행 중이며 해킹의 본질과 통하는 기본적인 공통점이 있다고 느낀다.

* 자신의 모어를 잘 사용할 수 있도록 훈련하라. 내가 아는 최고의 해커를 포함한 매우 많은 해커들이 작가로서의 소양을 갖고 있다.

* 공상과학 소설을 읽으라. 공상과학 소설 모임에 참석하라. (이것은 해커와 원로 해커들을 만날 수 있는 좋은 방법이다.)[^8-9]

[^8-9]: 역자주 추천할 만한 SF 자료로 [아이디어회관 도서 복원 사이트](http://paedros.byus.net/sfjikji/)가 있다. 이것은 아이디어회관이 1970∼1980년대에 발행한 가장 대표적인 공상과학 소설 60편을 디지털 파일로 복원해 공개한 것이다.

* 무예를 배워라. 이런 종류의 정신적 훈련은 해킹과 유사한 면이 있다. 해커 사이에서 가장 인기 있는 무예는 맨손으로 하는 동양 무술인 태권도, 가라데, 쿵푸, 합기도, 유술 등이다. 서양의 펜싱과 동양의 검도 역시 유명하다. 1990년대 이후로 법적으로 허용되는 곳에서는 사격도 유명하다. 해커에게는 강하고, 활동적이며, 물리적으로 강한 무술보다는 정신적인 수련을 강조하고 의식의 긴장을 풀어주는 무예가 좋다.

* 실제 명상 수련을 해 보라. 선`禪`은 오랫동안 해커의 사랑을 받아왔다. (중요한 점은 선을 종교로 가지거나 기존의 종교를 부정하지 않아도 수련으로 배울 수 있다는 것이다.) 다른 수련 방법도 있지만 이상한 것을 믿으라고 요구하지 않는지 선택할 때 주의해야 한다.

* 음악을 분석적으로 들을 수 있도록 노력하라. 특정한 장르의 음악을 평가할 수 있도록 견문을 넓히라. 악기를 잘 연주하거나 노래를 잘 부를 수 있게 연습하라.

* 농담이나 언어 유희에 대한 이해를 높여라.

이들 중에서 이미 하고 있는 것이 많으면 많을수록 해커로서의 자질 또한 많다고 할 수 있다. 왜 이러한 것들이 도움이 되는 지 명백하게 밝혀진 것은 없지만, 이러한 것들은 우뇌와 좌뇌를 균형 있게 사용하는 데 도움이 되는 것으로 보인다. 해커에게는 논리적인 추론 능력과 문제를 직관적으로 파악할 수 있는 감성이 모두 필요하다.

열정적으로 놀고 열정적으로 일하라. 진정한 해커라면 ‘놀이’와 ’일’, ‘과학’, ‘예술’사이의 경계를 없애거나, 이를 이용해서 높은 수준의 창의적인 농담을 할 수 있을 것이다. 그리고 현재 기술에 만족하지 않을 것이다. 해커 대부분은 스스로를 프로그래머라 말하며 시스템 관리, 웹 디자인, PC 하드웨어 수리와 같은 다양한 기술을 익히고 싶어한다. 해커가 시스템 관리자라면 스크립트 프로그래밍과 웹 디자인을 익히고 싶어한다. 해커는 일을 대충하지 않는다. 무언가 하나를 배우기 시작하면 해커는 곧 능숙한 사람이 될 것이다.

마지막으로, 다음은 해서는 안 되는 일이므로 주의하기 바란다.

* 어리석고 과장된 이름이나 영화에 나온 이름을 ID로 사용하지 말라

* 유즈넷 또는 어느 장소에서도 싸움에 끼어들지 말라

* 자신을 사이버펑크`cyberpunk`라고 부르지 말고, 자신의 시간을 누구나 하는 일에 소
모하지 말라

* 철자가 틀리고 문법에 맞지 않는 메일을 보내거나 글을 올리지 말라

위와 같은 일을 해서 얻는 건 비난과 조소뿐이다. 해커는 쉽게 잊지 않는다. 따라서 자신의 실수를 만회하려면 많은 세월이 필요하다.

영화에서 나온 이름이나 별명을 ID로 사용하는데 따른 문제점은 별명을 이용해서 자신의 신분을 감추는 것이 와레즈 듀드스`warez d00dz`나 다른 저급한 형태의 크래커가 가진 어리석고 치기 어린 행동 양식이기 때문이다. 해커는 이렇게 하지 않는다. 해커는 그들이 해 놓은 것을 자랑스럽게 여기며 여기에 실명이 거론되는 것을 원한다. 따라서 만약 여러분에게 별명이 있다면 별명을 버리도록 하라. 해커 문화에서 별명을 사용하는 것은 자신이 3류라는 것을 의미할 뿐이다.

![](figures/hacker_emblem.jpg "")

## 역사 이야기: 해킹, 오픈소스, 자유 소프트웨어

1996년 후반에 내가 이 글을 쓰기 시작했을 때와 지금은 여러 가지 상황이 많이 바뀌었다. 혼란을 가진 사람들을 위해 해커 공동체가 사용하는 단어 중 몇 개인 오픈소스, 자유 소프트웨어, 리눅스의 차이를 명확히 설명하는 편이 좋을 것 같다. 이 주제에 관심이 없다면, ‘[참고할 만한 다른 문서](link-ref)’나 ‘[자주 묻는 질문들에 대한 답변 FAQ](link-faq)’부분으로 바로 넘어 가도 좋다.

이미 설명했던 것처럼 리눅스가 나타난 1990년대 이전에도 해커들은 오랫동안 공동체와 문화를 갖고 있었다. 이 문화는 1960년대로 거슬러 올라가지만 내가 처음 관여하기 시작한 것은 1976년쯤이다. 리눅스 이전에는 해킹의 대부분이 사유 운영체제`proprietary operating systems`나 학계 외부에서는 사용하지 않는 MIT의 ITS와 같은 학문적인 용도로 이루어졌으며, 가내 수공업과 유사한 방식으로 이루어졌다. 리눅스 이전에도 이런 상황을 바꾸려는 시도가 있었지만, 해커 공동체 안에서도 소수의 지지자만이 그 시도를 받아들였을 뿐 결과가 큰 영향을 주지는 못했다.

지금 ‘오픈소스’라 불리는 것의 실체는 오래 전 해커 공동체까지 거슬러 올라가지만, 1985년 이전에는 강령이나 이론에 기반한 의식적인 운동이라기보다 이름 없는 사람의 운동과도 같았다. 해커 문화의 역사에서 이런 선사시대는 1985년에 가장 중요한 해커 리처드 스톨먼`Richard Stallman`이 ‘자유 소프트웨어’라는 용어를 만들면서 끝난다. 하지만 ‘자유 소프트웨어’라는 이름에는 해커 공동체 대부분이 이전까지 받아들이지 않던 이념적인 성향이 결부되어 있었다. 그 결과 때문에 특히 BSD 유닉스와 관련 있는 해커 공동체 안의 소수 핵심층은 이 용어를 받아들이지 않았다. 나를 포함한 나머지 해커 대부분은 이 단어를 사용했지만 내심으론 의구심이 있었다.

이러한 의구심에도 ‘자유 소프트웨어’의 기치 아래 해커 공동체를 정의하고 이끌어 가려는 RMS`리처드 스톨먼`의 주장은 1990년대 중반까지 널리 확산됐다. 리눅스의 성장에 대한 진지한 도전이었다. 리눅스는 오픈소스 개발의 고향과도 같은 것이다. 많은 프로젝트가 ‘오픈소스 프로젝트’라는 이름을 사용하며 유닉스에서 리눅스로 옮겨갔다. RMS는 결연하게 이 모든 행동을 ‘자유 소프트웨어’ 운동으로 끌어들이려 했지만, 다양한 리눅스 공동체의 성장과 리눅스의 창시자 리누스 토르발스의 회의론이 그 계획을 좌절시켰다. 토르발스는 ‘자유 소프트웨어’라는 단어를 대체할 다른 말이 없어 계속 사용했지만, 공공연하게 RMS의 이념적 신조에 반대했다. 많은 젊은 해커가 이에 동조했다.

1996년에 처음으로 「해커가 되는 방법」을 발표했을 때, 해커 공동체는 리눅스와 몇가지의 다른 오픈소스 운영체제, 특히 BSD에서 파생된 운영체제로 급속하게 재편됐다. 폐쇄소스 운영체제에서 폐쇄소스 소프트웨어를 수십 년간 개발해 오던 공동체는 점점 희미해졌고, 이 사실은 점점 잊혀진 과거로 보이기 시작했다. 해커는 리눅스와 아파치 같은 오픈소스 프로젝트에 점점 더 참여하면서 스스로를 해커라 칭했다.

‘오픈소스’라는 단어는 1998년 초까지 명확하지 않았다. 그러나 ‘[오픈소스 이니셔티브](http://opensource.org/)’가 오픈소스의 의미를 명확히 정의하자, 그 후 6개월간 해커 공동체 대부분이 이를 받아들였다.[^8-10] 일부 예외가 있다면 이념적으로 ‘자유 소프트웨어’란 용어를 사용하는 소수 집단의 경우다. 1998년 이후로 특히 2003년에는 ‘해킹’, ‘오픈소스’, ‘자유 소프트웨어’의 개발이 극단적으로 가까운 의미가 됐다. 이 단어들의 의미를 구분하려는 작은 시도가 있었지만, 지금도 또한 미래에도 쉽게 바뀔 것 같진 않다.

[^8-10]: 역자주 ‘오픈소스’라는 용어가 만들어진 상세한 과정과 설명은 리처드 스톨먼의 전기 『Free as in Freedom, Sam Willams, O’Reilly, 2002, ISBN: 9780596002879』의 11장 「오픈소스」에서 참고할 수 있다.

언제나 그래야 하는 것은 아니지만, 이러한 내용은 기억해 둘 필요가 있다.

![](figures/hacker_emblem.jpg "")

## 참고할 만한 다른 문서

폴 그레이엄(Paul Graham)은 「[위대한 해커](http://www.paulgraham.com/gh.html)」와 「[대학 시절에 해야 할 일](http://www.paulgraham.com/college.html)」이라는 많은 지혜가 담긴 글을 썼다.[^8-11]

[^8-11]: 역자주 해커 문화에 대한 폴 그레이엄의 책도 유익한 내용을 많이 담고 있다. 『해커와 화가, 임백준 옮김, 한빛미디어, 2005년, ISBN: 8979143427』

또한 「[프로그래머가 되는 방법](http://samizdat.mines.edu/howto/HowToBeAProgrammer.html)」[^8-12]이라는 해당 주제를 매우 잘 설명한 문서가 있다. 코딩과 기술뿐만 아니라 프로그래밍 팀을 어떤 식으로 운영하는지를 설명하는 좋은 이야기가 쓰여져 있다.

[^8-12]: 역자주 이 글의 한국어 번역문은 <http://wiki.kldp.org/wiki.php/HowToBeAProgrammer>에서 참고할 수 있다.

내가 쓴 글 중에 「[해커 문화의 짧은 역사](link-brief-history)」가 있다.

리눅스와 오픈소스 문화가 어떤 식으로 운영되는 지를 설명한 「[성당과 시장](link-catb)」이 있다. 「성당과 시장」의 속편 격인 「[얼누리의 개간](link-)」은 이 주제를 좀 더 직접적으로 다룬다.

릭 모엔`Rick Moen`은 「[리눅스 사용자 모임을 운영하는 방법](http://linuxmafia.com/faq/Linux_PR/newlug.html)」을 잘 정리한 문서를 썼다.

릭 모엔과 나는 「[현명하게 질문하는 방법](http://catb.org/~esr/faqs/smart-questions.html)」을 함께 만들었다. 원하는 답을 얻는 데 도움을 청하는 방법을 이 글에 설명해 놓았다.

컴퓨터와 유닉스, 인터넷의 기본 사용법을 알고 싶다면, 「[유닉스와 인터넷 기초HOWTO](http://www.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/)」[^8-13]를 참고할 수 있다.

[^8-13]: 역자주 이 책의 한국어판은 『Art of UNIX Programming, Eric S. Raymond, 김희석 옮김, 정보문화사, 2004년, ISBN: 9788956742083』으로 번역·출판되었다. 온라인 문서는 <http://catb.org/~esr/writings/taoup/html>에서 참고할 수 있다.

소프트웨어를 공개하거나 패치를 작성할 때는 「[바람직한 배포본 제작HOWTO](http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html)」[^8-14]를 참고할 수 있다.

[^8-14]: 역자주 이 글의 한국어 번역문은 <http://wiki.kldp.org/wiki.php/DocbookSgml/Software-ReleasePractice-HOWTO>에서 참고할 수 있다.

선시를 좋아한다면, 「[근거 없는 근거: 대가의 유닉스 선문답](http://www.catb.org/~esr/writings/unix-koans/)」[^8-15]이 좋은 읽을 거리가 될 수 있을 것이다.

[^8-15]: 역자주 이 글은 <역자주 13>의 책에 「부록 D: 도사 푸의 유닉스 공안」이란 제목으로 실려있다.

![](figures/hacker_emblem.jpg "")

## 자주 묻는 질문들에 대한 답변: FAQ

**질문: 언제 나는 해커라고 말할 수 있는가?**<br/>
답변: 다음 3가지 질문을 스스로에게 해보자.

* 코드 이야기를 자주 하는가?
* 해커 공동체의 가치와 목표에 공감하는가?
* 해커 공동체에 확실히 자리 잡은 구성원이 여러분을 해커라 부른 적이 있는가?

이 3가지 질문에 모두 ‘네’라고 답할 수 있다면 당신은 이미 해커다. 2가지로는 충분치 않다.

첫 번째는 기량에 대한 질문이다. 이 글의 시작 부분에서 설명한 최소한의 기술적 소양이 있다면, 이 질문을 무난히 통과할 수 있다. 만약 오픈소스 개발 프로젝트에 참여해 많은 코드를 만들었다면 제대로 하고 있는 것이다.

두 번째는 태도에 대한 질문이다. 여러분이 ‘[해커의 마음가짐]()’ 단락에서 설명한 5가지 원칙대로 살며, 이미 그 이상으로 생활한다면 반쯤은 통과한 것이다. 나머지 반은 해커 공동체의 장기적인 프로젝트와 함께 증명해 가야 한다. 다음은 완전한 것은 아니지만 그러한 프로젝트의 특성들이다.

* 리눅스를 개선하고 확산하는 일이 중요한가?
* 소프트웨어의 자유에 열정을 가졌는가?
* 독점에 적대적인가?
* 컴퓨터가 세상을 더욱 더 인간적이고 부유하게 만드는 역량 강화의 계기가 된다는 믿음을 갖고 행동하는가?

그러나 우선순위에 주의해야 한다. 해커 공동체는 특정 정치 관점에 방어적인 경향이 있다. 그 중 2가지가 자유로이 말할 권리와 오픈소스를 불법적으로 만드는 지식 재산권`intellectual property rights`에 대한 것이다. 장기 프로젝트 중 일부는 [전자개척재단](https://www.eff.org/)`EFF: Electronic Frontier Foundation` 같은 기관이며, 외적으로는 자유인권 시민 활동을 지원한다. 하지만 대부분의 해커는 해커의 자세를 정치적인 프로그램으로 체계화하려 한다는 의혹을 갖고 있으며, 그 때문에 공동체의 분열이 조장된다고 생각한다. 누군가가 해커의 태도라는 명목 아래 국회 앞에서 시위를 하기 위해 여러분을 고용하려 한다면 무언가 잘못 생각하는 것이다. 이런 행동에 대한 올바른 반응은 “닥치고 코드나 내놔!”일 것이다.

세 번째 질문은 재귀적 요소를 가진 교묘한 질문이다. ‘[해커란 누구인가]()?’ 단락에서 해커가 되는 것은 특정 하위문화 또는 누리 소통망`소셜 네트워크`의 일원이 되어 내부와 외부에서 역사를 공유하는 것이라고 말했다. 오래 전에는 지금보다 결속력이 약했고 자의식이 강하지 않았다. 그러나 지난 30년 동안 인터넷이 해커 하위문화의 핵심 사이를 연결해 개발과 관리를 쉽게 만들었던 것처럼 누리 소통망의 중요도도 증가했다. 이번 세기에 생긴 이러한 변화를 쉽게 확인할 수 있는 것 중 하나는 우리가 ‘우리의 T-셔츠’를 가졌다는 점이다.

‘보이지 않는 동료’들의 관계로 구성된 해커 문화를 연구하는 사회학자들은 이러한 네트워크가 가진 특징의 하나로 문지기`gatekeeper`가 있다는 것에 주목한다. 문지기는 사회적으로 인정받은 핵심 구성원으로 새로운 구성원이 네트워크에 참여하도록 한다. 해커 문화에서 ‘보이지 않는 동료’는 느슨하고 격식이 없기 때문에 문지기의 역할 또한 격식이 없다. 하지만 모두가 문지기는 아니라는 사실을 모든 해커가 뼛속 깊이 이해하고 있다. 선배로서의 지위와 성취를 가져야만 문지기가 될 수 있다. 그것이 얼만큼이어야 하는지를 정량화하기는 힘들지만, 모든 해커들은 그것을 자연스럽게 알 수 있다.

**질문: 해킹 방법을 가르쳐 줄 수 있는가?**<br/>
답변: 이 글이 발표된 직후부터 나는 일주일에 몇 번씩, 가끔은 하루에도 몇 번씩 “해킹 방법의 모든 것을 알려 달라!”는 메일을 받는다. 그러나 불행히도 나는 그럴만한 충분한 시간과 에너지가 없다. 나 자신의 해킹 프로젝트에만 내 시간의 110% 이상을 투자해도 모자란 것이 현실이다.

비록 내가 해킹 방법을 알려줄 수 있다고 해도 해킹은 기본적으로 스스로 익혀나가야 하는 기술과 태도다. 만약 여러분을 도와줄 해커를 찾았다고 해도 여러분이 지식을 수동적으로 받기만 원한다면, 다른 해커로부터 존중 받지 못할 것이다.

몇 가지 정도를 먼저 배우고 노력해보라. 학습할 수 있는 능력이 있다는 것을 스스로 입증해보라. 그런 뒤에 갖게 되는 특정한 질문을 해커에게 물어보도록 하라.

해커에게 조언을 구하려고 메일을 보낼 때는 다음 2가지 사항을 알아야 한다. 첫째, 글을 쓰는데 있어 게으르고 부주의한 사람은 일반적으로 좋은 해커가 될 수 있는 사고 역시 게으르고 부주의 하다고 생각된다. 철자에 주의해야 하며, 문법과 구두법에도 주의를 기울여야 한다. 그렇지 않으면 답을 얻기 어려울 것이다. 두 번째, 메일을 보낸 계정과 다른 ISP 계정으로 답을 달라고 요청해서는 안 된다. 이런 사람은 대부분 훔친 계정을 사용한 경우가 많다. 해커들은 도둑질에 도움을 주고 보답을 받을 생각이 없다.

**질문: 어떻게 시작해야 하는가? 시작한 후에는 무엇을 해야 하는가?**<br/>
답변: 최선의 방법은 LUG`리눅스 사용자 모임`을 이용하는 것이다. LUG에 대한 정보는 [LDP 리눅스 일반 정보 안내](http://www.tldp.org/links/index.html)에서 참고할 수 있다. 아마도 여러분이 찾을 수 있는 인근의 LUG는 대학에 있을 확률이 높다. 여러분이 요청한다면 LUG에서 리눅스 배포판을 제공해 주거나 설치와 사용에 도움을 줄 것이다.

다음 단계는 관심이 가는 오픈소스 프로젝트를 찾는 것이다. 코드를 읽고 버그를 찾는 것부터 시작해보자. 기여하는 법을 배우고 하고 싶은 것을 해보자.

해보는 것이 실력 향상을 위한 유일한 방법이다. 만일 내게 어떤 식으로 시작했는지 개인적인 조언을 구한다면, 나는 마법 같은 지름길을 알지 못하기 때문에 앞서 말한 것과 똑같이 이야기할 것이다. 그리고 여러분이 이 FAQ를 읽을 만한 체력도 없고, 해보는 것이 실력 향상을 위한 유일한 방법이라는 것을 이해할 만한 지혜도 없다고 여겨 마음속으로 여러분을 패배자로 생각할 것이다.

**질문: 시작하기에 너무 늦은 나이인 것 같다. 당신은 언제부터 시작했는가?**<br/>
답변: 시작하고 싶은 동기를 느낀 나이가 가장 좋은 나이다. 늦었다고 생각할 때가 가장 빠른 때인 것이다. 대부분의 사람은 15∼20살 사이에 시작하는 것 같다. 하지만 나는 이보다 많은 나이나 적은 나이에 시작한 경우를 모두 알고 있다.

**질문: 해킹을 배우는 데 시간이 얼마나 걸리는가?**<br/>
답변: 갖고 있는 재능과 노력으로 얼마나 열심히 하느냐에 달려 있다. 대부분의 경우 최선의 노력을 한다고 가정할 때 약 18개월에서 2년 정도의 시간이면 고급 기술을 익힐 수 있다. 그러나 거기에 만족해서는 안 된다. 만약 진정한 해커가 되고자 한다면, 자신의 기술을 갈고 닦는 데 남은 여생을 모두 투자해야 한다.

**질문: 처음 배우는 언어로 비주얼 베이직이 적당한가?**<br/>
답변: 이 질문은 여러분이 마이크로소프트의 윈도우 환경에서 해킹을 시도할 것을 염두에 두었다는 의미가 짙다. 일단 그 자체로도 좋은 생각이 아니다. 윈도우 환경에서 해킹을 시도하는 것은 깁스를 한 채로 춤을 배우려는 것과 같다. 이는 농담이 아니다. 비주얼 베이직으로 시작하지 않는 것이 좋다. 나쁜 생각이며, 결코 좋아질 수 없다.

비주얼 베이직에는 또 다른 문제가 있다. 바로 이식성이 없다는 점이다. 비주얼 베이직을 오픈소스로 구현한 시제품이 있지만, ECMA`European Computer Manufacturers Association`표준으로 사용이 불가능할 만큼 프로그래밍 인터페이스의 한 부분만 구현돼 있다. 윈도우에서 대부분의 라이브러리 지원은 한 회사, 즉 마이크로소프트에 귀속되어 있다. 어떤 기능을 사용해야 할 지 매우 조심하지 않으면 마이크로소프트의 지원 없이는 해결할 수 없는 막다른 길에 도달하게 된다. 만일 유닉스 기반에서 시작한다면, 예를 들어 파이썬과 같은 더 훌륭한 언어와 라이브러리를 사용할 수 있다.

비주얼 베이직은 마이크로소프트의 독점 언어라는 사실만으로도 사용하지 않을 충분한 이유가 된다. 또한 다른 종류의 베이직 언어와 마찬가지로 잘못된 프로그래밍 습관에 젖게 하는 잘못 설계된 언어다.

한 회사의 라이브러리와 위젯, 개발 도구에 의존하는 것은 좋지 않은 습관이다. 일반적으로 최소한 리눅스나 BSD 중 한 종류를 지원하거나 적어도 세 종류의 운영체제를 지원하지 않는 언어는 해킹을 배우기에 좋은 언어가 아니다.

**질문: 시스템을 크랙하는 것을 도와주거나 방법을 가르쳐 줄 수 있는가?**<br/>
답변: 그럴 수 없다. 이 FAQ를 읽고도 여전히 이런 종류의 메일을 보낼 수 있는 사람은 비록 내게 그럴만한 시간이 있다고 해도 교육을 받을 수 없을 만큼 어리석은 사람이다. 나는 이러한 종류의 질문을 담은 메일을 모두 무시하거나 극도로 거친 답장을 보낸다.

**질문: 다른 사람의 계정 암호를 얻을 수 있는가?**<br/>
답변: 이것은 크레킹이다. 꺼져 버리도록.

**질문: 다른 사람의 메일을 읽거나 살펴볼 수 있는가?**<br/>
답변: 이것도 크래킹이다. 꺼져, 얼간이 같으니라고.

**질문: 어떻게 IRC에서 관리 권한을 뺏을 수 있는가?**<br/>
답변: 이것은 크래킹이다. 썩 꺼져.

**질문: 시스템이 크랙을 당했다. 앞으로의 공격을 막을 수 있게 도와줄 수 있는가?**<br/>
답변: 도와줄 수 없다. 이런 종류의 질문을 하는 사람은 십중팔구 윈도우 시스템을 사용하는 사람들이다. 윈도우 코드와 아키텍처에는 너무 많은 결함이 존재하기 때문에 시스템 크랙에 효과적으로 대처하는 것이 불가능하다. 이것은 마치 보트 안에 새는 물을 체로 퍼내는 것과 같다. 가장 신뢰할 만한 대책은 리눅스나 보안을 담보할 수 있는 다른 운영체제로 교체하는 것이다.

**질문: 윈도우 소프트웨어 사용에 문제가 생겼다. 도와줄 수 있는가?**<br/>
답변: 물론이다. DOS 프롬프트를 열고 ‘format c:’를 입력해 실행하자. 몇 분 지나지 않아 이제껏 발생했던 모든 문제가 사라질 것이다.[^8-16]

[^8-16]: 역자주 이것은 시스템 전체를 포맷하는 명령어다. 운영체제를 포함한 모든 자료가 사라진다. FAQ 답변의 의미는 MS 윈도우에 문제가 생겼다면 가장 간편한 방법인 OS를 재설치를 선택하라는 뜻이다. ‘MS 윈도우 98’은 98번을 새로 깔아야 하는 OS라는 농담이 있을 정도로 과거의 윈도우 운영체제는 안정성에 문제가 많았다.

**질문: 이야기를 나눌 수 있는 실제 해커들은 어디서 만날 수 있는가?**<br/>
답변: 가장 좋은 방법은 참석할 수 있는 주변 LUG에 참여하는 것이다. LUG에 대한 정보는 [LDP 리눅스 일반 정보 안내](http://www.tldp.org/links/index.html)에서 참고할 수 있다.

나는 IRC`Internet Relay Chat`에서는 실제로 해커를 만날 수 없다고 말하곤 했다. 그러나 이제는 상황이 변한 것 같다. 김프나 펄과 같은 해커 공동체에는 이제 IRC 채널이 있다.

**질문: 해킹에 관련된 유용한 책에는 어떤 것들이 있는가?**<br/>
답변: 내가 유지관리하는 「[리눅스 도서 목록HOWTO](http://en.tldp.org/HOWTO/Reading-List-HOWTO/index.html)」가 도움이 될 것 같다. 또 다른 문서인 「[로지나타카](http://catb.org/~esr/faqs/loginataka.html)」도 흥미를 줄 수 있을 것이다.

파이썬의 소개 글을 보려면, 파이썬 웹 사이트에 있는 입문서를 확인해보자.

**질문: 해커가 되려면 수학을 잘 해야 하는가?**<br/>
답변: 그렇지 않다. 해킹에는 약간의 간단한 수학과 대수만이 사용된다. 3D 컴퓨터 그래픽스와 같은 특정 영역의 프로그램을 작성하지 않는 한 삼각함수나 미적분, 해석학 같은 것은 필요하지 않다. 하지만 기본적인 수학식과 불 대수를 알아두는 것은 좋다. 또한 유한집합 이론과 조합론, 그래프 이론, 유한 수학과 같은 특정 영역의 수학을 잘하는 것도 도움이 될 수 있다.

가장 중요한 것은 수학자와 같이 논리적으로 생각하고 인과관계를 잘 따지는 것이다. 수학 자체가 도움이 되지는 않지만, 수학 문제 해결 방법의 배경지식을 습득하고 훈련하는 것은 필요하다. 만일 이런 지식이 없다면, 해커로서의 희망은 없는 것과 같다. 반면에 훈련이 부족하다면 이는 극복이 가능하다.

내가 생각하기에 레이먼드 스멀리언`Raymond Smullyan`이 쓴 『퍼즐과 함께 하는 즐거운 논리』를 보면 무엇을 어찌 해야 할지 찾을 수 있으리라 생각한다.[^8-17] 스멀리언의 재미 있는 논리 수수께끼는 해커 정신과 많이 닮아 있다. 이런 문제를 풀 수 있다면, 해커가 될 수 있다는 청신호다. 단지 문제를 푸는 것보다 즐기는 것이 더욱 좋다.

[^8-17]: 역자주 『What Is the Name of This Book?: The Riddle of Dracula and Other Logical Puzzles, Raymond M. Smullyan, Dover Publications, 2011, ISBN: 9780486481982』, 『퍼즐과 함께 하는 즐거운 논리, 레이먼드 M. 스멀리언, 이종권 외 옮김, 문예출판사, 2013년, ISBN: 9788931001488』

**질문: 어떤 언어를 제일 먼저 배워야 하는가?**<br/>
답변: 아직 아는 언어가 없다면 (좀 더 엄격한 HTML인) XHTML을 배워두자. 많은 책이 있지만 대부분은 과장되고 좋지 않은 책이며, 좋은 책은 그리 많지 않다. 내가 가장 좋아하는 책은 『[HTML과 XHTML 핵심가이드](http://www.hanb.co.kr/book/look.html?isbn=0-596-52732-2)』다.[^8-18]

[^8-18]: 역자주 『HTML & XHTML: The Definitive Guide, Sixth Edition, Chuck Musciano, Bill Kennedy, OReilly Media, 2006, ISBN: 0596527322』, 『HTML과 XHTML 핵심가이드, 척 무시아노, 빌 케네디, 김종민 옮김, 한빛미디어, 2001년, ISBN: 9788979141290』

그러나 HTML은 본격적인 프로그래밍 언어가 아니다. 프로그래밍을 시작할 준비가 되었을 때는 [파이썬](http://www.python.org/)부터 학습할 것을 권하고 싶다. 많은 사람이 추천하는 펄은 아직까지는 파이썬보다 널리 사용되지만 배우기 어렵고 또한 개인적으로 잘 설계된 언어는 아니라고 생각한다.

C는 정말로 중요한 언어다. 그러나 파이썬이나 펄보다 더 어려운 언어이므로 처음부터 C를 학습하려고 하지 말라.

MS 윈도우 사용자는 비주얼 베이직에 안주하지 말아야 한다. 비주얼 베이직은 나쁜 프로그래밍습관을 가르치고 윈도우 이외의 아키텍처로는 이식할 수 없기 때문에 피하는 것이 좋다.

**질문: 어떤 종류의 하드웨어가 필요한가?**<br/>
답변: 예전의 개인용 컴퓨터는 해커의 학습에 장벽이 될 만큼 성능이 떨어지고 메모리가 부족했다. 1990년대 중반의 인텔 486DX50 컴퓨터부터는 개발 업무, X윈도 사용, 인터넷 통신을 하기에 충분한 성능을 갖췄고 최근에는 최소 용량의 디스크를 구한다 해도 충분한 저장 공간이 있다.

컴퓨터를 선택할 때 가장 중요한 것은 리눅스 또는 BSD와의 호환 여부를 확인하는 것이다. 다시 한번 말하지만 최근의 컴퓨터 사양이라면 크게 염려할 필요가 없다. 다만 모뎀과 무선 랜카드는 윈도우 전용으로 개발되어 리눅스에서 사용할 수가 없는 경우가 있다.

하드웨어 호환성 목록의 최신판은 [리눅스 하드웨어 호환성HOWTO](http://en.tldp.org/HOWTO/Hardware-HOWTO/)에서 확인할 수 있다.

**질문: 오픈소스에 기여하고 싶다. 어떤 문제를 다뤄야 할지 알려줄 수 있는가?**<br/>
답변: 여러분의 재능과 관심사를 알 수 없기 때문에 그럴 수 없다. 스스로 동기를 갖고 참여해야 한다. 그렇지 않고 다른 사람이 결정해준 대로 따라가게 된다면 아무것도 할 수 없을 것이다.

이렇게 한 번 해보자. 며칠 동안 [프레시미트](http://freecode.com/)`Freshmeat`에서 프로젝트 공지사항을 확인해보자. 그 중 ‘좋아, 이 프로젝트를 해보고 싶어!’라는 생각이 드는 프로젝트가 있으면 참여하면 된다.

**질문: 마이크로소프트를 증오하고 경멸해야 하는가?**<br/>
답변: 그렇게 하지 말라. 마이크로소프트가 혐오스럽지 않기 때문에 그렇게 하지 말라는 것이 아니라 해커 문화는 마이크로소프트가 존재하기 오래 전부터 존재했으며, 마이크로소프트가 역사 속으로 사라진 뒤에도 계속 남아 있을 것이기 때문이다. 마이크로소프트를 비난하고 증오하는 데 사용할 에너지가 있다면 오히려 자신의 기술을 더 가다듬는데 사용하라. 좋은 코드를 작성하는 것, 그것은 자신의 이미지를 손상하지 않고도 마이크로소프트를 충분히 물리칠 수 있는 길이다.

**질문: 오픈소스 소프트웨어는 프로그래머가 생계를 유지하는 데 방해가 되지 않는가?**<br/>
답변: 그런 것 같지 않다. 현재까지 오픈소스 산업은 취업의 기회를 감소시킨 것이 아니라 오히려 일자리를 만든다. 이미 만들어진 프로그램을 활용하는 것이 그렇지 않은 경우보다 실제 경제적 이익을 가져올 수 있다면, 새로운 프로그램을 완성한 뒤에 무료로 공개하느냐에 관계 없이 프로그래머는 보수를 받을 수 있을 것이다.

얼마나 많은 ‘무료’ 소프트웨어가 만들어지든 더 많은 수의 새롭고 최적화된 애플리케이션 프로그램이 필요하기 마련이다. [오픈소스 이니셔티브](http://opensource.org/)의 홈페이지 내용을 참고하면 이러한 측면의 보다 구체적으로 알 수 있다.

**질문: 무료 유닉스는 어디서 구할 수 있는가?**<br/>
답변: 아직 유닉스가 설치된 컴퓨터를 갖지 않았다면, 이 문서 어딘가를 찾아보면 가장 널리 사용되는 무료 유닉스를 구할 수 있는 방법을 알 수 있다. 해커가 되려면 무엇보다 동기와 진취적인 정신, 그리고 자기 스스로 배워 나갈 수 있는 능력이 필요하다. 자, 그럼 이제 시작해보자!

![](figures/hacker_emblem.jpg "")

